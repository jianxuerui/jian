#!/bin/bash

# ========= Nockchain 二进制修复版脚本 v28.0 =========
RESET='\033[0m'
BOLD='\033[1m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
CYAN='\033[0;36m'

NCK_DIR="$HOME/nockchain"
ENV_FILE="$NCK_DIR/.env"
BUILD_LOG="$HOME/nockchain_build.log"
NODE_LOG="$NCK_DIR/logs/nockchain.log"

# ---------- 辅助函数 ----------
log() { echo -e "${BLUE}[*] $*${RESET}"; }
ok()  { echo -e "${GREEN}[✓] $*${RESET}"; }
warn(){ echo -e "${YELLOW}[!] $*${RESET}"; }
err() { echo -e "${RED}[✗] $*${RESET}"; }
pause() { echo; read -n1 -r -p "按任意键返回菜单..." _; }

# ---------- 二进制文件修复函数 ----------
fix_binary_not_found() {
  log "修复 nockchain 程序不存在问题"
  
  # 检查项目目录
  if [ ! -d "$NCK_DIR" ]; then
    err "Nockchain 项目目录不存在，请先克隆项目"
    log "正在克隆 Nockchain 项目..."
    git clone --depth 1 https://github.com/zorp-corp/nockchain "$NCK_DIR" || {
      err "项目克隆失败"
      return 1
    }
  fi
  
  cd "$NCK_DIR"
  
  # 检查 target/release 目录中是否有二进制文件
  if [ -f "target/release/nockchain" ]; then
    log "找到已编译的 nockchain 二进制文件，正在安装..."
    
    # 创建用户 bin 目录并添加到 PATH
    mkdir -p "$HOME/.local/bin"
    cp target/release/{nockchain,nockchain-wallet,hoonc} "$HOME/.local/bin/" 2>/dev/null || true
    
    # 添加到 PATH（如果尚未添加）
    if ! grep -q "$HOME/.local/bin" "$HOME/.bashrc"; then
      echo 'export PATH="$HOME/.local/bin:$PATH"' >> "$HOME/.bashrc"
      export PATH="$HOME/.local/bin:$PATH"
    fi
    
    ok "二进制文件已安装到 $HOME/.local/bin"
    log "请运行 'source ~/.bashrc' 更新环境变量"
    return 0
  fi
  
  # 如果没有找到二进制文件，尝试重新编译
  log "未找到已编译的二进制文件，尝试重新编译..."
  
  # 安装依赖
  if ! command -v rustc >/dev/null; then
    log "安装 Rust 编程语言..."
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    source "$HOME/.cargo/env"
  fi
  
  # 优化 Cargo 配置
  mkdir -p "$HOME/.cargo"
  cat > "$HOME/.cargo/config.toml" << 'EOF'
[build]
jobs = 1

[net]
retry = 50
timeout = 3600
git-fetch-with-cli = true

[profile.release]
opt-level = 1
debug = false
panic = "abort"
codegen-units = 1
strip = true
EOF
  
  # 设置环境变量
  export RUST_MIN_STACK=33554432
  export CARGO_BUILD_JOBS=1
  export RUSTFLAGS="-C opt-level=1 -C debuginfo=0 -C panic=abort"
  
  # 清理旧的构建文件
  cargo clean
  
  # 重新编译
  log "开始编译 Nockchain（这可能需要较长时间）..."
  cargo build --release 2>&1 | tee "$BUILD_LOG"
  
  # 检查编译结果
  if [ -f "target/release/nockchain" ]; then
    ok "编译成功"
    
    # 安装到用户 bin 目录
    mkdir -p "$HOME/.local/bin"
    cp target/release/{nockchain,nockchain-wallet,hoonc} "$HOME/.local/bin/" 2>/dev/null || true
    
    # 添加到 PATH（如果尚未添加）
    if ! grep -q "$HOME/.local/bin" "$HOME/.bashrc"; then
      echo 'export PATH="$HOME/.local/bin:$PATH"' >> "$HOME/.bashrc"
    fi
    
    export PATH="$HOME/.local/bin:$PATH"
    ok "二进制文件已安装到 $HOME/.local/bin"
    log "请运行 'source ~/.bashrc' 更新环境变量"
    return 0
  else
    err "编译失败，请查看日志: $BUILD_LOG"
    return 1
  fi
}

# ---------- 手动复制二进制文件 ----------
manual_copy_binaries() {
  log "手动复制二进制文件"
  
  # 检查项目目录
  if [ ! -d "$NCK_DIR" ]; then
    err "Nockchain 项目目录不存在"
    return 1
  fi
  
  cd "$NCK_DIR"
  
  # 检查 target/release 目录
  if [ ! -d "target/release" ]; then
    err "target/release 目录不存在，请先构建项目"
    return 1
  fi
  
  # 检查二进制文件
  binaries_found=0
  for binary in nockchain nockchain-wallet hoonc; do
    if [ -f "target/release/$binary" ]; then
      ((binaries_found++))
    fi
  done
  
  if [ $binaries_found -eq 0 ]; then
    err "未找到任何二进制文件，请先构建项目"
    return 1
  fi
  
  # 创建目标目录
  mkdir -p "$HOME/.local/bin"
  
  # 复制二进制文件
  for binary in nockchain nockchain-wallet hoonc; do
    if [ -f "target/release/$binary" ]; then
      cp "target/release/$binary" "$HOME/.local/bin/"
      chmod +x "$HOME/.local/bin/$binary"
      ok "$binary 已复制到 $HOME/.local/bin/"
    fi
  done
  
  # 添加到 PATH
  if ! grep -q "$HOME/.local/bin" "$HOME/.bashrc"; then
    echo 'export PATH="$HOME/.local/bin:$PATH"' >> "$HOME/.bashrc"
    log "已将 $HOME/.local/bin 添加到 PATH"
  fi
  
  export PATH="$HOME/.local/bin:$PATH"
  
  ok "二进制文件已手动复制完成"
  log "请运行 'source ~/.bashrc' 更新环境变量"
}

# ---------- 完整环境安装 ----------
complete_installation() {
  log "开始完整安装 Nockchain"
  
  # 安装系统依赖
  if command -v apt >/dev/null; then
    log "安装系统依赖..."
    sudo apt update -y
    sudo apt install -y build-essential git curl pkg-config libssl-dev clang cmake
  fi
  
  # 安装 Rust
  if ! command -v rustc >/dev/null; then
    log "安装 Rust..."
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    source "$HOME/.cargo/env"
  fi
  
  # 克隆项目
  if [ ! -d "$NCK_DIR" ]; then
    log "克隆 Nockchain 项目..."
    git clone --depth 1 https://github.com/zorp-corp/nockchain "$NCK_DIR"
  else
    log "更新 Nockchain 项目..."
    cd "$NCK_DIR"
    git pull
  fi
  
  cd "$NCK_DIR"
  
  # 优化 Cargo 配置
  mkdir -p "$HOME/.cargo"
  cat > "$HOME/.cargo/config.toml" << 'EOF'
[build]
jobs = 1

[net]
retry = 50
timeout = 3600
git-fetch-with-cli = true

[profile.release]
opt-level = 1
debug = false
panic = "abort"
codegen-units = 1
strip = true
EOF
  
  # 设置环境变量
  export RUST_MIN_STACK=33554432
  export CARGO_BUILD_JOBS=1
  export RUSTFLAGS="-C opt-level=1 -C debuginfo=0 -C panic=abort"
  
  # 清理旧的构建文件
  cargo clean
  
  # 编译项目
  log "编译 Nockchain（这可能需要较长时间）..."
  cargo build --release 2>&1 | tee "$BUILD_LOG"
  
  # 检查编译结果
  if [ -f "target/release/nockchain" ]; then
    ok "编译成功"
    
    # 安装到用户 bin 目录
    mkdir -p "$HOME/.local/bin"
    cp target/release/{nockchain,nockchain-wallet,hoonc} "$HOME/.local/bin/" 2>/dev/null || true
    
    # 添加到 PATH
    if ! grep -q "$HOME/.local/bin" "$HOME/.bashrc"; then
      echo 'export PATH="$HOME/.local/bin:$PATH"' >> "$HOME/.bashrc"
    fi
    
    export PATH="$HOME/.local/bin:$PATH"
    
    # 创建必要目录
    mkdir -p "$NCK_DIR/logs" "$NCK_DIR/.socket"
    
    # 创建环境文件
    if [ ! -f "$ENV_FILE" ]; then
      cat > "$ENV_FILE" <<EOF
MINING_PUBKEY=
RUST_LOG=info
EOF
    fi
    
    ok "安装完成"
  else
    err "编译失败，请查看日志: $BUILD_LOG"
  fi
}

# ---------- 设置挖矿公钥 ----------
set_mining_pubkey() {
  log "设置挖矿公钥"
  
  if [ ! -f "$ENV_FILE" ]; then
    mkdir -p "$NCK_DIR"
    echo "MINING_PUBKEY=" > "$ENV_FILE"
    echo "RUST_LOG=info" >> "$ENV_FILE"
  fi
  
  read -rp "输入 128 位公钥: " key
  key=$(echo "$key" | tr -d '[:space:]' | tr A-F a-f)
  
  if [ ${#key} -eq 128 ] && [[ "$key" =~ ^[0-9a-f]+$ ]]; then
    sed -i "/^MINING_PUBKEY=/d" "$ENV_FILE"
    echo "MINING_PUBKEY=$key" >> "$ENV_FILE"
    ok "公钥已写入 .env"
  else
    err "公钥格式不正确"
  fi
  
  pause
}

# ---------- 启动节点 ----------
start_node() {
  log "启动 Nockchain 节点"
  
  # 检查环境
  source "$ENV_FILE" 2>/dev/null || true
  if [ -z "$MINING_PUBKEY" ]; then
    err "未设置挖矿公钥，请先设置"
    pause
    return 1
  fi
  
  # 检查可执行文件
  if ! command -v nockchain >/dev/null && [ ! -f "$NCK_DIR/target/release/nockchain" ]; then
    err "nockchain 程序不存在，请先执行安装或构建"
    pause
    return 1
  fi
  
  # 确定使用的可执行文件
  if command -v nockchain >/dev/null; then
    NOCKCHAIN_BIN="nockchain"
  else
    NOCKCHAIN_BIN="$NCK_DIR/target/release/nockchain"
  fi
  
  # 清理 socket 文件
  pkill -f nockchain 2>/dev/null || true
  find "$NCK_DIR" -name "*.sock" -delete 2>/dev/null || true
  mkdir -p "$NCK_DIR/.socket" "$NCK_DIR/logs"
  
  # 构建启动命令
  START_CMD="RUST_MIN_STACK=33554432 RUST_LOG=info $NOCKCHAIN_BIN \
    --mining-pubkey $MINING_PUBKEY \
    --mine \
    --peer /ip4/95.216.102.60/udp/3006/quic-v1 \
    --peer /ip4/65.109.156.108/udp/3006/quic-v1 \
    --peer /ip4/65.21.67.175/udp/3006/quic-v1 \
    --peer /ip4/65.109.156.172/udp/3006/quic-v1 \
    --peer /ip4/34.174.22.166/udp/3006/quic-v1 \
    --npc-socket $NCK_DIR/.socket/nockchain.sock \
    --bind /ip4/0.0.0.0/udp/3006/quic-v1"
  
  # 启动节点
  cd "$NCK_DIR"
  if command -v screen >/dev/null; then
    screen -dmS nockchain bash -c "$START_CMD 2>&1 | tee $NODE_LOG"
    sleep 3
    if screen -list | grep -qw "nockchain"; then
      ok "节点已启动 (screen 会话: nockchain)"
    else
      err "节点启动失败"
    fi
  else
    nohup bash -c "$START_CMD" > "$NODE_LOG" 2>&1 &
    ok "节点已后台启动"
  fi
  
  pause
}

# ---------- 查看日志 ----------
view_logs() {
  if [ -f "$NODE_LOG" ]; then
    tail -n 100 -f "$NODE_LOG"
  else
    err "日志文件不存在: $NODE_LOG"
  fi
  pause
}

# ---------- 主菜单 ----------
while true; do
  clear
  echo -e "${CYAN}${BOLD}"
  echo "================================================"
  echo "        Nockchain 二进制修复版脚本 v28.0"
  echo "================================================"
  echo -e "${RESET}"
  echo ""
  echo -e "${GREEN}🔧 修复选项:${RESET}"
  echo "  1) 修复 nockchain 程序不存在问题"
  echo "  2) 手动复制二进制文件"
  echo "  3) 完整重新安装"
  echo ""
  echo -e "${GREEN}🔑 节点管理:${RESET}"
  echo "  4) 设置挖矿公钥"
  echo "  5) 启动挖矿节点"
  echo "  6) 查看节点日志"
  echo ""
  echo "  0) 退出脚本"
  echo ""
  read -rp "请选择操作 (0-6): " choice
  
  case $choice in
    1) fix_binary_not_found; pause ;;
    2) manual_copy_binaries; pause ;;
    3) complete_installation; pause ;;
    4) set_mining_pubkey ;;
    5) start_node ;;
    6) view_logs ;;
    0) echo -e "${GREEN}感谢使用！${RESET}"; exit 0 ;;
    *) warn "无效选项，请重新选择"; sleep 1 ;;
  esac
done
