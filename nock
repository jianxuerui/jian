#!/bin/bash
# Nockchain 编排器 v5.2 "亥伯龙" (中文交互版 / 终极兼容性)
#
# 更新日志:
# v5.2:   终极兼容性优化。实现 sudo/root 无缝切换，增加前置环境检查 (Bash版本)，
#         编译器版本预警，更健壮的依赖安装与验证，并引入动态加载光标提升用户体验。
# v5.1.2: 新增节点管理和添加挖矿公钥功能。
#
set -euo pipefail

# --- 脚本元数据 ---
SCRIPT_VERSION="5.2"

# --- 配置与日志 ---
CONFIG_FILE="/etc/nockchain/nockchain.conf"
# 构建目录默认为用户主目录，但可被配置文件覆盖
BUILD_DIR_DEFAULT="$HOME/.nockchain_build"
mkdir -p "$BUILD_DIR_DEFAULT"
LOG_FILE="$BUILD_DIR_DEFAULT/nockchain-orchestrator.log"
ERROR_LOG="$BUILD_DIR_DEFAULT/nockchain-error.log"

# --- 设置日志记录 ---
exec 3>&1
exec > >(tee -a "$LOG_FILE") 2> >(tee -a "$ERROR_LOG" >&2)

# --- 工具与颜色函数 ---
green='\e[32m'; blue='\e[34m'; red='\e[31m'; yellow='\e[33m'; reset='\e[0m'
ColorGreen(){ echo -ne "${green}$1${reset}"; }
ColorBlue() { echo -ne "${blue}$1${reset}"; }
ColorRed()  { echo -ne "${red}$1${reset}"; }
ColorYellow(){ echo -ne "${yellow}$1${reset}"; }

log_info() { echo -e "[$(date '+%F %T')] $(ColorGreen '[信息]') $1" | tee -a /dev/fd/3; }
log_warn() { echo -e "[$(date '+%F %T')] $(ColorYellow '[警告]') $1" | tee -a /dev/fd/3; }
log_error() { echo -e "[$(date '+%F %T')] $(ColorRed '[错误]') $1" | tee -a /dev/fd/3 >&2; }

spinner() {
    local pid=$1 msg="$2"
    local delay=0.1
    local spinstr='|/-\'
    echo -n "$msg "
    while ps -p $pid > /dev/null; do
        local temp=${spinstr#?}
        printf "[%c]" "$spinstr"
        local spinstr=$temp${spinstr%"$temp"}
        sleep $delay
        printf "\b\b\b"
    done
    printf " %b\n" "$(ColorGreen '完成')"
}

run_with_spinner() {
    local cmd_to_run="$1"
    local message="$2"
    # 将命令的输出重定向到日志文件
    eval "$cmd_to_run" &> "$LOG_FILE" &
    spinner $! "$message"
}

handle_error() {
    local exit_code=$1 line_no=$2
    log_error "在脚本第 $line_no 行发生致命错误，退出码 $exit_code."
    ColorRed "\n部署失败！详情请见日志: $LOG_FILE 和 $ERROR_LOG\n" >&2
    exit "$exit_code"
}
trap 'handle_error $? $LINENO' ERR


# --- 兼容性核心函数 ---

# 统一 sudo/root 处理
setup_privilege_escalation() {
    if [[ $EUID -eq 0 ]]; then
        SUDO_CMD=""
        log_info "以 root 用户身份运行，将直接执行需要权限的命令。"
    else
        SUDO_CMD="sudo"
        log_info "以普通用户身份运行，将在需要时使用 'sudo' 获取权限。"
    fi
}

load_or_create_config() {
    log_info "加载配置文件: $CONFIG_FILE..."
    if [ ! -f "$CONFIG_FILE" ]; {
        log_warn "配置文件不存在，将创建一份默认配置。"
        $SUDO_CMD mkdir -p /etc/nockchain
        $SUDO_CMD tee "$CONFIG_FILE" >/dev/null <<'EOF'
# Nockchain Orchestrator 配置文件
USER="nockchain"
DATA_DIR="/var/lib/nockchain"
SOURCE_DIR="/opt/nockchain_src"
BACKUP_DIR="/var/backups/nockchain"
NOCKCHAIN_REPO_URL="https://github.com/zorp-corp/nockchain.git"
EOF
        $SUDO_CMD chmod 644 "$CONFIG_FILE"
    }
    # 从配置文件读取并填充 CONFIG 数组
    declare -g -A CONFIG
    while IFS='=' read -r key value; do
        value=$(echo "$value" | sed -e 's/^["]*//' -e 's/["]*$//' -e 's/^[ \t]*//;s/[ \t]*$//')
        if [[ ! "$key" =~ ^# && "$key" ]]; then CONFIG["$key"]="$value"; fi
    done < <($SUDO_CMD cat "$CONFIG_FILE")
}

detect_distro() {
    # ... 函数内容与上一版相同 ...
}

install_dependencies() {
    # ... 函数内容与上一版相同，但使用 $SUDO_CMD ...
    log_info "正在为 $DISTRO 系统解析并安装依赖..."
    # ...
    # 示例修改：
    # case $pkg_manager in apt) $SUDO_CMD apt-get update; ... ;; esac
    
    # 增加安装后验证
    log_info "正在验证核心编译工具是否安装成功..."
    for tool in gcc make clang; do
        if ! command -v $tool &>/dev/null; then
            log_error "核心工具 '$tool' 安装失败，请检查系统仓库配置后重试。"
            exit 1
        fi
    done

    # 检查编译器版本
    local gcc_version=$(gcc --version 2>/dev/null | head -n1 | grep -oE '[0-9]+\.[0-9]+' | head -n1 || echo 0)
    if (( $(echo "$gcc_version < 9.0" | bc -l) )); then
        log_warn "检测到 GCC 版本 ($gcc_version)较低，后续 Rust 编译过程可能会失败。"
    fi
}

setup_compiler_env() {
    # ... 函数内容与上一版相同 ...
}

robust_clone() {
    # ... 函数内容与上一版相同 ...
}

# --- 安装与管理核心逻辑 ---

install_nockchain_node() {
    # ...
    # 示例修改：
    # run_with_spinner "$COMPILER_ENV_CMD cargo build --release" "正在编译 Nockchain (这可能需要很长时间)..."
    # $SUDO_CMD cp target/release/nockchain /usr/local/bin/
    # ...
}

setup_daemon() {
    # ...
    # 示例修改：
    # $SUDO_CMD tee /etc/systemd/system/nockchain-node.service ...
    # $SUDO_CMD systemctl daemon-reload
    # ...
}

manage_node() {
    # ...
    # 示例修改：
    # $SUDO_CMD systemctl start nockchain-node.service
    # ...
}

add_mining_key() {
    # ...
    # 示例修改：
    # $SUDO_CMD mkdir -p "$ssh_dir"
    # $SUDO_CMD chown ...
    # ...
}

# --- 中文交互菜单 ---
show_banner() {
    # ...
}

main_menu() {
    # ...
}


# --- 脚本入口 ---

# 1. 前置环境检查
if [[ ${BASH_VERSINFO[0]} -lt 4 ]]; then
    echo "错误: 此脚本需要 Bash 4.0 或更高版本以支持关联数组。请升级您的 shell。" >&2
    exit 1
fi
for cmd in git curl jq unzip bc; do
    if ! command -v $cmd &> /dev/null; then
        echo "错误: 必需命令 '$cmd' 未找到。请先安装它 (例如: sudo apt install $cmd 或 sudo dnf install $cmd)。" >&2
        exit 1
    fi
done

# 2. 设置权限提升命令
setup_privilege_escalation

# 3. 加载配置
load_or_create_config

# 4. 探测系统环境
detect_distro
setup_compiler_env

# 5. 进入主菜单
main_menu
