#!/usr/bin/env bash
# nockchain_toolbox.sh
# 版本 2.2 ‒ 保留数字菜单 + 自动处理 CUDA 检测问题
# 适用于一键部署 / 更新 Nockchain-ethminer[1]

set -euo pipefail
IFS=$'\n\t'

##############################################################################
# 全局配置
##############################################################################
SRC_DIR="${HOME}/build/ethminer"
INSTALL_PREFIX="/usr/local"
JOBS="$(nproc)"
LOG_FILE="${HOME}/nockchain.log"
CONFIG_FILE="${HOME}/.nockchain.conf"

##############################################################################
# 彩色输出
##############################################################################
info()  { printf "\033[32m[INFO]\033[0m %s\n" "$*"; }
warn()  { printf "\033[33m[WARN]\033[0m %s\n" "$*"; }
err()   { printf "\033[31m[ERR ]\033[0m %s\n" "$*"; exit 1; }

##############################################################################
# 包管理器检测 & 依赖安装
##############################################################################
detect_pm() {
    command -v apt-get >/dev/null && { echo apt; return; }
    command -v dnf      >/dev/null && { echo dnf; return; }
    command -v yum      >/dev/null && { echo yum; return; }
    command -v apk      >/dev/null && { echo apk; return; }
    err "未识别的 Linux 发行版，请手动安装依赖"
}

install_deps() {
    local pm; pm="$(detect_pm)"
    info "使用包管理器 ${pm} 安装依赖"
    case "$pm" in
        apt) sudo apt-get update &&
             sudo apt-get install -y build-essential cmake git \
                                      libstdc++-dev libssl-dev pkg-config ;;
        dnf) sudo dnf -y install gcc gcc-c++ cmake git \
                                 libstdc++-devel openssl-devel pkgconfig ;;
        yum) sudo yum -y install gcc gcc-c++ cmake git \
                                 libstdc++-devel openssl-devel pkgconfig ;;
        apk) sudo apk add --no-cache build-base cmake git \
                                 libstdc++ libstdc++-dev openssl-dev ;;
    esac
}

##############################################################################
# 源码拉取 / 更新
##############################################################################
fetch_source() {
    mkdir -p "$(dirname "$SRC_DIR")"
    if [[ -d "$SRC_DIR/.git" ]]; then
        info "更新 ethminer 源码"
        git -C "$SRC_DIR" pull --rebase
    else
        info "克隆 ethminer 源码"
        git clone --recursive https://github.com/ethereum-mining/ethminer.git "$SRC_DIR"
    fi
}

##############################################################################
# 注入补丁：消除 JsonCpp Reader 弃用告警
##############################################################################
patch_source() {
    local cmake="$SRC_DIR/CMakeLists.txt"
    if ! grep -q "Wno-deprecated-declarations" "$cmake"; then
        info "向 CMakeLists.txt 添加 -Wno-deprecated-declarations"
        sed -i '/CMAKE_CXX_STANDARD/a add_compile_options(-Wno-deprecated-declarations)' "$cmake"
    fi
}

##############################################################################
# CUDA 检测：如未找到则自动关闭 ETHASHCUDA
##############################################################################
detect_cuda() {
    if command -v nvcc >/dev/null; then
        echo "ON"
        return
    fi
    [[ -x /usr/local/cuda/bin/nvcc ]] && echo "ON" && return
    echo "OFF"
}

##############################################################################
# 编译 ethminer
##############################################################################
build_ethminer() {
    local USE_CUDA; USE_CUDA="$(detect_cuda)"
    if [[ "$USE_CUDA" == "OFF" ]]; then
        warn "未检测到 CUDA，将以 ETHASHCUDA=OFF 编译"
    else
        info "检测到 CUDA 环境，启用 CUDA 支持"
    fi

    info "开始编译 ethminer"
    cd "$SRC_DIR"
    mkdir -p build && cd build
    cmake .. \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_CXX_COMPILER=g++ \
        -DCMAKE_INSTALL_PREFIX="$INSTALL_PREFIX" \
        -DETHASHCUDA="$USE_CUDA"
    make -j"$JOBS"
    sudo make install
    info "ethminer 已安装到 ${INSTALL_PREFIX}/bin/ethminer"
}

##############################################################################
# 钱包配置
##############################################################################
change_wallet() {
    read -rp "请输入新的挖矿钱包地址: " WALLET
    [[ -z "$WALLET" ]] && { warn "钱包地址为空，操作取消"; return; }
    echo "WALLET=$WALLET" > "$CONFIG_FILE"
    info "钱包地址已写入 $CONFIG_FILE"
}

##############################################################################
# 启动 & 日志
##############################################################################
start_mining() {
    local WALLET
    WALLET="$(grep -E "^WALLET=" "$CONFIG_FILE" 2>/dev/null | cut -d= -f2 || true)"
    [[ -z "$WALLET" ]] && { warn "未配置钱包，请先选择菜单 2"; return; }

    nohup ethminer -P "stratum1+tcp://${WALLET}@eth.pool.example:4444" \
          &>> "$LOG_FILE" &
    info "挖矿进程已启动，日志写入 $LOG_FILE"
}

view_log() {
    [[ -f "$LOG_FILE" ]] || { warn "暂无日志"; return; }
    tail -n 50 -F "$LOG_FILE"
}

##############################################################################
# 菜单 UI
##############################################################################
menu() {
cat <<EOF

========== Nockchain 工具箱 ==========
1) 安装 / 更新 ethminer
2) 修改挖矿钱包
3) 启动挖矿节点
4) 查看运行日志
5) 退出
EOF
}

##############################################################################
# 主循环
##############################################################################
main() {
    while true; do
        menu
        read -rp "请选择 [1-5] : " ch
        case "$ch" in
            1) install_deps; fetch_source; patch_source; build_ethminer ;;
            2) change_wallet ;;
            3) start_mining  ;;
            4) view_log      ;;
            5) info "Bye"; exit 0 ;;
            *) warn "无效选项，请重试" ;;
        esac
    done
}

main "$@"
