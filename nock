#!/usr/bin/env bash

# ========= 智能环境检测 =========
OS_TYPE=$(awk -F= '/^ID=/{print $2}' /etc/os-release | tr -d '"')
ARCH_TYPE=$(uname -m)
GPU_TYPE=$(lspci -nn | awk -F'\\[|\\]' '/VGA/{print $2}')

# ========= 动态参数配置 =========
NCK_DIR="$HOME/nockchain"
ENV_FILE="$NCK_DIR/.env"
LOG_FILE="$NCK_DIR/nck_miner.log"

# ========= 色彩定义 =========
RESET='\033[0m'
BOLD='\033[1m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
CYAN='\033[0;36m'

# ========= 智能依赖安装 =========
function install_dependencies() {
  echo -e "${CYAN}[*] 检测并安装系统依赖...${RESET}"
  
  declare -A PKG_MAP=(
    [ubuntu]="libhwloc-dev ocl-icd-opencl-dev numactl jq"
    [debian]="hwloc-nox libopencl-dev numactl"
    [centos]="hwloc-devel openssl-devel numactl"
    [arch]="opencl-mesa hwloc numactl"
  )

  sudo ${PKG_MAP[$OS_TYPE]} &>>$LOG_FILE || {
    echo -e "${RED}✗ 依赖安装失败，详见 $LOG_FILE${RESET}"
    exit 1
  }
}

# ========= 硬件优化引擎 =========
function hardware_tuning() {
  echo -e "${CYAN}[*] 启动硬件优化引擎...${RESET}"
  
  # NUMA架构优化
  if numactl --hardware | grep -q "node 1"; then
    sudo sysctl -w vm.zone_reclaim_mode=0
    NUMACTL_OPT="numactl --interleave=all"
  fi

  # GPU加速层
  case "$GPU_TYPE" in
    10de*) export CUDA_VISIBLE_DEVICES=0 ;;
    1002*) export GPU_ACCELERATION="opencl" ;;
    8086*) export GPU_ACCELERATION="vaapi" ;;
  esac

  # 内存优化
  TOTAL_MEM=$(free -m | awk '/Mem:/{print $2}')
  HUGEPAGES=$((TOTAL_MEM * 9 / 10240))
  sudo sysctl -w vm.nr_hugepages=$HUGEPAGES &>>$LOG_FILE
}

# ========= 智能编译系统 =========
function adaptive_compile() {
  echo -e "${CYAN}[*] 执行自适应编译...${RESET}"
  
  CPU_FLAGS="-march=native"
  case "$ARCH_TYPE" in
    x86_64)
      if grep -q "avx2" /proc/cpuinfo; then
        CPU_FLAGS+=" -mavx2"
      fi
      ;;
    aarch64)
      CPU_FLAGS="-mcpu=native"
      ;;
  esac

  export RUSTFLAGS="-C target-cpu=native -C opt-level=3"
  export CFLAGS="$CPU_FLAGS -O3"
  export CXXFLAGS="$CFLAGS"
  
  cargo build --release &>>$LOG_FILE || {
    echo -e "${RED}✗ 编译失败，检查 $LOG_FILE${RESET}"
    exit 2
  }
}

# ========= 矿工控制中心 =========
function miner_control() {
  case "$1" in
    start)
      echo -e "${GREEN}✓ 启动矿工服务...${RESET}"
      $NUMACTL_OPT ./target/release/nck-miner --config $ENV_FILE &>>$LOG_FILE &
      ;;
    stop)
      echo -e "${YELLOW}➜ 停止运行中的矿工...${RESET}"
      pkill -f nck-miner
      ;;
    status)
      if pgrep -x "nck-miner" >/dev/null; then
        echo -e "${GREEN}✓ 矿工运行中${RESET}"
      else
        echo -e "${RED}✗ 矿工未运行${RESET}"
      fi
      ;;
  esac
}

# ========= 动态监控面板 =========
function live_dashboard() {
  watch -n1 -c "
    echo -e '${CYAN}=== 实时监控 ===${RESET}'
    printf 'CPU负载: %s\n' \"$(uptime | awk -F'[a-z]:' '{print $2}')\"
    printf '内存使用: %s/%s MB\n' \"$(free -m | awk '/Mem/{print $3}')\" \"$(free -m | awk '/Mem/{print $2}')\"
    if [ -f $ENV_FILE ]; then
      echo '当前公钥: $(awk -F= '/PUBKEY/{print $2}' $ENV_FILE)'
    fi
    echo -e '${CYAN}================${RESET}'
  "
}

# ========= 配置向导 =========
function config_wizard() {
  echo -e "${CYAN}>>> 配置向导 <<<${RESET}"
  
  # 公钥验证
  while :; do
    read -p "输入矿工公钥（128位十六进制）: " PUBKEY
    [[ "$PUBKEY" =~ ^[0-9a-fA-F]{32}$ ]] && break
    echo -e "${RED}✗ 格式错误，示例: 89f4fe6de0028e6b0d123ac7ee123456${RESET}"
  done

  # 生成配置文件
  cat > $ENV_FILE <<EOF
MINER_PUBKEY=$PUBKEY
THREADS=$(nproc)
GPU_ENABLED=$([ -n "$GPU_TYPE" ] && echo true || echo false)
EOF

  echo -e "${GREEN}✓ 配置文件已生成: $ENV_FILE${RESET}"
}

# ========= 主控界面 =========
function main_menu() {
  clear
  echo -e "${BOLD}${CYAN}"
  echo "=== Nockchain矿工管理系统 ==="
  echo -e "${RESET}"
  echo "1) 完整安装配置"
  echo "2) 启动矿工服务"
  echo "3) 停止矿工服务"
  echo "4) 实时监控面板"
  echo "5) 修改矿工公钥"
  echo "0) 退出系统"
  echo ""
  
  read -p "请选择操作: " choice
  case $choice in
    1) install_dependencies && hardware_tuning && adaptive_compile && config_wizard ;;
    2) miner_control start ;;
    3) miner_control stop ;;
    4) live_dashboard ;;
    5) config_wizard ;;
    0) exit 0 ;;
    *) echo -e "${RED}无效选择${RESET}"; sleep 1 ;;
  esac
}

# ========= 初始化执行 =========
[ ! -d "$NCK_DIR" ] && mkdir -p "$NCK_DIR"
trap "echo -e '${RED}强制退出!${RESET}'; exit 130" SIGINT

while true; do
  main_menu
done
