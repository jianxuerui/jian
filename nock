#!/bin/bash
# ==============================================================================
# Nockchain 挖矿助手 (K2 增强融合版 v10.0.0 - 史诗兼容核心版)
# ==============================================================================
# 作者: K2 节点教程分享 (AI 终极离线内核版)
#
# v10.0.0 更新日志:
# - [史诗兼容] 新增非 Systemd 系统支持！当检测到系统无 Systemd 时，自动切换到使用 `screen` 进行后台管理。
# - [史诗兼容] 增加了 `screen` 作为核心依赖，确保在所有系统上都有一致的后台运行体验。
# - [史诗兼容] 强化核心工具探测。为 `nproc` 等命令增加安全回退机制，即使在最小化系统中也能获取必要信息。
# - [鲁棒性增强] 在安装前增加对 `git` 和 `curl` 的预检查，引导用户修复缺失的基础工具。
# - [智能菜单] 主菜单现在可以动态显示服务管理方式 (Systemd 或 Screen)，并提供相应的状态信息。
# ==============================================================================

# --- 智能引导与权限检查 ---
if [ -z "$BASH_VERSION" ]; then
    echo -e "\033[0;31m[错误] 此脚本必须使用 'bash' 解释器运行，而不是 'sh'。\033[0m"
    echo -e "\033[1;33m请使用以下命令运行: \033[0;32mbash $0\033[0m"
    exit 1
fi
if [ "$(id -u)" -ne 0 ]; then
    echo -e "\033[1;33m[提示] 此脚本需要 Root 权限来安装依赖和管理服务。\033[0m"
    echo -e "\033[0;36m正在尝试使用 'sudo' 自动提权...\033[0m"
    if ! command -v sudo &>/dev/null; then
        echo -e "\033[0;31m[错误] 'sudo' 命令未找到。请以 root 用户身份直接运行此脚本: 'su -' 后再执行 'bash $0'\033[0m"
        exit 1
    fi
    sudo bash "$0" "$@"
    exit $?
fi
# --- 引导结束 ---

set -e

# --- 全局配置 ---
MINER_USERNAME="miner"
MINER_HOME="/home/${MINER_USERNAME}"
NCK_DIR="${MINER_HOME}/nockchain"
ENV_FILE="${NCK_DIR}/.env"
SERVICE_NAME="nockchain-miner" # 也用作 screen 会话名
SERVICE_FILE="/etc/systemd/system/${SERVICE_NAME}.service"

# --- 颜色定义 ---
if [ -t 1 ]; then
    RESET='\033[0m'; BOLD='\033[1m'; GREEN='\033[0;32m'; BLUE='\033[0;34m';
    YELLOW='\033[1;33m'; RED='\033[0;31m'; PURPLE='\033[0;35m'; CYAN='\033[0;36m'
else
    RESET=''; BOLD=''; GREEN=''; BLUE=''; YELLOW=''; RED=''; PURPLE=''; CYAN=''
fi

# --- 内核数据 (v140) ---
read -r -d '' HOON_KERNEL_CONTENT <<'EOF'
::
/+  hoon
|%
++  ver
  |%
  ++  arvo  0vI.need
  ++  kelvin  (as-co:co /(~ . 400))
  ++  hoon  140
  --
++  ride
  |%
  ++  sins  |=  a=ovum  (send a)
  ++  fard  |=  a=ovum  (send a)
  ++  send  |=  a=ovum  ~|([! a] !!)
  --
--
EOF

# ==============================================================================
# === 助手函数 (兼容性核心) ===
# ==============================================================================

function check_command_exists() { command -v "$1" &>/dev/null; }

function detect_system_info() {
    # ... (此函数内部逻辑不变, 但依赖列表已更新) ...
    if [ -f /etc/os-release ]; then . /etc/os-release; OS_ID=${ID,,}; else OS_ID=$(uname -s | tr '[:upper:]' '[:lower:]'); fi
    local screen_dep="screen" # screen 作为通用后台管理器
    if check_command_exists apt-get; then
        export PKG_MANAGER="apt"; export UPDATE_CMD="apt-get update -y"; export INSTALL_CMD="apt-get install -y"
        export DEP_PACKAGES="clang llvm libclang-dev pkg-config libssl-dev build-essential cmake git make curl dos2unix coreutils ${screen_dep}"
    elif check_command_exists dnf; then
        export PKG_MANAGER="dnf"; export UPDATE_CMD="dnf check-update"; export INSTALL_CMD="dnf install -y"
        export DEP_PACKAGES="clang llvm-devel libclang-devel pkgconfig openssl-devel cmake git make curl dos2unix coreutils ${screen_dep}"
        export GROUP_INSTALL_CMD="dnf groupinstall -y 'Development Tools'"
    elif check_command_exists yum; then
        export PKG_MANAGER="yum"; export UPDATE_CMD="yum check-update"; export INSTALL_CMD="yum install -y"
        export DEP_PACKAGES="clang llvm-devel libclang-devel pkgconfig openssl-devel cmake git make curl dos2unix coreutils ${screen_dep}"
        export GROUP_INSTALL_CMD="yum groupinstall -y 'Development Tools'"
    elif check_command_exists pacman; then
        export PKG_MANAGER="pacman"; export UPDATE_CMD="pacman -Sy"; export INSTALL_CMD="pacman -S --noconfirm --needed"
        export DEP_PACKAGES="clang llvm libclang pkg-config openssl cmake git make curl dos2unix base-devel coreutils ${screen_dep}"
    elif check_command_exists zypper; then
        export PKG_MANAGER="zypper"; export UPDATE_CMD="zypper refresh"; export INSTALL_CMD="zypper install -y"
        export DEP_PACKAGES="clang llvm-devel libclang-devel pkg-config libopenssl-devel cmake git make curl dos2unix patterns-devel-base-devel_basis coreutils ${screen_dep}"
    else export PKG_MANAGER="unsupported"; fi
    if [[ "$OS_ID" == "ubuntu" || "$OS_ID" == "debian" ]]; then export SUDO_GROUP="sudo"; else export SUDO_GROUP="wheel"; fi
}

function check_initial_deps() {
    local missing_deps=()
    ! check_command_exists curl && missing_deps+=("curl")
    ! check_command_exists git && missing_deps+=("git")
    if [ ${#missing_deps[@]} -ne 0 ]; then
        echo -e "${RED}错误: 缺少核心依赖工具: ${missing_deps[*]}${RESET}"
        if [ "$PKG_MANAGER" != "unsupported" ]; then
            echo -e "${YELLOW}请尝试手动运行以下命令安装它们:${RESET}"
            echo -e "${CYAN}${INSTALL_CMD} ${missing_deps[*]}${RESET}"
        else
            echo -e "${YELLOW}请根据您的系统手动安装它们。${RESET}"
        fi
        exit 1
    fi
}

function show_banner() {
    clear
    echo -e "${BOLD}${BLUE}======================================================${RESET}"
    echo -e "${BOLD}${BLUE} Nockchain 挖矿助手 (K2 v10.0.0 - 史诗兼容核心版)${RESET}"
    echo -e "${BOLD}${BLUE}======================================================${RESET}"
    echo -e "✨ ${BOLD}${PURPLE}内核增强: 使用内置 v140 内核！${RESET}"
    if check_systemd; then
        echo -e "⚙️ ${BOLD}${GREEN}管理模式: Systemd (现代系统标准)${RESET}"
    else
        echo -e "⚙️ ${BOLD}${YELLOW}管理模式: Screen (兼容模式)${RESET}"
    fi
    if id "${MINER_USERNAME}" &>/dev/null; then echo -e "👤 ${GREEN}专用用户 '${MINER_USERNAME}' 已创建。${RESET}"; else echo -e "👤 ${YELLOW}专用用户 '${MINER_USERNAME}' 待创建。${RESET}"; fi
    echo "📌 作者: K2 节点教程分享"
    echo "------------------------------------------------------"; echo ""
}

# [鲁棒性增强] 即使系统没有 nproc 或其他工具，也能安全地返回一个值
function get_num_cores_safe() { nproc 2>/dev/null || grep -c '^processor' /proc/cpuinfo 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || echo 1; }
function get_total_mem_kb() { grep MemTotal /proc/meminfo | awk '{print $2}' || echo 0; }
function pause_and_return() { echo ""; read -r -p "按任意键返回主菜单..." -s -n 1; echo; }
function check_systemd() { [ -d /run/systemd/system ] && check_command_exists systemctl; }

# ==============================================================================
# === 核心功能函数 ===
# ==============================================================================

function install_all() {
    show_banner; check_initial_deps
    echo -e "${YELLOW}[*] 开始全新安装 Nockchain...${RESET}"
    echo -e "${BLUE}--- 步骤 1/5: 准备专用用户 '${MINER_USERNAME}' ---${RESET}"
    # ... (用户清理和创建逻辑不变) ...
    if id "${MINER_USERNAME}" &>/dev/null; then
        echo -e "${YELLOW}[!] 检测到旧用户 '${MINER_USERNAME}'，正在清理...${RESET}"
        if check_systemd; then systemctl stop "$SERVICE_NAME" &>/dev/null; systemctl disable "$SERVICE_NAME" &>/dev/null; rm -f "$SERVICE_FILE"; systemctl daemon-reload &>/dev/null; fi
        if check_command_exists screen; then screen -S ${SERVICE_NAME} -X quit &>/dev/null || true; fi
        killall -u "${MINER_USERNAME}" 2>/dev/null || true; userdel -r "${MINER_USERNAME}" 2>/dev/null || true
        echo -e "${GREEN}[+] 旧用户及相关进程/服务已清理。${RESET}"
    fi
    if [[ "$OS_ID" == "debian" || "$OS_ID" == "ubuntu" ]] && command -v adduser &>/dev/null; then adduser --disabled-password --gecos "" "${MINER_USERNAME}"; else useradd -m -s /bin/bash "${MINER_USERNAME}"; fi
    usermod -aG "${SUDO_GROUP}" "${MINER_USERNAME}"; echo -e "${GREEN}[✓] 用户创建成功并已配置 sudo 权限！${RESET}"

    echo -e "${BLUE}--- 步骤 2/5: 安装系统依赖 ---${RESET}"
    # ... (依赖安装逻辑不变) ...
    if [ "$PKG_MANAGER" == "unsupported" ]; then echo -e "${RED}错误: 未能识别您的包管理器。请手动安装所需依赖。${RESET}"; exit 1; fi
    echo -e "${CYAN}正在更新包列表...${RESET}"; eval "$UPDATE_CMD"
    echo -e "${CYAN}正在安装核心依赖 (包括 screen)...${RESET}"; eval "$INSTALL_CMD $DEP_PACKAGES"
    if [ -n "$GROUP_INSTALL_CMD" ]; then echo -e "${CYAN}正在安装开发工具集...${RESET}"; eval "$GROUP_INSTALL_CMD"; fi
    echo -e "${GREEN}[✓] 系统依赖安装完成。${RESET}"

    echo -e "${BLUE}--- 步骤 3/5 & 4/5: 克隆和编译 (以 '${MINER_USERNAME}' 用户身份) ---${RESET}"
    local b64_kernel; b64_kernel=$(echo -n "$HOON_KERNEL_CONTENT" | base64)
    local total_mem_kb; total_mem_kb=$(get_total_mem_kb)
    su - "${MINER_USERNAME}" -c bash <<EOF
    set -euo pipefail
    source "\$HOME/.cargo/env" || true
    if ! command -v cargo &>/dev/null; then
        echo "--- [${MINER_USERNAME}] 正在安装 Rust... ---"
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        source "\$HOME/.cargo/env"
    fi
    NCK_DIR_SUB="\$HOME/nockchain"; rm -rf "\$NCK_DIR_SUB"; git clone https://github.com/zorp-corp/nockchain "\$NCK_DIR_SUB"; cd "\$NCK_DIR_SUB"
    echo "--- [${MINER_USERNAME}] 正在注入增强版 v140 内核... ---"
    echo "$b64_kernel" | base64 -d > "\$NCK_DIR_SUB/pkg/hoon.hoon"
    echo "--- [${MINER_USERNAME}] 正在编译工具和主程序... ---"
    cargo build --release -p hoonc; mkdir -p assets
    "\$NCK_DIR_SUB/target/release/hoonc" pkg/miner.hoon > assets/miner.jam
    "\$NCK_DIR_SUB/target/release/hoonc" pkg/dumb.hoon > assets/dumb.jam
    "\$NCK_DIR_SUB/target/release/hoonc" pkg/wal.hoon > assets/wal.jam
    export RUSTFLAGS="-C target-cpu=native -C opt-level=3"; export CARGO_PROFILE_RELEASE_LTO="true"
    if [ "$total_mem_kb" -lt 2500000 ] && [ "$total_mem_kb" -ne 0 ]; then
        echo "--- [${MINER_USERNAME}] WARN: 内存较低，使用单核编译。 ---"; BUILD_JOBS=1
    else
        BUILD_JOBS=\$(nproc 2>/dev/null || echo 1); echo "--- [${MINER_USERNAME}] INFO: 使用 \${BUILD_JOBS} 核编译。 ---"
    fi
    cargo build --release --workspace --exclude hoonc -j"\${BUILD_JOBS}"
    cp "\$NCK_DIR_SUB/target/release/nockchain" "\$HOME/.cargo/bin/"
    echo "--- [${MINER_USERNAME}] 编译成功！ ---"
EOF
    if [ $? -ne 0 ]; then echo -e "\n${RED}安装失败！${RESET}"; else echo -e "\n${GREEN}[✓] Nockchain 安装成功！${RESET}"; fi
    pause_and_return
}

function set_pubkey() {
    show_banner; if [ ! -d "$NCK_DIR" ]; then echo -e "${RED}错误: Nockchain 尚未安装。${RESET}"; pause_and_return; return; fi
    local pubkey; read -r -p "请输入您的128位挖矿公钥: " pubkey
    if ! [[ "$pubkey" =~ ^[0-9a-fA-F]{128}$ ]]; then echo -e "\n${RED}错误: 公钥格式无效。${RESET}"; pause_and_return; return; fi
    touch "$ENV_FILE"; chown "${MINER_USERNAME}:${MINER_USERNAME}" "$ENV_FILE"
    sed -i '/^MINING_PUBKEY=/d' "$ENV_FILE"; sed -i '/^MINER_THREADS=/d' "$ENV_FILE"
    echo "MINING_PUBKEY=$pubkey" >> "$ENV_FILE"; echo "MINER_THREADS=$(get_num_cores_safe)" >> "$ENV_FILE"
    echo -e "\n${GREEN}[✓] 配置已成功保存！${RESET}"; pause_and_return
}

# --- 服务管理分派 ---
function start_node() { show_banner; if check_systemd; then start_node_systemd; else start_node_screen; fi; pause_and_return; }
function stop_node() { show_banner; if check_systemd; then stop_node_systemd; else stop_node_screen; fi; pause_and_return; }
function view_logs() { show_banner; if check_systemd; then view_logs_systemd; else view_logs_screen; fi; }

# --- Systemd 实现 ---
function start_node_systemd() {
    if [ ! -f "$ENV_FILE" ] || ! grep -q "MINING_PUBKEY" "$ENV_FILE"; then echo -e "${RED}错误: 尚未设置公钥。${RESET}"; return; fi
    echo -e "${YELLOW}[*] 正在使用 Systemd 启动服务...${RESET}"
    cat <<EOF > "$SERVICE_FILE"
[Unit]
Description=${SERVICE_NAME}; After=network-online.target
[Service]
User=${MINER_USERNAME}; Group=$(id -gn "${MINER_USERNAME}"); WorkingDirectory=${NCK_DIR}; EnvironmentFile=${ENV_FILE}
ExecStart=${MINER_HOME}/.cargo/bin/nockchain
Restart=on-failure; RestartSec=10; LimitNOFILE=65536; Nice=-5
[Install]
WantedBy=multi-user.target
EOF
    systemctl daemon-reload; systemctl enable "$SERVICE_NAME"; systemctl restart "$SERVICE_NAME"
    echo -e "\n${GREEN}[✓] Systemd 服务 '${SERVICE_NAME}' 已启动并设为开机自启！${RESET}"
}
function stop_node_systemd() {
    if ! systemctl list-units --full -all | grep -q "${SERVICE_NAME}.service"; then echo -e "${YELLOW}提示: 服务未安装。${RESET}"; return; fi
    echo -e "${YELLOW}[*] 正在停止 Systemd 服务...${RESET}"; systemctl stop "$SERVICE_NAME"
    echo -e "\n${GREEN}[✓] Systemd 服务 '${SERVICE_NAME}' 已停止。${RESET}"
}
function view_logs_systemd() {
    if ! systemctl list-units --full -all | grep -q "${SERVICE_NAME}.service"; then echo -e "${YELLOW}提示: 服务未安装。${RESET}"; pause_and_return; return; fi
    echo -e "${YELLOW}显示实时日志 (Systemd)... 按 Ctrl+C 退出。${RESET}"; echo "------------------------------------------------------"
    journalctl -u "$SERVICE_NAME" -f --no-pager; pause_and_return
}

# --- Screen (兼容模式) 实现 ---
function start_node_screen() {
    if ! check_command_exists screen; then echo -e "${RED}错误: 'screen' 未安装。请先运行安装程序。${RESET}"; return; fi
    if [ ! -f "$ENV_FILE" ] || ! grep -q "MINING_PUBKEY" "$ENV_FILE"; then echo -e "${RED}错误: 尚未设置公钥。${RESET}"; return; fi
    if screen -ls | grep -q "${SERVICE_NAME}"; then echo -e "${YELLOW}提示: 挖矿进程已在 Screen 中运行。${RESET}"; return; fi
    echo -e "${YELLOW}[*] 正在使用 Screen (兼容模式) 在后台启动挖矿...${RESET}"
    # 使用 su 在 miner 用户下启动 screen 会话
    su - "${MINER_USERNAME}" -c "screen -dmS ${SERVICE_NAME} bash -c 'cd ${NCK_DIR} && source ${ENV_FILE} && ${MINER_HOME}/.cargo/bin/nockchain'"
    echo -e "\n${GREEN}[✓] 挖矿已在名为 '${SERVICE_NAME}' 的 Screen 会话中启动！${RESET}"
    echo -e "${CYAN}提示: 此模式不会开机自启。您可以在服务器重启后手动运行此脚本来恢复挖矿。${RESET}"
}
function stop_node_screen() {
    if ! check_command_exists screen; then echo -e "${RED}错误: 'screen' 未安装。${RESET}"; return; fi
    if ! screen -ls | grep -q "${SERVICE_NAME}"; then echo -e "${YELLOW}提示: Screen 中没有正在运行的挖矿进程。${RESET}"; return; fi
    echo -e "${YELLOW}[*] 正在停止 Screen 会话...${RESET}"; screen -S "${SERVICE_NAME}" -X quit
    echo -e "\n${GREEN}[✓] Screen 会话 '${SERVICE_NAME}' 已停止。${RESET}"
}
function view_logs_screen() {
    if ! check_command_exists screen; then echo -e "${RED}错误: 'screen' 未安装。${RESET}"; pause_and_return; return; fi
    if ! screen -ls | grep -q "${SERVICE_NAME}"; then echo -e "${YELLOW}提示: Screen 中没有正在运行的挖矿进程。${RESET}"; pause_and_return; return; fi
    echo -e "${YELLOW}正在附加到 Screen 会话...${RESET}"; echo -e "${CYAN}要退出查看并返回菜单，请按组合键: Ctrl+A 然后按 D${RESET}"; echo "------------------------------------------------------"
    # 等待用户按键，否则 screen -r 会立即接管终端
    sleep 2
    screen -r "${SERVICE_NAME}"; pause_and_return
}

function main_menu() {
    while true; do
    show_banner
    echo -e "${BOLD}${GREEN}--- 主菜单 ---${RESET}"; echo "请选择要执行的操作:"; echo ""
    echo -e "  ${CYAN}1)${RESET} 全新安装 Nockchain (会清空旧数据)"
    echo -e "  ${CYAN}2)${RESET} 设置/更新挖矿公钥"
    echo ""
    if check_systemd; then
        if systemctl is-active --quiet "$SERVICE_NAME" &>/dev/null; then SERVICE_STATUS="${GREEN}(运行中)${RESET}"; else SERVICE_STATUS="${RED}(已停止)${RESET}"; fi
        echo -e "  ${CYAN}3)${RESET} ${BOLD}启动${RESET}挖矿 (Systemd) ${SERVICE_STATUS}"
        echo -e "  ${CYAN}4)${RESET} ${BOLD}停止${RESET}挖矿 (Systemd)"
        echo -e "  ${CYAN}5)${RESET} 查看实时日志 (Systemd)"
    elif check_command_exists screen; then
        if screen -ls | grep -q -w "${SERVICE_NAME}"; then SERVICE_STATUS="${GREEN}(运行中)${RESET}"; else SERVICE_STATUS="${RED}(已停止)${RESET}"; fi
        echo -e "  ${CYAN}3)${RESET} ${BOLD}启动${RESET}挖矿 (Screen) ${SERVICE_STATUS}"
        echo -e "  ${CYAN}4)${RESET} ${BOLD}停止${RESET}挖矿 (Screen)"
        echo -e "  ${CYAN}5)${RESET} 查看挖矿窗口 (Screen)"
    else
        echo -e "  ${RED}3-5) (不可用) 缺少 Systemd 或 Screen。请先运行安装程序。${RESET}"
    fi
    echo ""; echo -e "  ${YELLOW}0) 退出脚本${RESET}"; echo ""
    read -r -p "请输入选项编号: " choice
    case "$choice" in
        1) install_all ;; 2) set_pubkey ;; 3) start_node ;; 4) stop_node ;; 5) view_logs ;;
        0) echo -e "${BLUE}感谢使用！再见。${RESET}"; exit 0 ;;
        *) echo -e "${RED}无效选项，请重新输入。${RESET}"; sleep 1 ;;
    esac
    done
}

# --- 脚本入口 ---
detect_system_info
main_menu
