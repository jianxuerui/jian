#!/bin/bash

# ========= Nockchain 非Root用户专用构建脚本 v17.0 =========
RESET='\033[0m'
BOLD='\033[1m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
CYAN='\033[0;36m'
PURPLE='\033[0;35m'

NCK_DIR="$HOME/nockchain"
ENV_FILE="$NCK_DIR/.env"
LOG_FILE="$HOME/nockchain_build.log"
USER_SOFTWARE_DIR="$HOME/software"
USER_BIN_DIR="$USER_SOFTWARE_DIR/bin"
USER_LIB_DIR="$USER_SOFTWARE_DIR/lib"
USER_INCLUDE_DIR="$USER_SOFTWARE_DIR/include"

function show_banner() {
  clear
  echo -e "${BOLD}${CYAN}"
  echo "============================================================"
  echo "   Nockchain 非Root用户专用构建脚本 v17.0"
  echo "============================================================"
  echo -e "${RESET}"
  echo "🚫 无需sudo: 完全在用户空间安装所有依赖"
  echo "🏠 用户目录: 所有软件安装到 $USER_SOFTWARE_DIR"
  echo "📦 源码安装: 自动下载并编译GCC、Clang、LLVM等工具"
  echo "🔧 智能检测: 自动检测现有工具，避免重复安装"
  echo "🎯 专门解决: nockuser is not in sudoers 问题"
  echo "------------------------------------------------------------"
  echo ""
}

# ========= 检测用户权限和环境 =========
function check_user_permissions() {
  echo -e "[*] 检测用户权限和环境..."
  
  echo -e "${BLUE}[i] 当前用户: $(whoami)${RESET}"
  echo -e "${BLUE}[i] 用户主目录: $HOME${RESET}"
  
  # 检测是否有sudo权限
  if sudo -n true 2>/dev/null; then
    echo -e "${GREEN}[+] 用户有sudo权限${RESET}"
    HAS_SUDO=true
  else
    echo -e "${YELLOW}[!] 用户无sudo权限，将使用源码安装方式${RESET}"
    HAS_SUDO=false
  fi
  
  # 创建用户软件目录结构[1]
  echo -e "[*] 创建用户软件目录结构..."
  mkdir -p "$USER_SOFTWARE_DIR"/{bin,lib,lib64,include,share,src,build}
  
  # 设置基础环境变量
  export PATH="$USER_BIN_DIR:$PATH"
  export LD_LIBRARY_PATH="$USER_LIB_DIR:$USER_SOFTWARE_DIR/lib64:$LD_LIBRARY_PATH"
  export PKG_CONFIG_PATH="$USER_LIB_DIR/pkgconfig:$USER_SOFTWARE_DIR/lib64/pkgconfig:$PKG_CONFIG_PATH"
  export C_INCLUDE_PATH="$USER_INCLUDE_DIR:$C_INCLUDE_PATH"
  export CPLUS_INCLUDE_PATH="$USER_INCLUDE_DIR:$CPLUS_INCLUDE_PATH"
  
  echo -e "${GREEN}[+] 用户环境准备完成${RESET}"
}

# ========= 无sudo权限安装基础工具 =========
function install_basic_tools_no_sudo() {
  echo -e "[*] 无sudo权限安装基础工具..."
  
  cd "$USER_SOFTWARE_DIR/src"
  
  # 安装wget（如果没有）
  if ! command -v wget >/dev/null 2>&1; then
    echo -e "[*] 安装wget..."
    curl -L https://ftp.gnu.org/gnu/wget/wget-1.21.3.tar.gz -o wget-1.21.3.tar.gz
    tar -xzf wget-1.21.3.tar.gz
    cd wget-1.21.3
    ./configure --prefix="$USER_SOFTWARE_DIR" --without-ssl
    make -j$(nproc) && make install
    cd ..
  fi
  
  # 安装tar（如果版本太老）
  if ! tar --version | grep -q "1.3[0-9]"; then
    echo -e "[*] 安装新版tar..."
    wget -q https://ftp.gnu.org/gnu/tar/tar-1.34.tar.xz
    tar -xf tar-1.34.tar.xz
    cd tar-1.34
    ./configure --prefix="$USER_SOFTWARE_DIR"
    make -j$(nproc) && make install
    cd ..
  fi
  
  export PATH="$USER_BIN_DIR:$PATH"
  echo -e "${GREEN}[+] 基础工具安装完成${RESET}"
}

# ========= 源码安装GCC（无sudo权限）=========
function install_gcc_from_source() {
  echo -e "[*] 源码安装GCC（无sudo权限）..."
  
  cd "$USER_SOFTWARE_DIR/src"
  
  # 检查是否已有可用的GCC
  if command -v gcc >/dev/null 2>&1; then
    gcc_version=$(gcc --version | head -1 | grep -o '[0-9]\+\.[0-9]\+' | head -1)
    if [ "$(echo "$gcc_version >= 7.0" | bc 2>/dev/null || echo 0)" = "1" ]; then
      echo -e "${GREEN}[+] 已有GCC $gcc_version，跳过安装${RESET}"
      return 0
    fi
  fi
  
  echo -e "[*] 下载GCC 9.5.0源码..."[2][4][9]
  if [ ! -f "gcc-9.5.0.tar.gz" ]; then
    wget -q https://ftp.gnu.org/gnu/gcc/gcc-9.5.0/gcc-9.5.0.tar.gz || {
      echo -e "${RED}[-] GCC下载失败${RESET}"
      return 1
    }
  fi
  
  echo -e "[*] 解压GCC源码..."
  tar -xzf gcc-9.5.0.tar.gz
  cd gcc-9.5.0
  
  echo -e "[*] 下载GCC依赖库..."[9]
  # 手动下载依赖，因为可能无法联网或脚本失败
  mkdir -p gmp mpfr mpc isl
  
  # 下载GMP
  if [ ! -d "gmp-6.2.1" ]; then
    wget -q https://gmplib.org/download/gmp/gmp-6.2.1.tar.bz2
    tar -xjf gmp-6.2.1.tar.bz2
    ln -sf gmp-6.2.1 gmp
  fi
  
  # 下载MPFR
  if [ ! -d "mpfr-4.1.0" ]; then
    wget -q https://www.mpfr.org/mpfr-current/mpfr-4.1.0.tar.bz2
    tar -xjf mpfr-4.1.0.tar.bz2
    ln -sf mpfr-4.1.0 mpfr
  fi
  
  # 下载MPC
  if [ ! -d "mpc-1.2.1" ]; then
    wget -q https://ftp.gnu.org/gnu/mpc/mpc-1.2.1.tar.gz
    tar -xzf mpc-1.2.1.tar.gz
    ln -sf mpc-1.2.1 mpc
  fi
  
  # 下载ISL
  if [ ! -d "isl-0.24" ]; then
    wget -q https://gcc.gnu.org/pub/gcc/infrastructure/isl-0.24.tar.bz2
    tar -xjf isl-0.24.tar.bz2
    ln -sf isl-0.24 isl
  fi
  
  echo -e "[*] 配置GCC构建..."[2][4]
  mkdir -p "$USER_SOFTWARE_DIR/build/gcc-build"
  cd "$USER_SOFTWARE_DIR/build/gcc-build"
  
  # 配置GCC安装到用户目录
  ../../src/gcc-9.5.0/configure \
    --prefix="$USER_SOFTWARE_DIR" \
    --disable-checking \
    --enable-languages=c,c++ \
    --disable-multilib \
    --enable-threads=posix \
    --disable-libstdcxx-pch \
    --enable-linker-build-id \
    --enable-plugin \
    --enable-gold \
    --with-system-zlib 2>>"$LOG_FILE"
  
  echo -e "[*] 编译GCC（这将需要很长时间，请耐心等待）..."
  make -j$(nproc) 2>>"$LOG_FILE" || {
    echo -e "${YELLOW}[!] 并行编译失败，尝试单线程编译...${RESET}"
    make -j1 2>>"$LOG_FILE"
  }
  
  echo -e "[*] 安装GCC..."
  make install 2>>"$LOG_FILE"
  
  # 更新环境变量[9]
  export PATH="$USER_BIN_DIR:$PATH"
  export LD_LIBRARY_PATH="$USER_LIB_DIR:$USER_SOFTWARE_DIR/lib64:$LD_LIBRARY_PATH"
  
  echo -e "${GREEN}[+] GCC安装完成${RESET}"
  echo -e "${GREEN}[+] GCC版本: $(gcc --version | head -1)${RESET}"
}

# ========= 源码安装LLVM/Clang（无sudo权限）=========
function install_llvm_from_source() {
  echo -e "[*] 源码安装LLVM/Clang（无sudo权限）..."
  
  cd "$USER_SOFTWARE_DIR/src"
  
  # 检查是否已有Clang
  if command -v clang >/dev/null 2>&1; then
    clang_version=$(clang --version | head -1 | grep -o '[0-9]\+\.[0-9]\+' | head -1)
    if [ "$(echo "$clang_version >= 12.0" | bc 2>/dev/null || echo 0)" = "1" ]; then
      echo -e "${GREEN}[+] 已有Clang $clang_version，跳过安装${RESET}"
      export CC=clang
      export CXX=clang++
      return 0
    fi
  fi
  
  echo -e "[*] 下载LLVM 14.0.6源码..."
  if [ ! -f "llvm-14.0.6.src.tar.xz" ]; then
    wget -q https://github.com/llvm/llvm-project/releases/download/llvmorg-14.0.6/llvm-14.0.6.src.tar.xz
    wget -q https://github.com/llvm/llvm-project/releases/download/llvmorg-14.0.6/clang-14.0.6.src.tar.xz
  fi
  
  echo -e "[*] 解压LLVM源码..."
  tar -xf llvm-14.0.6.src.tar.xz
  tar -xf clang-14.0.6.src.tar.xz
  
  # 移动clang到正确位置
  mv clang-14.0.6.src llvm-14.0.6.src/tools/clang
  
  echo -e "[*] 配置LLVM构建..."
  mkdir -p "$USER_SOFTWARE_DIR/build/llvm-build"
  cd "$USER_SOFTWARE_DIR/build/llvm-build"
  
  # 使用cmake配置（如果有的话），否则使用configure
  if command -v cmake >/dev/null 2>&1; then
    cmake -DCMAKE_INSTALL_PREFIX="$USER_SOFTWARE_DIR" \
          -DCMAKE_BUILD_TYPE=Release \
          -DLLVM_ENABLE_PROJECTS="clang" \
          -DLLVM_TARGETS_TO_BUILD="X86" \
          ../../src/llvm-14.0.6.src
  else
    echo -e "${YELLOW}[!] 需要cmake，尝试安装cmake...${RESET}"
    install_cmake_from_source
    cmake -DCMAKE_INSTALL_PREFIX="$USER_SOFTWARE_DIR" \
          -DCMAKE_BUILD_TYPE=Release \
          -DLLVM_ENABLE_PROJECTS="clang" \
          -DLLVM_TARGETS_TO_BUILD="X86" \
          ../../src/llvm-14.0.6.src
  fi
  
  echo -e "[*] 编译LLVM/Clang（这将需要很长时间）..."
  make -j$(( $(nproc) / 2 )) 2>>"$LOG_FILE" || {
    echo -e "${YELLOW}[!] 并行编译失败，尝试单线程编译...${RESET}"
    make -j1 2>>"$LOG_FILE"
  }
  
  echo -e "[*] 安装LLVM/Clang..."
  make install 2>>"$LOG_FILE"
  
  # 设置环境变量
  export PATH="$USER_BIN_DIR:$PATH"
  export CC=clang
  export CXX=clang++
  export LIBCLANG_PATH="$USER_LIB_DIR"
  
  echo -e "${GREEN}[+] LLVM/Clang安装完成${RESET}"
}

# ========= 安装cmake（如果需要）=========
function install_cmake_from_source() {
  echo -e "[*] 源码安装CMake..."
  
  cd "$USER_SOFTWARE_DIR/src"
  
  if [ ! -f "cmake-3.25.2.tar.gz" ]; then
    wget -q https://github.com/Kitware/CMake/releases/download/v3.25.2/cmake-3.25.2.tar.gz
  fi
  
  tar -xzf cmake-3.25.2.tar.gz
  cd cmake-3.25.2
  
  ./configure --prefix="$USER_SOFTWARE_DIR"
  make -j$(nproc) && make install
  
  export PATH="$USER_BIN_DIR:$PATH"
  echo -e "${GREEN}[+] CMake安装完成${RESET}"
}

# ========= 安装其他必要工具 =========
function install_other_tools_no_sudo() {
  echo -e "[*] 安装其他必要工具（无sudo权限）..."
  
  cd "$USER_SOFTWARE_DIR/src"
  
  # 安装pkg-config
  if ! command -v pkg-config >/dev/null 2>&1; then
    echo -e "[*] 安装pkg-config..."
    wget -q https://pkgconfig.freedesktop.org/releases/pkg-config-0.29.2.tar.gz
    tar -xzf pkg-config-0.29.2.tar.gz
    cd pkg-config-0.29.2
    ./configure --prefix="$USER_SOFTWARE_DIR" --with-internal-glib
    make -j$(nproc) && make install
    cd ..
  fi
  
  # 安装make（如果版本太老）
  if ! make --version | grep -q "GNU Make 4"; then
    echo -e "[*] 安装GNU Make 4.3..."
    wget -q https://ftp.gnu.org/gnu/make/make-4.3.tar.gz
    tar -xzf make-4.3.tar.gz
    cd make-4.3
    ./configure --prefix="$USER_SOFTWARE_DIR"
    make -j$(nproc) && make install
    cd ..
  fi
  
  # 安装git（如果没有）
  if ! command -v git >/dev/null 2>&1; then
    echo -e "[*] 安装Git..."
    wget -q https://github.com/git/git/archive/v2.40.0.tar.gz -O git-2.40.0.tar.gz
    tar -xzf git-2.40.0.tar.gz
    cd git-2.40.0
    make configure
    ./configure --prefix="$USER_SOFTWARE_DIR"
    make -j$(nproc) && make install
    cd ..
  fi
  
  export PATH="$USER_BIN_DIR:$PATH"
  echo -e "${GREEN}[+] 其他工具安装完成${RESET}"
}

# ========= 设置永久环境变量 =========
function setup_permanent_environment() {
  echo -e "[*] 设置永久环境变量..."
  
  # 创建环境变量配置文件[1][9]
  cat > "$HOME/.nockchain_env" << EOF
#!/bin/bash
# Nockchain用户编译环境变量
export PATH="$USER_BIN_DIR:\$PATH"
export LD_LIBRARY_PATH="$USER_LIB_DIR:$USER_SOFTWARE_DIR/lib64:\$LD_LIBRARY_PATH"
export PKG_CONFIG_PATH="$USER_LIB_DIR/pkgconfig:$USER_SOFTWARE_DIR/lib64/pkgconfig:\$PKG_CONFIG_PATH"
export C_INCLUDE_PATH="$USER_INCLUDE_DIR:\$C_INCLUDE_PATH"
export CPLUS_INCLUDE_PATH="$USER_INCLUDE_DIR:\$CPLUS_INCLUDE_PATH"
export CC=clang
export CXX=clang++
export LIBCLANG_PATH="$USER_LIB_DIR"
export LLVM_CONFIG_PATH="$USER_BIN_DIR/llvm-config"
export CARGO_BUILD_JOBS=1
export RUSTFLAGS="-C opt-level=1 -C debuginfo=0 -C panic=abort"
EOF
  
  # 添加到bashrc[1]
  if ! grep -q "source.*nockchain_env" "$HOME/.bashrc" 2>/dev/null; then
    echo "# Nockchain编译环境" >> "$HOME/.bashrc"
    echo "source \$HOME/.nockchain_env" >> "$HOME/.bashrc"
  fi
  
  # 立即加载环境变量
  source "$HOME/.nockchain_env"
  
  echo -e "${GREEN}[+] 环境变量设置完成${RESET}"
  echo -e "${BLUE}[i] 重新登录后环境变量将自动生效${RESET}"
}

# ========= 安装Rust（用户模式）=========
function install_rust_user_mode() {
  echo -e "[*] 安装Rust（用户模式）..."
  
  if ! command -v rustc >/dev/null 2>&1; then
    echo -e "[*] 下载并安装Rust..."
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
  else
    echo -e "[*] 更新现有Rust..."
    rustup update stable 2>/dev/null || true
  fi
  
  source "$HOME/.cargo/env"
  export PATH="$HOME/.cargo/bin:$PATH"
  
  # 优化Cargo配置
  mkdir -p "$HOME/.cargo"
  cat > "$HOME/.cargo/config.toml" << 'EOF'
[build]
jobs = 1

[net]
retry = 100
timeout = 3600
git-fetch-with-cli = true

[profile.release]
opt-level = 1
debug = false
debug-assertions = false
overflow-checks = false
lto = "off"
panic = "abort"
incremental = false
codegen-units = 1
strip = true

[profile.dev]
opt-level = 0
debug = false
debug-assertions = false
overflow-checks = false
incremental = false
codegen-units = 1
strip = true
EOF
  
  echo -e "${GREEN}[+] Rust安装完成${RESET}"
  echo -e "${GREEN}[+] Rust版本: $(rustc --version)${RESET}"
}

# ========= 验证工具安装 =========
function verify_tools_installation() {
  echo -e "[*] 验证工具安装..."
  
  # 加载环境变量
  source "$HOME/.nockchain_env" 2>/dev/null || true
  
  echo -e "${BLUE}[i] 验证关键工具:${RESET}"
  tools_success=0
  total_tools=7
  
  for tool in gcc g++ clang make cmake pkg-config git; do
    if command -v "$tool" >/dev/null 2>&1; then
      tool_version=$(eval "$tool --version 2>/dev/null | head -1" || echo "unknown")
      echo -e "${GREEN}  ✓ $tool: $tool_version${RESET}"
      ((tools_success++))
    else
      echo -e "${RED}  ✗ $tool: 未找到${RESET}"
    fi
  done
  
  echo -e "${BLUE}[i] 工具可用性: $tools_success/$total_tools${RESET}"
  
  if [ $tools_success -ge 5 ]; then
    echo -e "${GREEN}[+] 基础工具验证通过${RESET}"
    return 0
  else
    echo -e "${RED}[-] 工具验证失败${RESET}"
    return 1
  fi
}

# ========= 完整的无sudo权限安装流程 =========
function complete_installation_no_sudo() {
  echo -e "[*] 开始Nockchain无sudo权限完整安装..."
  
  echo "=== Nockchain非Root用户安装日志 $(date) ===" > "$LOG_FILE"
  
  echo -e "${BLUE}[i] 步骤1/8: 检测用户权限...${RESET}"
  check_user_permissions
  
  echo -e "${BLUE}[i] 步骤2/8: 安装基础工具...${RESET}"
  install_basic_tools_no_sudo
  
  echo -e "${BLUE}[i] 步骤3/8: 源码安装GCC...${RESET}"
  if ! install_gcc_from_source; then
    echo -e "${YELLOW}[!] GCC安装失败，尝试使用系统GCC${RESET}"
  fi
  
  echo -e "${BLUE}[i] 步骤4/8: 源码安装LLVM/Clang...${RESET}"
  if ! install_llvm_from_source; then
    echo -e "${YELLOW}[!] LLVM/Clang安装失败，尝试使用系统版本${RESET}"
  fi
  
  echo -e "${BLUE}[i] 步骤5/8: 安装其他工具...${RESET}"
  install_other_tools_no_sudo
  
  echo -e "${BLUE}[i] 步骤6/8: 设置环境变量...${RESET}"
  setup_permanent_environment
  
  echo -e "${BLUE}[i] 步骤7/8: 安装Rust...${RESET}"
  install_rust_user_mode
  
  echo -e "${BLUE}[i] 步骤8/8: 验证工具安装...${RESET}"
  if verify_tools_installation; then
    echo -e "${GREEN}[+] ✅ 无sudo权限安装完成！${RESET}"
    echo -e "${BLUE}[i] 下一步: 克隆和构建Nockchain项目${RESET}"
  else
    echo -e "${YELLOW}[!] 部分工具安装失败，但可尝试继续构建${RESET}"
  fi
  
  echo -e "${BLUE}[i] 详细日志: $LOG_FILE${RESET}"
  pause_and_return
}

# ========= 构建Nockchain项目 =========
function build_nockchain_no_sudo() {
  echo -e "[*] 构建Nockchain项目（无sudo权限）..."
  
  # 加载环境变量
  source "$HOME/.nockchain_env" 2>/dev/null || true
  source "$HOME/.cargo/env" 2>/dev/null || true
  
  # 克隆或准备项目
  if [ ! -d "$NCK_DIR" ]; then
    echo -e "[*] 克隆Nockchain项目..."
    git clone --depth 1 https://github.com/zorp-corp/nockchain "$NCK_DIR" || {
      echo -e "${RED}[-] 项目克隆失败${RESET}"
      pause_and_return
      return
    }
  fi
  
  cd "$NCK_DIR"
  
  # 清理并准备构建
  cargo clean >/dev/null 2>&1 || true
  rm -rf target/ 2>/dev/null || true
  
  # 创建配置文件
  if [ -f ".env_example" ]; then
    cp .env_example .env
  else
    cat > .env << 'EOF'
MINING_PUBKEY=
RUST_LOG=info
EOF
  fi
  
  # 创建必要目录
  mkdir -p assets .socket test-leader logs
  touch assets/wal.jam assets/dumb.jam assets/miner.jam 2>/dev/null || true
  
  echo -e "[*] 开始构建Nockchain组件..."
  
  # 构建hoonc
  echo -e "[*] 构建hoonc编译器..."
  if timeout 7200 make install-hoonc >>"$LOG_FILE" 2>&1; then
    echo -e "${GREEN}[+] hoonc构建成功${RESET}"
  else
    echo -e "${YELLOW}[!] hoonc构建失败，查看日志了解详情${RESET}"
  fi
  
  # 构建主项目
  echo -e "[*] 构建主项目..."
  if timeout 9000 make build >>"$LOG_FILE" 2>&1; then
    echo -e "${GREEN}[+] 主项目构建成功${RESET}"
  else
    echo -e "${YELLOW}[!] 主项目构建失败，尝试单独构建组件...${RESET}"
    for component in "nockchain-wallet" "nockchain"; do
      echo -e "[*] 构建 $component..."
      timeout 7200 cargo build --bin "$component" --release >>"$LOG_FILE" 2>&1 || true
    done
  fi
  
  # 验证构建结果
  echo -e "[*] 验证构建结果..."
  component_count=0
  for binary in "hoonc" "nockchain-wallet" "nockchain"; do
    if command -v "$binary" >/dev/null 2>&1 || [ -f "target/release/$binary" ]; then
      echo -e "${GREEN}  ✓ $binary: 构建成功${RESET}"
      ((component_count++))
    else
      echo -e "${RED}  ✗ $binary: 构建失败${RESET}"
    fi
  done
  
  echo -e "${BLUE}[i] 构建成功: $component_count/3 个组件${RESET}"
  
  if [ $component_count -ge 2 ]; then
    echo -e "${GREEN}[+] ✅ Nockchain构建基本成功！${RESET}"
  else
    echo -e "${YELLOW}[!] 构建部分失败，请查看日志${RESET}"
  fi
  
  pause_and_return
}

# ========= 其他管理功能 =========
function generate_wallet_no_sudo() {
  echo -e "[*] 生成钱包..."
  
  cd "$NCK_DIR" || return
  source "$HOME/.cargo/env" 2>/dev/null || true
  source "$HOME/.nockchain_env" 2>/dev/null || true
  
  if command -v nockchain-wallet >/dev/null 2>&1; then
    nockchain-wallet keygen
  elif [ -f "target/release/nockchain-wallet" ]; then
    ./target/release/nockchain-wallet keygen
  else
    echo -e "${RED}[-] 未找到nockchain-wallet程序${RESET}"
  fi
  
  pause_and_return
}

function set_mining_pubkey_no_sudo() {
  echo -e "[*] 设置挖矿公钥..."
  
  cd "$NCK_DIR" || return
  
  read -p "请输入完整的挖矿公钥: " pubkey
  
  if [ ${#pubkey} -eq 128 ] && [[ "$pubkey" =~ ^[0-9a-f]{128}$ ]]; then
    sed -i '/^MINING_PUBKEY=/d' "$ENV_FILE" 2>/dev/null || true
    echo "MINING_PUBKEY=$pubkey" >> "$ENV_FILE"
    echo -e "${GREEN}[+] 公钥已成功写入.env文件${RESET}"
  else
    echo -e "${RED}[-] 公钥格式错误，需要128位16进制${RESET}"
  fi
  
  pause_and_return
}

function start_node_no_sudo() {
  echo -e "[*] 启动节点..."
  
  cd "$NCK_DIR" || return
  source "$HOME/.cargo/env" 2>/dev/null || true
  source "$HOME/.nockchain_env" 2>/dev/null || true
  
  if [ ! -f "$ENV_FILE" ] || [ -z "$(grep MINING_PUBKEY "$ENV_FILE" | cut -d'=' -f2)" ]; then
    echo -e "${RED}[-] 请先设置挖矿公钥${RESET}"
    pause_and_return
    return
  fi
  
  source "$ENV_FILE"
  
  # 清理旧进程和socket
  pkill -f nockchain 2>/dev/null || true
  find . -name "*.sock" -delete 2>/dev/null || true
  mkdir -p .socket test-leader
  
  # 启动节点
  start_cmd="RUST_LOG=info nockchain --mining-pubkey $MINING_PUBKEY \
--mine \
--peer /ip4/95.216.102.60/udp/3006/quic-v1 \
--peer /ip4/65.109.156.108/udp/3006/quic-v1 \
--peer /ip4/65.21.67.175/udp/3006/quic-v1 \
--peer /ip4/65.109.156.172/udp/3006/quic-v1 \
--peer /ip4/34.174.22.166/udp/3006/quic-v1 \
--npc-socket .socket/nockchain.sock \
--bind /ip4/0.0.0.0/udp/3006/quic-v1"
  
  if command -v screen >/dev/null 2>&1; then
    screen -dmS nockchain bash -c "cd '$NCK_DIR' && $start_cmd"
    echo -e "${GREEN}[+] 节点已启动（screen会话）${RESET}"
  else
    nohup bash -c "$start_cmd" > nockchain.log 2>&1 &
    echo -e "${GREEN}[+] 节点已后台启动${RESET}"
  fi
  
  pause_and_return
}

function check_status_no_sudo() {
  echo -e "[*] 检查状态..."
  
  source "$HOME/.nockchain_env" 2>/dev/null || true
  
  echo -e "${BLUE}[i] 环境状态:${RESET}"
  echo -e "  软件目录: $USER_SOFTWARE_DIR"
  echo -e "  PATH: $(echo $PATH | tr ':' '\n' | grep $USER_BIN_DIR | head -1 || echo '未设置')"
  
  echo -e "${BLUE}[i] 工具状态:${RESET}"
  for tool in gcc g++ clang make cmake pkg-config git rustc cargo; do
    if command -v "$tool" >/dev/null 2>&1; then
      echo -e "  ✓ $tool"
    else
      echo -e "  ✗ $tool"
    fi
  done
  
  echo -e "${BLUE}[i] Nockchain组件:${RESET}"
  if [ -d "$NCK_DIR" ]; then
    cd "$NCK_DIR"
    for binary in "hoonc" "nockchain-wallet" "nockchain"; do
      if command -v "$binary" >/dev/null 2>&1 || [ -f "target/release/$binary" ]; then
        echo -e "  ✓ $binary"
      else
        echo -e "  ✗ $binary"
      fi
    done
  else
    echo -e "  ✗ 项目目录不存在"
  fi
  
  pause_and_return
}

function pause_and_return() {
  echo ""
  read -n1 -r -p "按任意键返回主菜单..." key
  main_menu
}

# ========= 主菜单 =========
function main_menu() {
  show_banner
  echo "请选择操作:"
  echo ""
  echo "🔧 环境准备:"
  echo "  1) 🔧 完整环境安装（无sudo权限）"
  echo "  2) 🎯 构建Nockchain项目"
  echo ""
  echo "🔑 钱包管理:"
  echo "  3) 🔑 生成钱包"
  echo "  4) 📝 设置挖矿公钥"
  echo ""
  echo "⚡ 节点管理:"
  echo "  5) ⚡ 启动节点"
  echo "  6) 🔍 检查状态"
  echo ""
  echo "  0) 退出脚本"
  echo ""
  echo -e "${CYAN}🎯 专门解决: nockuser is not in sudoers 问题${RESET}"
  echo -e "${CYAN}💡 所有依赖安装到用户目录: $USER_SOFTWARE_DIR${RESET}"[11][12][13][14]
  echo ""
  read -p "请输入编号 (0-6): " choice

  case "$choice" in
    1) complete_installation_no_sudo ;;
    2) build_nockchain_no_sudo ;;
    3) generate_wallet_no_sudo ;;
    4) set_mining_pubkey_no_sudo ;;
    5) start_node_no_sudo ;;
    6) check_status_no_sudo ;;
    0) echo "退出脚本."; exit 0 ;;
    *) echo -e "${RED}[-] 无效选项${RESET}"; pause_and_return ;;
  esac
}

# 检查是否以root运行
if [ "$EUID" -eq 0 ]; then
  echo -e "${RED}[-] 请不要以root用户运行此脚本${RESET}"
  exit 1
fi

# 启动主菜单
main_menu
