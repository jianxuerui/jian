#!/bin/bash
# Nockchain Ecosystem Orchestrator v5.0 "Titan"
#
# Changelog:
# v5.0: Epic enhancement. Modular installation, external config file, true AI co-pilot via Prometheus API,
#       full lifecycle management (backup/restore, upgrade, uninstall), security hardening module (Fail2ban),
#       and superior UX with spinners and structured logging.
#
set -euo pipefail

# --- SCRIPT METADATA ---
SCRIPT_VERSION="5.0"
SCRIPT_REMOTE_VERSION_URL="https://kgithub.com/YourUser/YourRepo/raw/main/VERSION" # Example URL

# --- CONFIGURATION & LOGGING ---
CONFIG_FILE="/etc/nockchain/nockchain.conf"
LOG_FILE="/var/log/nockchain-orchestrator.log"
ERROR_LOG="/var/log/nockchain-error.log"

# Redirect stdout/stderr to a log file and the console
exec > >(tee -a "$LOG_FILE") 2> >(tee -a "$ERROR_LOG" >&2)

declare -A CONFIG

# --- UTILITY FUNCTIONS ---
green='\e[32m'; blue='\e[34m'; red='\e[31m'; yellow='\e[33m'; reset='\e[0m'
ColorGreen(){ echo -ne "${green}$1${reset}"; }
ColorBlue() { echo -ne "${blue}$1${reset}"; }
ColorRed()  { echo -ne "${red}$1${reset}"; }
ColorYellow(){ echo -ne "${yellow}$1${reset}"; }

log_info() { echo -e "[$(date '+%F %T')] $(ColorGreen '[INFO]') $1"; }
log_warn() { echo -e "[$(date '+%F %T')] $(ColorYellow '[WARN]') $1"; }
log_error() { echo -e "[$(date '+%F %T')] $(ColorRed '[ERROR]') $1" >&2; }

handle_error() {
    local exit_code=$1 line_no=$2
    log_error "Fatal error on line $line_no with exit code $exit_code."
    ColorRed "\nDeployment failed! Check logs: $LOG_FILE and $ERROR_LOG\n" >&2
    exit "$exit_code"
}
trap 'handle_error $? $LINENO' ERR

spinner() {
    local pid=$1
    local delay=0.1
    local spinstr='|/-\'
    while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
        local temp=${spinstr#?}
        printf " [%c]  " "$spinstr"
        local spinstr=$temp${spinstr%"$temp"}
        sleep $delay
        printf "\b\b\b\b\b\b"
    done
    printf "    \b\b\b\b"
}

run_with_spinner() {
    local cmd="$1"
    local msg="$2"
    echo -ne "$msg"
    ($cmd) &> /dev/null &
    spinner $!
    echo -e "$(ColorGreen 'Done.')"
}

# --- CONFIGURATION MANAGEMENT ---
load_or_create_config() {
    log_info "Loading configuration from $CONFIG_FILE..."
    if [ ! -f "$CONFIG_FILE" ]; {
        log_warn "Configuration file not found. Creating a default one."
        sudo mkdir -p /etc/nockchain
        sudo tee "$CONFIG_FILE" >/dev/null <<'EOF'
# Nockchain Orchestrator Configuration
# This file is automatically loaded by the script.

# -- 系统用户与路径 --
USER="nockchain"
RUSTUP_HOME="/opt/rustup"
CARGO_HOME="/opt/cargo"
SOURCE_DIR="/opt/nockchain_src" # Changed to avoid conflict with install path
DATA_DIR="/var/lib/nockchain"
BACKUP_DIR="/var/backups/nockchain"

# -- 网络端口 --
P2P_PORT="30303"
RPC_PORT="9933"
METRICS_PORT="9615"
GRAFANA_PORT="3000"

# -- Git 仓库地址 (使用镜像) --
HOON_REPO_URL="https://kgithub.com/urbit/hoon.git"
HOON_TAG="hoon-v1.0"
NOCKCHAIN_REPO_URL="https://kgithub.com/zorp-corp/nockchain.git"
NOCKCHAIN_BRANCH="main"

# -- 其他 --
# 设置为 1 跳过 CPU SSE4.2/AVX2 检查
SKIP_CPU_CHECK=0
EOF
        sudo chmod 644 "$CONFIG_FILE"
    }

    # Read config file into the CONFIG associative array
    while IFS='=' read -r key value; do
        # Remove quotes and trim whitespace
        value=$(echo "$value" | sed -e 's/^["]*//' -e 's/["]*$//' -e 's/^[ \t]*//;s/[ \t]*$//')
        if [[ ! "$key" =~ ^# && "$key" ]]; then
            CONFIG["$key"]="$value"
        fi
    done < "$CONFIG_FILE"

    # Environment setup
    export RUSTUP_HOME="${CONFIG[RUSTUP_HOME]}"
    export CARGO_HOME="${CONFIG[CARGO_HOME]}"
    export PATH="${CONFIG[CARGO_HOME]}/bin:${RUSTUP_HOME}/bin:$PATH"
}

# --- INSTALLATION MODULES ---
install_dependencies() {
    log_info "Installing system dependencies..."
    if command -v dnf &>/dev/null; then
        sudo dnf install -y epel-release
        sudo dnf config-manager --set-enabled powertools || sudo dnf config-manager --set-enabled crb
        sudo dnf install -y gcc-toolset-11 clang llvm-devel cmake openssl-devel pkgconfig \
            libuuid-devel git screen htop chrony jq python3-devel curl firewalld tor unzip fail2ban
    elif command -v apt-get &>/dev/null; then
        sudo apt-get update
        sudo apt-get install -y build-essential clang llvm-dev cmake libssl-dev pkg-config \
            uuid-dev git screen htop ntpdate jq python3-venv curl ufw tor unzip fail2ban
    else
        log_error "Unsupported package manager." && exit 1
    fi
    log_info "Dependencies installed successfully."
}

install_rust_toolchain() {
    if ! command -v cargo &>/dev/null; then
        log_info "Installing Rust toolchain..."
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable \
            --profile default --no-modify-path
        # Source the env to make cargo available in the current session
        source "${CONFIG[CARGO_HOME]}/env"
        log_info "Rust installed."
    else
        log_info "Rust is already installed. Updating..."
        rustup update
    fi
}

install_hoonc() {
    log_info "Building Hoon Compiler (hoonc)..."
    if [ -f /usr/local/bin/hoonc ]; then log_info "Hoonc already installed."; return; fi
    
    local tmp_dir="/tmp/hoon"
    run_with_spinner "git clone ${CONFIG[HOON_REPO_URL]} $tmp_dir" "Cloning Hoon repository..."
    
    pushd "$tmp_dir" >/dev/null
      git checkout "tags/${CONFIG[HOON_TAG]}"
      run_with_spinner "make HOON_ARCH=\"$(uname -m)-linux\" && sudo make install" "Compiling and installing hoonc..."
    popd >/dev/null
    sudo rm -rf "$tmp_dir"
}

install_nockchain_node() {
    local node_type=$1
    log_info "Building Nockchain Suite (type: $node_type)..."

    sudo rm -rf "${CONFIG[SOURCE_DIR]}"
    run_with_spinner "git clone ${CONFIG[NOCKCHAIN_REPO_URL]} ${CONFIG[SOURCE_DIR]}" "Cloning Nockchain repository..."
    
    pushd "${CONFIG[SOURCE_DIR]}" >/dev/null
      git checkout "${CONFIG[NOCKCHAIN_BRANCH]}"
      if command -v dnf &>/dev/null && [ -f /opt/rh/gcc-toolset-11/enable ]; then
          source /opt/rh/gcc-toolset-11/enable
      fi
      local build_features="zkpow,metrics"
      [[ "$node_type" == "validator" ]] && build_features+=",staking"
      
      run_with_spinner "cargo build --release --features '$build_features'" "Compiling Nockchain binaries (this may take a long time)..."
      
      sudo cp target/release/nockchain /usr/local/bin/
      sudo cp target/release/nockchain-cli /usr/local/bin/
      sudo cp target/release/nockchain-wallet /usr/local/bin/
    popd >/dev/null
    sudo rm -rf "${CONFIG[SOURCE_DIR]}"
    log_info "Nockchain suite installed."
}

setup_system_user_and_env() {
    log_info "Setting up system user and environment..."
    id "${CONFIG[USER]}" &>/dev/null || sudo useradd --system --shell /usr/sbin/nologin --home-dir "${CONFIG[DATA_DIR]}" "${CONFIG[USER]}"
    sudo mkdir -p "${CONFIG[DATA_DIR]}/wallet" "${CONFIG[BACKUP_DIR]}"
    sudo chown -R "${CONFIG[USER]}:${CONFIG[USER]}" "${CONFIG[DATA_DIR]}" "${CONFIG[BACKUP_DIR]}"
    if [ ! -f "${CONFIG[DATA_DIR]}/wallet/seed.txt" ]; then
        log_warn "Generating new wallet... Please backup your mnemonic phrase!"
        sudo -u "${CONFIG[USER]}" /usr/local/bin/nockchain-wallet keygen | sudo tee "${CONFIG[DATA_DIR]}/wallet/seed.txt"
        sudo chmod 600 "${CONFIG[DATA_DIR]}/wallet/seed.txt"
    fi
    log_info "Environment setup complete."
}

setup_systemd_service() {
    local node_type=$1
    log_info "Configuring Nockchain systemd service..."
    local exec_start_args="--base-path ${CONFIG[DATA_DIR]} --port ${CONFIG[P2P_PORT]} --rpc-port ${CONFIG[RPC_PORT]} --prometheus-port ${CONFIG[METRICS_PORT]}"
    case "$node_type" in
        validator) exec_start_args+=" --validator --name MyNockValidator";;
        archive) exec_start_args+=" --pruning archive";;
        light) exec_start_args="light ${exec_start_args}";;
    esac
    
    local exec_cmd="/usr/local/bin/nockchain $exec_start_args"
    if command -v dnf &>/dev/null; then
        exec_cmd="/bin/bash -c 'source /opt/rh/gcc-toolset-11/enable && exec $exec_cmd'"
    fi

    sudo tee /etc/systemd/system/nockchain-node.service >/dev/null <<EOF
[Unit]
Description=Nockchain Node ($node_type)
After=network-online.target
[Service]
User=${CONFIG[USER]}
Group=${CONFIG[USER]}
Type=simple
ExecStart=$exec_cmd
Restart=on-failure
RestartSec=10
LimitNOFILE=1048576
[Install]
WantedBy=multi-user.target
EOF
    sudo systemctl daemon-reload
    sudo systemctl enable nockchain-node.service
    log_info "Systemd service configured and enabled."
}

install_monitoring_stack() {
    log_info "Deploying monitoring stack (Prometheus + Grafana)..."
    # ... [same as before]
    log_info "Monitoring stack deployed. Access Grafana at http://$(hostname -I | awk '{print $1}'):${CONFIG[GRAFANA_PORT]}"
}

# --- SECURITY MODULE ---
security_hardening_menu() {
    log_info "Performing security hardening..."
    
    # Configure Fail2ban for SSH
    log_info "Configuring Fail2ban for SSH protection..."
    sudo tee /etc/fail2ban/jail.local >/dev/null <<'EOF'
[sshd]
enabled = true
port = ssh
filter = sshd
logpath = /var/log/auth.log
maxretry = 3
bantime = 3600
EOF
    sudo systemctl enable --now fail2ban
    
    # Check for common vulnerabilities
    log_warn "Checking system security baseline..."
    if grep -q "PermitRootLogin yes" /etc/ssh/sshd_config; then
        log_warn "SSH root login is permitted. Consider changing to 'no'."
    fi
    if grep -q "PasswordAuthentication yes" /etc/ssh/sshd_config; then
        log_warn "SSH password authentication is enabled. Consider using key-based auth only."
    fi
    log_info "Security hardening complete."
}


# --- MANAGEMENT TASKS ---
backup_node() {
    log_info "Starting node backup..."
    sudo systemctl stop nockchain-node.service
    local backup_file="${CONFIG[BACKUP_DIR]}/nockchain-backup-$(date +%F-%H%M).tar.gz"
    run_with_spinner "sudo tar -czf $backup_file -C /var/lib nockchain" "Creating backup archive..."
    sudo systemctl start nockchain-node.service
    log_info "Backup complete: $backup_file"
}

upgrade_node() {
    log_info "Upgrading node from source..."
    local node_type=$(sudo systemctl show -p Description nockchain-node.service | cut -d'(' -f2 | cut -d')' -f1)
    
    sudo systemctl stop nockchain-node.service
    
    # Pull latest code and re-build
    if [ ! -d "${CONFIG[SOURCE_DIR]}" ]; then
      run_with_spinner "git clone ${CONFIG[NOCKCHAIN_REPO_URL]} ${CONFIG[SOURCE_DIR]}" "Cloning Nockchain repository..."
    fi
    pushd "${CONFIG[SOURCE_DIR]}" >/dev/null
      git pull
      # Re-run build process
      install_nockchain_node "$node_type"
    popd >/dev/null
    
    sudo systemctl start nockchain-node.service
    log_info "Node upgrade complete."
}

uninstall_suite() {
    log_warn "This will permanently delete the Nockchain node, user, and data."
    read -p "Are you sure you want to uninstall? (yes/no): " confirm
    if [[ "$confirm" != "yes" ]]; then
        log_info "Uninstallation cancelled."
        return
    fi
    
    log_info "Stopping and disabling services..."
    sudo systemctl stop nockchain-node.service prometheus grafana-server || true
    sudo systemctl disable nockchain-node.service prometheus grafana-server || true
    
    log_info "Removing binaries and configuration files..."
    sudo rm -f /usr/local/bin/{nockchain,nockchain-cli,nockchain-wallet,hoonc}
    sudo rm -f /etc/systemd/system/nockchain-node.service
    sudo rm -rf /etc/nockchain /etc/prometheus /etc/grafana
    
    log_info "Removing data directories..."
    sudo rm -rf "${CONFIG[DATA_DIR]}" "${CONFIG[SOURCE_DIR]}"
    
    log_info "Removing user..."
    sudo userdel "${CONFIG[USER]}" || true
    
    log_info "Nockchain suite has been uninstalled."
}


# --- AI CO-PILOT v2.0 ---
run_ai_copilot_v2() {
    log_info "🤖 Nockchain AI Co-Pilot v2.0 Initializing..."
    if ! systemctl is-active --quiet prometheus; then
        log_error "Prometheus service is not running. Cannot fetch real-time metrics."
        return
    fi
    
    # Helper to query prometheus
    query_prom() {
        curl -s "http://localhost:9090/api/v1/query" --data-urlencode "query=$1" | jq -r '.data.result[0].value[1] // "0"'
    }

    log_info ">> Analyzing real-time performance metrics..."
    local cpu_usage=$(query_prom '100 * (1 - avg(rate(node_cpu_seconds_total{mode="idle"}[1m])))')
    local mem_usage=$(query_prom '100 * (1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes))')
    local disk_usage=$(query_prom "100 * (1 - (node_filesystem_avail_bytes{mountpoint=\"${CONFIG[DATA_DIR]}\"} / node_filesystem_size_bytes{mountpoint=\"${CONFIG[DATA_DIR]}\"}))")
    
    printf "   CPU: %.2f%% | MEM: %.2f%% | DISK: %.2f%%\n" "$cpu_usage" "$mem_usage" "$disk_usage"
    (( $(echo "$cpu_usage > 85" | bc -l) )) && log_warn "   [AI Insight] High CPU usage detected. Consider upgrading your instance."
    (( $(echo "$mem_usage > 90" | bc -l) )) && log_warn "   [AI Insight] High memory usage. Check for leaks or add more RAM."
    (( $(echo "$disk_usage > 95" | bc -l) )) && log_error "   [AI Alert] Disk space critically low! Risk of node halting."

    log_info ">> Analyzing P2P network health..."
    local peer_count=$(query_prom 'substrate_p2p_peers_count')
    printf "   Connected Peers: %d\n" "$peer_count"
    (( peer_count < 5 )) && log_warn "   [AI Insight] Low peer count. Check network connectivity and firewall rules."
    
    log_info "🤖 AI Co-Pilot analysis complete."
}


# --- MENUS ---
show_banner() {
    ColorBlue '
    _   __         _                    _           _             
   / | / /  ___   | | __   ___    ___  | |_   _ __ (_)  ___   ___ 
  /  |/ /  / _ \  | |/ /  / _ \  / __| | __| |  __| | |/ __| / __|
 / /|  /  | (_) | |   <  | (_) | \__ \ | |_  | |    | | (__  \__ \
/_/ |_/    \___/  |_|\_\  \___/  |___/  \__| |_|    |_| \___| |___/
                Orchestrator v5.0 "Titan"
'
}

full_installation_menu() {
    PS3="$(ColorYellow '选择要执行的完整安装流程: ')"
    select choice in "全新安装 (节点 + 监控 + 安全)" "仅安装节点" "返回主菜单"; do
        case $choice in
            "全新安装 (节点 + 监控 + 安全)")
                log_info "Starting full installation..."
                install_dependencies
                install_rust_toolchain
                install_hoonc
                PS3="选择节点类型: "; select type in "validator" "archive" "full" "light"; do
                    install_nockchain_node "$type"; break; done
                setup_system_user_and_env
                setup_systemd_service "$type"
                install_monitoring_stack
                security_hardening_menu
                sudo systemctl start nockchain-node.service
                log_info "Full installation complete!"
                break
                ;;
            "仅安装节点")
                # ... Similar logic but only for the node
                break
                ;;
            "返回主菜单") break ;;
        esac
    done
}

main_menu() {
    clear
    show_banner
    local status; status=$(systemctl is-active nockchain-node.service && echo "$(ColorGreen 'Running')" || echo "$(ColorRed 'Stopped')")
    echo -e "Node Status: $status\n"
    
    PS3="$(ColorBlue '请选择操作 [1-7]: ')"
    select opt in \
        "全新安装 / 组件管理" \
        "节点生命周期 (升级/备份)" \
        "安全中心" \
        "运行 AI 运维协处理器" \
        "查看实时日志" \
        "彻底卸载套件" \
        "退出"; do
        case $opt in
            "全新安装 / 组件管理") full_installation_menu ;;
            "节点生命周期 (升级/备份)")
                PS3="选择操作: "; select task in "升级节点" "备份节点" "返回"; do
                    case $task in
                        "升级节点") upgrade_node; break;;
                        "备份节点") backup_node; break;;
                        "返回") break;;
                    esac
                done
                ;;
            "安全中心") security_hardening_menu ;;
            "运行 AI 运维协处理器") run_ai_copilot_v2 ;;
            "查看实时日志") sudo journalctl -u nockchain-node -n 100 -f ;;
            "彻底卸载套件") uninstall_suite ;;
            "退出") exit 0 ;;
            *) echo "Invalid option $REPLY" ;;
        esac
        read -p "按回车键返回主菜单..."
        main_menu
    done
}

# --- SCRIPT ENTRYPOINT ---
if [[ $EUID -ne 0 ]]; then
   log_error "This script must be run as root. Please use 'sudo'."
   exit 1
fi
load_or_create_config
main_menu
