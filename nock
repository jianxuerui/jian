#!/bin/bash
# ==============================================================================
# Nockchain 挖矿助手 (K2 增强融合版 v11.0.0 - 内核中心稳定版)
# ==============================================================================
# 作者: K2 节点教程分享 (AI 终极离线内核版)
#
# v11.0.0 更新日志:
# - [内核中心] 新增内核完整性校验！使用 SHA256 确保内核在安装和启动时未被篡改。
# - [内核中心] 新增启动前置安全检查。在启动服务前，验证所有关键文件（二进制、配置、内核）的完整性。
# - [内核中心] 新增独立的内核更新功能，可从指定 URL 拉取并验证新内核，实现无缝升级。
# - [稳定性增强] 新增“健康检查”功能，提供详细的运行状态报告，包括进程、资源占用和内核状态。
# - [体验优化] 主菜单和状态报告更加清晰，所有操作都围绕着一个稳定、可信的内核进行。
# ==============================================================================

# --- 智能引导与权限检查 ---
# ... (此部分代码无变化，保持原样) ...
if [ -z "$BASH_VERSION" ]; then echo -e "\033[0;31m[错误] 此脚本必须使用 'bash' 解释器运行。\033[0m"; echo -e "\033[1;33m请使用: \033[0;32mbash $0\033[0m"; exit 1; fi
if [ "$(id -u)" -ne 0 ]; then echo -e "\033[1;33m[提示] 此脚本需要 Root 权限。\033[0m"; if ! command -v sudo &>/dev/null; then echo -e "\033[0;31m[错误] 'sudo' 未找到。请以 root 身份运行。\033[0m"; exit 1; fi; sudo bash "$0" "$@"; exit $?; fi
# --- 引导结束 ---

set -e

# --- 全局配置 ---
MINER_USERNAME="miner"
MINER_HOME="/home/${MINER_USERNAME}"
NCK_DIR="${MINER_HOME}/nockchain"
NCK_BIN="${MINER_HOME}/.cargo/bin/nockchain"
ENV_FILE="${NCK_DIR}/.env"
KERNEL_FILE="${NCK_DIR}/pkg/hoon.hoon"
SERVICE_NAME="nockchain-miner" # 也用作 screen 会话名
SERVICE_FILE="/etc/systemd/system/${SERVICE_NAME}.service"

# --- 颜色定义 ---
# ... (此部分代码无变化，保持原样) ...
if [ -t 1 ]; then RESET='\033[0m'; BOLD='\033[1m'; GREEN='\033[0;32m'; BLUE='\033[0;34m'; YELLOW='\033[1;33m'; RED='\033[0;31m'; PURPLE='\033[0;35m'; CYAN='\033[0;36m'; else RESET=''; BOLD=''; GREEN=''; BLUE=''; YELLOW=''; RED=''; PURPLE=''; CYAN=''; fi

# --- 内核数据 (v140) ---
# [内核中心] 定义内核版本和校验和
HOON_KERNEL_VERSION="v140"
HOON_KERNEL_SHA256="7a33a8246d30234795326164f9f688e404b9015e1284d720b080517457712398"
KERNEL_UPDATE_URL="https://gist.githubusercontent.com/someuser/somegist/raw/hoon.hoon" # 示例URL，请替换为真实的

read -r -d '' HOON_KERNEL_CONTENT <<'EOF'
::
/+  hoon
|%
++  ver
  |%
  ++  arvo  0vI.need
  ++  kelvin  (as-co:co /(~ . 400))
  ++  hoon  140
  --
++  ride
  |%
  ++  sins  |=  a=ovum  (send a)
  ++  fard  |=  a=ovum  (send a)
  ++  send  |=  a=ovum  ~|([! a] !!)
  --
--
EOF

# ==============================================================================
# === 助手函数 (稳定性核心) ===
# ==============================================================================

function check_command_exists() { command -v "$1" &>/dev/null; }
function detect_system_info() {
    # ... (此函数内部逻辑不变) ...
    if [ -f /etc/os-release ]; then . /etc/os-release; OS_ID=${ID,,}; else OS_ID=$(uname -s | tr '[:upper:]' '[:lower:]'); fi
    local screen_dep="screen"
    if check_command_exists apt-get; then export PKG_MANAGER="apt"; export UPDATE_CMD="apt-get update -y"; export INSTALL_CMD="apt-get install -y"; export DEP_PACKAGES="clang llvm libclang-dev pkg-config libssl-dev build-essential cmake git make curl dos2unix coreutils ${screen_dep} bc";
    elif check_command_exists dnf; then export PKG_MANAGER="dnf"; export UPDATE_CMD="dnf check-update"; export INSTALL_CMD="dnf install -y"; export DEP_PACKAGES="clang llvm-devel libclang-devel pkgconfig openssl-devel cmake git make curl dos2unix coreutils ${screen_dep} bc"; export GROUP_INSTALL_CMD="dnf groupinstall -y 'Development Tools'";
    elif check_command_exists yum; then export PKG_MANAGER="yum"; export UPDATE_CMD="yum check-update"; export INSTALL_CMD="yum install -y"; export DEP_PACKAGES="clang llvm-devel libclang-devel pkgconfig openssl-devel cmake git make curl dos2unix coreutils ${screen_dep} bc"; export GROUP_INSTALL_CMD="yum groupinstall -y 'Development Tools'";
    elif check_command_exists pacman; then export PKG_MANAGER="pacman"; export UPDATE_CMD="pacman -Sy"; export INSTALL_CMD="pacman -S --noconfirm --needed"; export DEP_PACKAGES="clang llvm libclang pkg-config openssl cmake git make curl dos2unix base-devel coreutils ${screen_dep} bc";
    elif check_command_exists zypper; then export PKG_MANAGER="zypper"; export UPDATE_CMD="zypper refresh"; export INSTALL_CMD="zypper install -y"; export DEP_PACKAGES="clang llvm-devel libclang-devel pkg-config libopenssl-devel cmake git make curl dos2unix patterns-devel-base-devel_basis coreutils ${screen_dep} bc";
    else export PKG_MANAGER="unsupported"; fi
    if [[ "$OS_ID" == "ubuntu" || "$OS_ID" == "debian" ]]; then export SUDO_GROUP="sudo"; else export SUDO_GROUP="wheel"; fi
}
function check_initial_deps() {
    # ... (此函数内部逻辑不变) ...
    local missing_deps=(); ! check_command_exists curl && missing_deps+=("curl"); ! check_command_exists git && missing_deps+=("git"); if [ ${#missing_deps[@]} -ne 0 ]; then echo -e "${RED}错误: 缺少核心依赖: ${missing_deps[*]}${RESET}"; if [ "$PKG_MANAGER" != "unsupported" ]; then echo -e "${YELLOW}请尝试运行: ${CYAN}${INSTALL_CMD} ${missing_deps[*]}${RESET}"; else echo -e "${YELLOW}请手动安装。${RESET}"; fi; exit 1; fi
}
function show_banner() {
    clear
    echo -e "${BOLD}${BLUE}===========================================================${RESET}"
    echo -e "${BOLD}${BLUE} Nockchain 挖矿助手 (K2 v11.0.0 - 内核中心稳定版)${RESET}"
    echo -e "${BOLD}${BLUE}===========================================================${RESET}"
    echo -e "✨ ${BOLD}${PURPLE}稳定内核: 使用内置 ${HOON_KERNEL_VERSION} (SHA256: ${HOON_KERNEL_SHA256:0:12}...)${RESET}"
    if check_systemd; then echo -e "⚙️ ${BOLD}${GREEN}管理模式: Systemd (现代系统标准)${RESET}"; else echo -e "⚙️ ${BOLD}${YELLOW}管理模式: Screen (兼容模式)${RESET}"; fi
    if id "${MINER_USERNAME}" &>/dev/null; then echo -e "👤 ${GREEN}专用用户 '${MINER_USERNAME}' 已创建。${RESET}"; else echo -e "👤 ${YELLOW}专用用户 '${MINER_USERNAME}' 待创建。${RESET}"; fi
    echo "📌 作者: K2 节点教程分享"
    echo "-----------------------------------------------------------"; echo ""
}
function pause_and_return() { echo ""; read -r -p "按任意键返回主菜单..." -s -n 1; echo; }
function check_systemd() { [ -d /run/systemd/system ] && check_command_exists systemctl; }

# [内核中心] 新增内核校验函数
function verify_kernel_file() {
    local file_path="$1"
    local expected_sha="$2"
    if [ ! -f "$file_path" ]; then return 1; fi
    local actual_sha=$(sha256sum "$file_path" | awk '{print $1}')
    if [ "$actual_sha" == "$expected_sha" ]; then return 0; else return 1; fi
}

# [稳定性增强] 新增启动前置检查函数
function pre_start_check() {
    echo -e "${CYAN}--- 正在执行启动前置安全检查 ---${RESET}"
    local pass=true
    if [ ! -f "$NCK_BIN" ]; then echo -e "${RED}[✗] 检查失败: nockchain 可执行文件未找到!${RESET}"; pass=false; fi
    if [ ! -f "$ENV_FILE" ] || ! grep -q "MINING_PUBKEY" "$ENV_FILE"; then echo -e "${RED}[✗] 检查失败: 挖矿公钥未设置!${RESET}"; pass=false; fi
    if [ ! -f "$KERNEL_FILE" ]; then echo -e "${RED}[✗] 检查失败: 内核文件 (hoon.hoon) 未找到!${RESET}"; pass=false; fi
    if ! verify_kernel_file "$KERNEL_FILE" "$HOON_KERNEL_SHA256"; then echo -e "${RED}[✗] 检查失败: 内核文件校验和不匹配! 可能已损坏或被篡改。${RESET}"; pass=false; fi
    
    if [ "$pass" = true ]; then
        echo -e "${GREEN}[✓] 所有检查通过，系统准备就绪。${RESET}"
        return 0
    else
        echo -e "${YELLOW}请先运行 [1]全新安装 或 [7]更新内核 以修复问题。${RESET}"
        return 1
    fi
}


# ==============================================================================
# === 核心功能函数 ===
# ==============================================================================

function install_all() {
    # ... (大部分逻辑不变, 仅在注入内核后增加校验) ...
    show_banner; check_initial_deps
    echo -e "${YELLOW}[*] 开始全新安装 Nockchain...${RESET}"
    echo -e "${BLUE}--- 步骤 1/5: 准备专用用户 '${MINER_USERNAME}' ---${RESET}"
    if id "${MINER_USERNAME}" &>/dev/null; then echo -e "${YELLOW}[!] 清理旧用户 '${MINER_USERNAME}'...${RESET}"; if check_systemd; then systemctl stop "$SERVICE_NAME" &>/dev/null; systemctl disable "$SERVICE_NAME" &>/dev/null; rm -f "$SERVICE_FILE"; systemctl daemon-reload &>/dev/null; fi; if check_command_exists screen; then screen -S ${SERVICE_NAME} -X quit &>/dev/null || true; fi; killall -u "${MINER_USERNAME}" 2>/dev/null || true; userdel -r "${MINER_USERNAME}" 2>/dev/null || true; echo -e "${GREEN}[+] 旧环境清理完毕。${RESET}"; fi
    if [[ "$OS_ID" == "debian" || "$OS_ID" == "ubuntu" ]] && command -v adduser &>/dev/null; then adduser --disabled-password --gecos "" "${MINER_USERNAME}"; else useradd -m -s /bin/bash "${MINER_USERNAME}"; fi; usermod -aG "${SUDO_GROUP}" "${MINER_USERNAME}"; echo -e "${GREEN}[✓] 用户创建成功并配置 sudo！${RESET}"
    
    echo -e "${BLUE}--- 步骤 2/5: 安装系统依赖 ---${RESET}"
    if [ "$PKG_MANAGER" == "unsupported" ]; then echo -e "${RED}错误: 未知包管理器。${RESET}"; exit 1; fi
    echo -e "${CYAN}正在更新包列表...${RESET}"; eval "$UPDATE_CMD"; echo -e "${CYAN}正在安装核心依赖...${RESET}"; eval "$INSTALL_CMD $DEP_PACKAGES"; if [ -n "$GROUP_INSTALL_CMD" ]; then echo -e "${CYAN}正在安装开发工具集...${RESET}"; eval "$GROUP_INSTALL_CMD"; fi
    echo -e "${GREEN}[✓] 系统依赖安装完成。${RESET}"

    echo -e "${BLUE}--- 步骤 3/5 & 4/5: 克隆、注入内核并编译 ---${RESET}"
    local b64_kernel; b64_kernel=$(echo -n "$HOON_KERNEL_CONTENT" | base64)
    su - "${MINER_USERNAME}" -c bash <<EOF
    set -euo pipefail
    source "\$HOME/.cargo/env" || true
    if ! command -v cargo &>/dev/null; then curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y; source "\$HOME/.cargo/env"; fi
    
    NCK_DIR_SUB="\$HOME/nockchain"; rm -rf "\$NCK_DIR_SUB"; git clone https://github.com/zorp-corp/nockchain "\$NCK_DIR_SUB"; cd "\$NCK_DIR_SUB"
    
    echo "--- [${MINER_USERNAME}] 正在注入 ${HOON_KERNEL_VERSION} 内核... ---"
    echo "$b64_kernel" | base64 -d > "\$NCK_DIR_SUB/pkg/hoon.hoon"
    
    # [内核中心] 注入后立即进行校验
    echo "--- [${MINER_USERNAME}] 正在校验内核完整性... ---"
    actual_sha=\$(sha256sum "\$NCK_DIR_SUB/pkg/hoon.hoon" | awk '{print \$1}')
    if [ "\$actual_sha" != "${HOON_KERNEL_SHA256}" ]; then
        echo -e "\033[0;31m[错误] 内核注入失败或校验和不匹配！安装中止。\033[0m"
        exit 1
    fi
    echo -e "\033[0;32m[✓] 内核校验成功！\033[0m"

    echo "--- [${MINER_USERNAME}] 正在编译... ---"
    cargo build --release -p hoonc; mkdir -p assets
    "\$NCK_DIR_SUB/target/release/hoonc" pkg/miner.hoon > assets/miner.jam; "\$NCK_DIR_SUB/target/release/hoonc" pkg/dumb.hoon > assets/dumb.jam; "\$NCK_DIR_SUB/target/release/hoonc" pkg/wal.hoon > assets/wal.jam
    export RUSTFLAGS="-C target-cpu=native -C opt-level=3"; export CARGO_PROFILE_RELEASE_LTO="true"
    BUILD_JOBS=\$(nproc 2>/dev/null || echo 1)
    cargo build --release --workspace --exclude hoonc -j"\${BUILD_JOBS}"
    cp "\$NCK_DIR_SUB/target/release/nockchain" "\$HOME/.cargo/bin/"
    echo "--- [${MINER_USERNAME}] 编译成功！ ---"
EOF
    if [ $? -ne 0 ]; then echo -e "\n${RED}安装失败！${RESET}"; else echo -e "\n${GREEN}[✓] Nockchain 安装成功！${RESET}"; fi
    pause_and_return
}

function set_pubkey() {
    # ... (此部分代码无变化) ...
    show_banner; if [ ! -d "$NCK_DIR" ]; then echo -e "${RED}错误: Nockchain 尚未安装。${RESET}"; pause_and_return; return; fi; local pubkey; read -r -p "请输入您的128位挖矿公钥: " pubkey; if ! [[ "$pubkey" =~ ^[0-9a-fA-F]{128}$ ]]; then echo -e "\n${RED}错误: 公钥格式无效。${RESET}"; pause_and_return; return; fi; touch "$ENV_FILE"; chown "${MINER_USERNAME}:${MINER_USERNAME}" "$ENV_FILE"; sed -i '/^MINING_PUBKEY=/d' "$ENV_FILE"; sed -i '/^MINER_THREADS=/d' "$ENV_FILE"; echo "MINING_PUBKEY=$pubkey" >> "$ENV_FILE"; echo "MINER_THREADS=$(nproc 2>/dev/null || echo 1)" >> "$ENV_FILE"; echo -e "\n${GREEN}[✓] 配置已成功保存！${RESET}"; pause_and_return
}

# --- 服务管理 (已集成前置检查) ---
function start_node() { show_banner; if ! pre_start_check; then pause_and_return; return; fi; if check_systemd; then start_node_systemd; else start_node_screen; fi; pause_and_return; }
function stop_node() { show_banner; if check_systemd; then stop_node_systemd; else stop_node_screen; fi; pause_and_return; }
function view_logs() { show_banner; if check_systemd; then view_logs_systemd; else view_logs_screen; fi; }

# --- Systemd 实现 ---
function start_node_systemd() {
    echo -e "${YELLOW}[*] 正在使用 Systemd 启动服务...${RESET}"
    cat <<EOF > "$SERVICE_FILE"
[Unit]
Description=${SERVICE_NAME}; After=network-online.target
[Service]
User=${MINER_USERNAME}; Group=$(id -gn "${MINER_USERNAME}"); WorkingDirectory=${NCK_DIR}; EnvironmentFile=${ENV_FILE}
ExecStart=${NCK_BIN}
Restart=on-failure; RestartSec=10; LimitNOFILE=65536; Nice=-5
[Install]
WantedBy=multi-user.target
EOF
    systemctl daemon-reload; systemctl enable "$SERVICE_NAME"; systemctl restart "$SERVICE_NAME"
    echo -e "\n${GREEN}[✓] Systemd 服务 '${SERVICE_NAME}' 已启动并设为开机自启！${RESET}"
}
function stop_node_systemd() { if ! systemctl list-units --full -all | grep -q "${SERVICE_NAME}.service"; then echo -e "${YELLOW}提示: 服务未安装。${RESET}"; return; fi; echo -e "${YELLOW}[*] 正在停止 Systemd 服务...${RESET}"; systemctl stop "$SERVICE_NAME"; echo -e "\n${GREEN}[✓] Systemd 服务 '${SERVICE_NAME}' 已停止。${RESET}"; }
function view_logs_systemd() { if ! systemctl list-units --full -all | grep -q "${SERVICE_NAME}.service"; then echo -e "${YELLOW}提示: 服务未安装。${RESET}"; pause_and_return; return; fi; echo -e "${YELLOW}显示实时日志 (Systemd)... 按 Ctrl+C 退出。${RESET}"; echo "------------------------------------------------------"; journalctl -u "$SERVICE_NAME" -f --no-pager; pause_and_return; }

# --- Screen (兼容模式) 实现 ---
function start_node_screen() {
    if ! check_command_exists screen; then echo -e "${RED}错误: 'screen' 未安装。${RESET}"; return; fi
    if screen -ls | grep -q "${SERVICE_NAME}"; then echo -e "${YELLOW}提示: 挖矿进程已在 Screen 中运行。${RESET}"; return; fi
    echo -e "${YELLOW}[*] 正在使用 Screen (兼容模式) 在后台启动挖矿...${RESET}"
    su - "${MINER_USERNAME}" -c "screen -dmS ${SERVICE_NAME} bash -c 'cd ${NCK_DIR} && source ${ENV_FILE} && ${NCK_BIN}'"
    echo -e "\n${GREEN}[✓] 挖矿已在名为 '${SERVICE_NAME}' 的 Screen 会话中启动！${RESET}"; echo -e "${CYAN}提示: 此模式不会开机自启。${RESET}";
}
function stop_node_screen() { if ! check_command_exists screen; then echo -e "${RED}错误: 'screen' 未安装。${RESET}"; return; fi; if ! screen -ls | grep -q "${SERVICE_NAME}"; then echo -e "${YELLOW}提示: Screen 中没有正在运行的挖矿进程。${RESET}"; return; fi; echo -e "${YELLOW}[*] 正在停止 Screen 会话...${RESET}"; screen -S "${SERVICE_NAME}" -X quit; echo -e "\n${GREEN}[✓] Screen 会话 '${SERVICE_NAME}' 已停止。${RESET}"; }
function view_logs_screen() { if ! check_command_exists screen; then echo -e "${RED}错误: 'screen' 未安装。${RESET}"; pause_and_return; return; fi; if ! screen -ls | grep -q "${SERVICE_NAME}"; then echo -e "${YELLOW}提示: Screen 中没有正在运行的挖矿进程。${RESET}"; pause_and_return; return; fi; echo -e "${YELLOW}正在附加到 Screen 会话... ${CYAN}按组合键 Ctrl+A 然后按 D 退出${RESET}"; echo "------------------------------------------------------"; sleep 2; screen -r "${SERVICE_NAME}"; pause_and_return; }

# [内核中心] 新增内核管理和健康检查功能
function update_kernel() {
    show_banner
    if [ ! -d "$NCK_DIR" ]; then echo -e "${RED}错误: Nockchain 尚未安装，无法更新内核。${RESET}"; pause_and_return; return; fi
    echo -e "${YELLOW}此操作将从以下 URL 下载新内核并覆盖现有文件:${RESET}"
    echo -e "${CYAN}${KERNEL_UPDATE_URL}${RESET}"
    echo -e "${YELLOW}新内核必须与脚本内置的校验和 (${HOON_KERNEL_SHA256:0:16}...) 匹配。${RESET}"
    read -r -p "确定要继续吗? (y/N): " confirm
    if [[ ! "$confirm" =~ ^[yY]$ ]]; then echo -e "${RED}操作已取消。${RESET}"; pause_and_return; return; fi

    echo -e "${CYAN}正在停止挖矿进程以安全更新...${RESET}"
    if check_systemd; then stop_node_systemd; else stop_node_screen; fi

    echo -e "${CYAN}正在下载新内核...${RESET}"
    if ! curl -L --fail -o "${KERNEL_FILE}.tmp" "${KERNEL_UPDATE_URL}"; then
        echo -e "${RED}错误: 内核下载失败！请检查 URL 或网络连接。${RESET}"; rm -f "${KERNEL_FILE}.tmp"; pause_and_return; return;
    fi

    echo -e "${CYAN}正在校验下载的内核...${RESET}"
    if verify_kernel_file "${KERNEL_FILE}.tmp" "$HOON_KERNEL_SHA256"; then
        echo -e "${GREEN}[✓] 新内核校验成功！${RESET}"
        chown "${MINER_USERNAME}:${MINER_USERNAME}" "${KERNEL_FILE}.tmp"
        mv "${KERNEL_FILE}.tmp" "${KERNEL_FILE}"
        echo -e "${GREEN}内核已成功更新为 ${HOON_KERNEL_VERSION}！${RESET}"
    else
        echo -e "${RED}[✗] 错误: 下载的内核文件校验和不匹配！为安全起见，更新已中止。${RESET}"
        rm -f "${KERNEL_FILE}.tmp"
    fi
    pause_and_return
}

function health_check() {
    show_banner
    echo -e "${BOLD}${PURPLE}--- 系统健康检查报告 ---${RESET}"
    
    # 1. 服务状态
    echo -e "${BLUE}1. 服务状态:${RESET}"
    local is_running=false
    if check_systemd; then
        if systemctl is-active --quiet "$SERVICE_NAME"; then echo -e "   - 管理方式: ${GREEN}Systemd${RESET}"; echo -e "   - 状态: ${GREEN}运行中${RESET}"; is_running=true; else echo -e "   - 管理方式: ${GREEN}Systemd${RESET}"; echo -e "   - 状态: ${RED}已停止${RESET}"; fi
    elif check_command_exists screen; then
        if screen -ls | grep -q -w "${SERVICE_NAME}"; then echo -e "   - 管理方式: ${YELLOW}Screen${RESET}"; echo -e "   - 状态: ${GREEN}运行中${RESET}"; is_running=true; else echo -e "   - 管理方式: ${YELLOW}Screen${RESET}"; echo -e "   - 状态: ${RED}已停止${RESET}"; fi
    else echo -e "   - ${RED}未找到服务管理工具。${RESET}"; fi

    # 2. 进程信息 (如果正在运行)
    echo -e "${BLUE}2. 进程信息:${RESET}"
    if $is_running; then
        local pid=$(pgrep -u "${MINER_USERNAME}" -f nockchain)
        if [ -n "$pid" ]; then
            local p_info=$(ps -p "$pid" -o pid=,etime=,%cpu=,%mem=,rss=)
            echo -e "   - PID: ${GREEN}$(echo $p_info | awk '{print $1}')${RESET}"
            echo -e "   - 运行时间: ${GREEN}$(echo $p_info | awk '{print $2}')${RESET}"
            echo -e "   - CPU 占用: ${GREEN}$(echo $p_info | awk '{print $3}')%${RESET}"
            echo -e "   - 内存占用: ${GREEN}$(echo $p_info | awk '{print $4}')% ($(echo $p_info | awk '{print $5/1024}' | xargs printf "%.2f") MB)${RESET}"
        else echo -e "   - ${YELLOW}警告: 服务状态为运行中，但找不到 nockchain 进程!${RESET}"; fi
    else echo "   - ${CYAN}服务未运行。${RESET}"; fi

    # 3. 内核与配置检查
    echo -e "${BLUE}3. 内核与配置:${RESET}"
    if [ -f "$KERNEL_FILE" ]; then
        if verify_kernel_file "$KERNEL_FILE" "$HOON_KERNEL_SHA256"; then echo -e "   - 内核状态: ${GREEN}[OK] ${HOON_KERNEL_VERSION} (校验和匹配)${RESET}"; else echo -e "   - 内核状态: ${RED}[不匹配!] 当前内核已损坏或版本不正确!${RESET}"; fi
    else echo -e "   - 内核状态: ${RED}[缺失!] 内核文件 hoon.hoon 不存在!${RESET}"; fi
    if [ -f "$ENV_FILE" ] && grep -q "MINING_PUBKEY" "$ENV_FILE"; then pubkey=$(grep MINING_PUBKEY "$ENV_FILE" | cut -d '=' -f 2); echo -e "   - 挖矿公钥: ${GREEN}${pubkey:0:8}...${pubkey: -8}${RESET}"; else echo -e "   - 挖矿公钥: ${RED}[未设置!]${RESET}"; fi
    
    echo "---------------------------"
    pause_and_return
}


function main_menu() {
    while true; do
    show_banner
    echo -e "${BOLD}${GREEN}--- 主菜单 ---${RESET}"; echo "请选择要执行的操作:"; echo ""
    echo -e "  ${CYAN}1)${RESET} 全新安装 Nockchain (会清空旧数据)"
    echo -e "  ${CYAN}2)${RESET} 设置/更新挖矿公钥"
    echo ""
    if check_systemd; then
        if systemctl is-active --quiet "$SERVICE_NAME"; then SERVICE_STATUS="${GREEN}(运行中)${RESET}"; else SERVICE_STATUS="${RED}(已停止)${RESET}"; fi
        echo -e "  ${CYAN}3)${RESET} ${BOLD}启动${RESET}挖矿 (Systemd) ${SERVICE_STATUS}"
        echo -e "  ${CYAN}4)${RESET} ${BOLD}停止${RESET}挖矿 (Systemd)"
        echo -e "  ${CYAN}5)${RESET} 查看实时日志 (Systemd)"
    elif check_command_exists screen; then
        if screen -ls | grep -q -w "${SERVICE_NAME}"; then SERVICE_STATUS="${GREEN}(运行中)${RESET}"; else SERVICE_STATUS="${RED}(已停止)${RESET}"; fi
        echo -e "  ${CYAN}3)${RESET} ${BOLD}启动${RESET}挖矿 (Screen) ${SERVICE_STATUS}"
        echo -e "  ${CYAN}4)${RESET} ${BOLD}停止${RESET}挖矿 (Screen)"
        echo -e "  ${CYAN}5)${RESET} 查看挖矿窗口 (Screen)"
    else
        echo -e "  ${RED}3-5) (不可用) 缺少 Systemd 或 Screen。${RESET}"
    fi
    echo ""
    echo -e "  ${PURPLE}6)${RESET} ${BOLD}健康检查${RESET} (检查运行状态与内核)"
    echo -e "  ${PURPLE}7)${RESET} 从网络更新内核"
    echo ""
    echo -e "  ${YELLOW}0) 退出脚本${RESET}"; echo ""
    read -r -p "请输入选项编号: " choice
    case "$choice" in
        1) install_all ;; 2) set_pubkey ;; 3) start_node ;; 4) stop_node ;; 5) view_logs ;;
        6) health_check ;; 7) update_kernel ;;
        0) echo -e "${BLUE}感谢使用！再见。${RESET}"; exit 0 ;;
        *) echo -e "${RED}无效选项，请重新输入。${RESET}"; sleep 1 ;;
    esac
    done
}

# --- 脚本入口 ---
detect_system_info
main_menu
