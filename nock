#!/bin/bash
# -*- coding: UTF-8 -*-
# Nockchain中文优化挖矿脚本 v3.0 - 修复版

# 颜色定义
RED='\033[1;31m'
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
BLUE='\033[1;34m'
CYAN='\033[1;36m'
RESET='\033[0m'

# 脚本配置
NOCKCHAIN_DIR="$HOME/nockchain"
LOG_FILE="$HOME/nockchain_install.log"

# 显示带颜色的消息
print_message() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${RESET}"
}

# 记录日志
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
}

# 检查命令是否存在
check_command() {
    if command -v "$1" >/dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}

# 显示主菜单
show_menu() {
    clear
    echo -e "${BLUE}
=======================================
 Nockchain 中文优化挖矿脚本 v3.0
=======================================
${RESET}"
    echo -e "${YELLOW}1. 安装Nockchain节点（从源码编译）"
    echo "2. 配置挖矿公钥"
    echo "3. 启动优化挖矿"
    echo "4. 查看实时日志"
    echo "5. 检查钱包余额"
    echo "6. 系统状态监控"
    echo "7. 备份钱包密钥"
    echo "8. 退出脚本"
    echo -e "${BLUE}=======================================${RESET}"
}

# 验证公钥格式
validate_pubkey() {
    local pubkey=$1
    # 检查128位十六进制格式
    if [[ $pubkey =~ ^[0-9a-fA-F]{128}$ ]]; then
        return 0
    # 检查Base58格式（大约44个字符）
    elif [[ $pubkey =~ ^[1-9A-HJ-NP-Za-km-z]{40,50}$ ]]; then
        return 0
    else
        print_message "$RED" "错误：公钥格式无效"
        print_message "$YELLOW" "支持的格式："
        print_message "$YELLOW" "- 128位十六进制字符串"
        print_message "$YELLOW" "- Base58编码格式（约44个字符）"
        return 1
    fi
}

# 安装系统依赖
install_dependencies() {
    print_message "$CYAN" "正在安装系统依赖..."
    
    # 检测系统类型
    if check_command "apt"; then
        # Ubuntu/Debian系统
        sudo apt update
        sudo apt install -y curl git build-essential clang llvm-dev libclang-dev \
            pkg-config libssl-dev wget screen htop
    elif check_command "yum"; then
        # CentOS/RHEL系统
        sudo yum update -y
        sudo yum groupinstall -y "Development Tools"
        sudo yum install -y curl git clang llvm-devel wget screen htop
    elif check_command "dnf"; then
        # Fedora系统
        sudo dnf update -y
        sudo dnf groupinstall -y "Development Tools"
        sudo dnf install -y curl git clang llvm-devel wget screen htop
    else
        print_message "$RED" "不支持的系统类型，请手动安装依赖"
        return 1
    fi
    
    print_message "$GREEN" "系统依赖安装完成"
}

# 安装Rust工具链
install_rust() {
    print_message "$CYAN" "正在安装Rust工具链..."
    
    if check_command "rustc"; then
        print_message "$YELLOW" "Rust已安装，版本: $(rustc --version)"
    else
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        source "$HOME/.cargo/env"
        print_message "$GREEN" "Rust安装完成"
    fi
    
    # 确保PATH包含cargo
    export PATH="$HOME/.cargo/bin:$PATH"
}

# 主安装函数
install_nockchain() {
    print_message "$GREEN" ">>> 开始安装Nockchain节点（从源码编译）..."
    log_message "开始Nockchain安装"
    
    # 检查系统要求
    print_message "$CYAN" "检查系统要求..."
    local total_ram=$(free -m | awk '/^Mem:/{print $2}')
    local cpu_cores=$(nproc)
    local available_space=$(df -m ~ | awk 'NR==2{print $4}')
    
    print_message "$YELLOW" "系统配置："
    print_message "$YELLOW" "- 内存: ${total_ram}MB"
    print_message "$YELLOW" "- CPU核心: ${cpu_cores}"
    print_message "$YELLOW" "- 可用空间: ${available_space}MB"
    
    if [ "$total_ram" -lt 8192 ]; then
        print_message "$RED" "警告：推荐内存至少8GB，当前仅${total_ram}MB"
        read -p "是否继续安装？(y/N): " continue_install
        if [[ ! "$continue_install" =~ ^[Yy]$ ]]; then
            return 1
        fi
    fi
    
    # 安装依赖
    install_dependencies || {
        print_message "$RED" "依赖安装失败"
        return 1
    }
    
    # 安装Rust
    install_rust || {
        print_message "$RED" "Rust安装失败"
        return 1
    }
    
    # 克隆仓库
    print_message "$CYAN" "正在克隆Nockchain仓库..."
    if [ -d "$NOCKCHAIN_DIR" ]; then
        print_message "$YELLOW" "发现现有安装，正在更新..."
        cd "$NOCKCHAIN_DIR"
        git pull origin main
    else
        git clone https://github.com/zorp-corp/nockchain.git "$NOCKCHAIN_DIR" || {
            print_message "$RED" "仓库克隆失败，请检查网络连接"
            return 1
        }
        cd "$NOCKCHAIN_DIR"
    fi
    
    # 复制环境配置文件
    print_message "$CYAN" "配置环境文件..."
    cp .env_example .env
    
    # 设置环境变量
    export RUST_MIN_STACK=8388608
    export PATH="$HOME/.cargo/bin:$PATH"
    
    # 编译安装hoonc编译器
    print_message "$CYAN" "正在安装hoonc编译器..."
    make install-hoonc || {
        print_message "$RED" "hoonc编译器安装失败"
        return 1
    }
    
    # 构建项目
    print_message "$CYAN" "正在构建Nockchain项目（此过程可能需要15-30分钟）..."
    make build || {
        print_message "$RED" "项目构建失败"
        return 1
    }
    
    # 安装钱包
    print_message "$CYAN" "正在安装Nockchain钱包..."
    make install-nockchain-wallet || {
        print_message "$RED" "钱包安装失败"
        return 1
    }
    
    # 安装主程序
    print_message "$CYAN" "正在安装Nockchain主程序..."
    make install-nockchain || {
        print_message "$RED" "主程序安装失败"
        return 1
    }
    
    # 生成钱包密钥
    print_message "$CYAN" "正在生成钱包密钥..."
    export PATH="$HOME/.cargo/bin:$PATH"
    
    # 创建钱包生成脚本
    cat > generate_wallet.sh << 'EOF'
#!/bin/bash
export PATH="$HOME/.cargo/bin:$PATH"
cd "$HOME/nockchain"
nockchain-wallet keygen
EOF
    chmod +x generate_wallet.sh
    
    # 执行钱包生成
    ./generate_wallet.sh > wallet_output.txt 2>&1
    
    if [ $? -eq 0 ]; then
        print_message "$GREEN" "钱包生成成功！"
        print_message "$YELLOW" "钱包信息："
        cat wallet_output.txt
        
        # 提取公钥并更新.env文件
        local pubkey=$(grep -E "Public key:" wallet_output.txt | awk '{print $3}' | head -1)
        if [ -n "$pubkey" ]; then
            sed -i "s/MINING_PUBKEY=.*/MINING_PUBKEY=$pubkey/" .env
            print_message "$GREEN" "公钥已自动配置到.env文件"
        fi
        
        # 备份钱包信息
        mkdir -p "$HOME/nockchain_backup"
        cp wallet_output.txt "$HOME/nockchain_backup/wallet_$(date +%Y%m%d_%H%M%S).txt"
        print_message "$GREEN" "钱包信息已备份到 $HOME/nockchain_backup/"
    else
        print_message "$RED" "钱包生成失败，请查看错误信息"
        cat wallet_output.txt
    fi
    
    # 清理临时文件
    rm -f generate_wallet.sh wallet_output.txt
    
    print_message "$GREEN" "Nockchain安装完成！"
    print_message "$YELLOW" "安装路径: $NOCKCHAIN_DIR"
    print_message "$YELLOW" "请妥善保存钱包信息，并记录助记词和私钥"
    
    log_message "Nockchain安装完成"
}

# 配置挖矿公钥
configure_mining_key() {
    print_message "$CYAN" ">>> 配置挖矿公钥"
    
    if [ ! -f "$NOCKCHAIN_DIR/.env" ]; then
        print_message "$RED" "错误：未找到.env配置文件，请先安装Nockchain"
        return 1
    fi
    
    print_message "$YELLOW" "当前配置的公钥："
    grep "MINING_PUBKEY" "$NOCKCHAIN_DIR/.env" | cut -d'=' -f2
    
    echo
    read -p "请输入新的挖矿公钥（128位十六进制或Base58格式）: " new_pubkey
    
    if validate_pubkey "$new_pubkey"; then
        cd "$NOCKCHAIN_DIR"
        sed -i "s/MINING_PUBKEY=.*/MINING_PUBKEY=$new_pubkey/" .env
        print_message "$GREEN" "挖矿公钥更新成功！"
        log_message "挖矿公钥已更新"
    else
        print_message "$RED" "公钥格式验证失败"
        return 1
    fi
}

# 启动挖矿节点
start_mining() {
    print_message "$GREEN" ">>> 启动优化挖矿节点..."
    
    if [ ! -f "$NOCKCHAIN_DIR/.env" ]; then
        print_message "$RED" "错误：未找到Nockchain安装，请先安装"
        return 1
    fi
    
    cd "$NOCKCHAIN_DIR"
    
    # 检查是否已在运行
    if screen -list | grep -q "nockchain"; then
        print_message "$YELLOW" "检测到已有挖矿进程在运行"
        read -p "是否重启挖矿节点？(y/N): " restart_choice
        if [[ "$restart_choice" =~ ^[Yy]$ ]]; then
            screen -S nockchain -X quit 2>/dev/null
            print_message "$YELLOW" "已停止现有挖矿进程"
        else
            return 0
        fi
    fi
    
    # 设置优化环境变量
    export RUST_MIN_STACK=8388608
    export RUST_LOG=info
    export PATH="$HOME/.cargo/bin:$PATH"
    
    # 清理旧的socket文件
    rm -f nockchain.sock
    
    # 在screen会话中启动挖矿
    screen -dmS nockchain bash -c "
        cd '$NOCKCHAIN_DIR'
        export RUST_MIN_STACK=8388608
        export RUST_LOG=info
        export PATH='$HOME/.cargo/bin:$PATH'
        source .env
        echo '启动时间: $(date)' > mining.log
        make run-nockchain 2>&1 | tee -a mining.log
    "
    
    sleep 3
    
    if screen -list | grep -q "nockchain"; then
        print_message "$GREEN" "挖矿节点启动成功！"
        print_message "$YELLOW" "使用以下命令管理挖矿进程："
        print_message "$YELLOW" "- 查看挖矿状态: screen -r nockchain"
        print_message "$YELLOW" "- 退出查看模式: Ctrl+A, 然后按D"
        print_message "$YELLOW" "- 停止挖矿: screen -S nockchain -X quit"
        log_message "挖矿节点启动成功"
    else
        print_message "$RED" "挖矿节点启动失败，请查看日志"
        return 1
    fi
}

# 查看实时日志
view_logs() {
    print_message "$GREEN" ">>> 显示挖矿日志（按Ctrl+C退出）"
    
    if [ -f "$NOCKCHAIN_DIR/mining.log" ]; then
        tail -f "$NOCKCHAIN_DIR/mining.log"
    else
        print_message "$YELLOW" "未找到日志文件，尝试连接到screen会话..."
        if screen -list | grep -q "nockchain"; then
            screen -r nockchain
        else
            print_message "$RED" "未找到运行中的挖矿进程"
        fi
    fi
}

# 检查钱包余额
check_balance() {
    print_message "$GREEN" ">>> 检查钱包余额"
    
    if [ ! -f "$NOCKCHAIN_DIR/.env" ]; then
        print_message "$RED" "错误：未找到Nockchain安装"
        return 1
    fi
    
    cd "$NOCKCHAIN_DIR"
    export PATH="$HOME/.cargo/bin:$PATH"
    
    # 获取公钥
    local pubkey=$(grep "MINING_PUBKEY" .env | cut -d'=' -f2)
    
    if [ -z "$pubkey" ] || [ "$pubkey" = "0000000000000000000000000000000000000000000000000000000000000000" ]; then
        print_message "$RED" "错误：未配置有效的挖矿公钥"
        return 1
    fi
    
    print_message "$CYAN" "正在查询余额，公钥: $pubkey"
    
    # 检查socket文件是否存在
    if [ -f "nockchain.sock" ]; then
        nockchain-wallet --nockchain-socket ./nockchain.sock list-notes-by-pubkey -p "$pubkey" 2>/dev/null || {
            print_message "$YELLOW" "无法连接到节点，请确保挖矿节点正在运行"
        }
    else
        print_message "$YELLOW" "节点未运行，无法查询余额"
        print_message "$YELLOW" "请先启动挖矿节点"
    fi
}

# 系统状态监控
system_monitor() {
    print_message "$BLUE" "====== 系统状态监控 ======"
    
    # CPU使用率
    local cpu_usage=$(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1)
    print_message "$YELLOW" "CPU使用率: ${cpu_usage}%"
    
    # 内存使用
    local mem_used=$(free -m | awk '/^Mem:/{print $3}')
    local mem_total=$(free -m | awk '/^Mem:/{print $2}')
    local mem_percent=$((mem_used * 100 / mem_total))
    print_message "$YELLOW" "内存使用: ${mem_used}MB / ${mem_total}MB (${mem_percent}%)"
    
    # 磁盘空间
    local disk_info=$(df -h ~ | awk 'NR==2{print $4" 可用，使用率 "$5}')
    print_message "$YELLOW" "磁盘空间: $disk_info"
    
    # 网络连接
    local network_connections=$(netstat -an 2>/dev/null | grep ESTABLISHED | wc -l)
    print_message "$YELLOW" "网络连接数: $network_connections"
    
    # 挖矿进程状态
    if screen -list | grep -q "nockchain"; then
        print_message "$GREEN" "挖矿状态: 正在运行"
        
        # 显示最近的挖矿日志
        if [ -f "$NOCKCHAIN_DIR/mining.log" ]; then
            print_message "$CYAN" "最近的挖矿日志："
            tail -n 5 "$NOCKCHAIN_DIR/mining.log" | while read -r line; do
                print_message "$YELLOW" "  $line"
            done
        fi
    else
        print_message "$RED" "挖矿状态: 未运行"
    fi
    
    echo
}

# 备份钱包密钥
backup_wallet() {
    print_message "$GREEN" ">>> 备份钱包密钥"
    
    if [ ! -f "$NOCKCHAIN_DIR/.env" ]; then
        print_message "$RED" "错误：未找到Nockchain安装"
        return 1
    fi
    
    cd "$NOCKCHAIN_DIR"
    export PATH="$HOME/.cargo/bin:$PATH"
    
    local backup_dir="$HOME/nockchain_backup"
    local backup_file="$backup_dir/keys_backup_$(date +%Y%m%d_%H%M%S).export"
    
    mkdir -p "$backup_dir"
    
    print_message "$CYAN" "正在导出钱包密钥..."
    if nockchain-wallet export-keys --output "$backup_file" 2>/dev/null; then
        print_message "$GREEN" "钱包密钥备份成功！"
        print_message "$YELLOW" "备份文件: $backup_file"
        print_message "$YELLOW" "请妥善保存此文件，它包含您的私钥信息"
        
        # 同时备份.env文件
        cp .env "$backup_dir/.env_$(date +%Y%m%d_%H%M%S).backup"
        print_message "$GREEN" "配置文件也已备份"
        
        log_message "钱包密钥已备份到 $backup_file"
    else
        print_message "$RED" "钱包密钥备份失败"
        return 1
    fi
}

# 主循环
main() {
    # 创建日志文件
    touch "$LOG_FILE"
    log_message "脚本启动"
    
    while true; do
        show_menu
        read -p "请输入选项编号（1-8）: " choice
        
        case $choice in
            1)
                install_nockchain
                ;;
            2)
                configure_mining_key
                ;;
            3)
                start_mining
                ;;
            4)
                view_logs
                ;;
            5)
                check_balance
                ;;
            6)
                system_monitor
                ;;
            7)
                backup_wallet
                ;;
            8)
                print_message "$GREEN" "感谢使用Nockchain优化脚本，再见！"
                log_message "脚本正常退出"
                exit 0
                ;;
            *)
                print_message "$RED" "无效选项，请输入1-8之间的数字"
                ;;
        esac
        
        echo
        read -p "按回车键继续..." -r
    done
}

# 检查是否以root用户运行
if [ "$EUID" -eq 0 ]; then
    print_message "$RED" "请不要以root用户运行此脚本"
    print_message "$YELLOW" "建议使用普通用户账户运行"
    exit 1
fi

# 启动主程序
main
