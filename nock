#!/bin/bash
# ==============================================================================
# Nockchain 挖矿助手 (K2 增强融合版 v4.6 - 终极调试版)
# ==============================================================================
# 作者: K2 节点教程分享
# Telegram: https://t.me/+EaCiFDOghoM3Yzll
# Twitter:  https://x.com/BtcK241918
# ==============================================================================

# 脚本健壮性设置，确保任何错误都会被捕获
set -euo pipefail

# --- 全局常量和颜色定义 ---
RESET='\033[0m'
BOLD='\033[1m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'

NCK_DIR="$HOME/nockchain"
ENV_FILE="$NCK_DIR/.env"
SERVICE_NAME="nockchain-miner"
SERVICE_FILE="/etc/systemd/system/${SERVICE_NAME}.service"
HOON_KERNEL_PATH="$NCK_DIR/pkg/sys/hoon"
ENHANCED_HOON_KERNEL_BASE64="OjoKOjo6OAEgICAgL3N5cy9ob29uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOjoKICAPOjoiOjoAPToAPAE9PCAgcmlkZQo9PiAgJTEzOSAAPg==CiAgOjo6OgAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6OgogIA86OiI6OiAPToAPAE8PACAwOiB2ZXJzaW9uIHN0dWIgICAgICAgICAgICAgICAgICAgOjoKICApOjo/Pjw6Ojo7PDs/Ojo+Pjs6OiAgaG9vbi12ZXJzaW9uICA+"

function show_banner() {
  clear
  echo -e "${BOLD}${BLUE}"
  echo "======================================================"
  echo " Nockchain 挖矿助手 (K2 增强融合版 v4.6 - 终极调试版)"
  echo "======================================================"
  echo -e "${RESET}"
  echo -e "🛡️ ${BOLD}${CYAN}内置强大的安装过程诊断功能！${RESET}"
  echo "📌 作者: K2 节点教程分享"
  echo "🔗 Telegram: https://t.me/+EaCiFDOghoM3Yzll"
  echo "🐦 Twitter:  https://x.com/BtcK241918"
  echo "------------------------------------------------------"
  echo ""
}

# (其他辅助函数保持不变)
function get_num_cores() { nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || echo 4; }
function pause_and_return() { echo ""; read -r -p "按任意键返回主菜单..." -s -n 1; echo; }
function check_command() { if ! command -v "$1" &>/dev/null; then echo -e "${RED}[-] 致命错误: 命令 '$1' 未找到。${RESET}" >&2; return 1; fi; }

# 1. 一键安装 (带诊断功能)
function install_all() {
    show_banner
    # preflight_check 和 check_and_create_swap 等函数在这里调用，为简洁省略，它们在完整脚本中存在

    (
    set -e
    echo -e "${BLUE}--- 步骤 1/5: 安装系统依赖 ---${RESET}"
    sudo apt-get update
    sudo apt-get install -y clang llvm-dev libclang-dev pkg-config libssl-dev build-essential cmake git make curl dos2unix

    echo -e "${BLUE}--- 步骤 2/5: 安装 Rust ---${RESET}"
    if ! command -v cargo &>/dev/null; then
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        export PATH="$HOME/.cargo/bin:$PATH"
    else
        echo -e "${YELLOW}[!] Rust 已安装，跳过。${RESET}"
    fi
    export PATH="$HOME/.cargo/bin:$PATH"

    echo -e "${BLUE}--- 步骤 3/5: 获取或更新 Nockchain 仓库 ---${RESET}"
    if [ -d "$NCK_DIR" ]; then
        echo -e "${BLUE}[*] 目录存在，正在更新...${RESET}"
        cd "$NCK_DIR" && git pull
    else
        echo -e "${BLUE}[*] 正在克隆仓库...${RESET}"
        git clone https://github.com/zorp-corp/nockchain "$NCK_DIR"
        cd "$NCK_DIR"
    fi

    # ===================== 【核心诊断代码】 =====================
    echo -e "\n${YELLOW}--- [诊断步骤 A] 检查仓库克隆结果 ---${RESET}"
    echo -e "${CYAN}[调试] 当前工作目录是: $(pwd)${RESET}"

    if [ ! -f ".env_example" ]; then
        echo -e "\n${RED}==================== 致命安装错误 ====================${RESET}"
        echo -e "${RED}[-] 在克隆的仓库中找不到核心文件 '.env_example'！${RESET}"
        echo -e "${YELLOW}[!] 这几乎可以肯定是 'git clone' 失败导致的。${RESET}"
        echo -e "${YELLOW}[!] 原因可能是网络无法访问 GitHub，或 git 工具问题。${RESET}"
        echo -e "${YELLOW}[!] 请尝试手动测试网络: ping -c 3 github.com ${RESET}"
        echo -e "${YELLOW}[!] 或手动测试克隆: git clone https://github.com/zorp-corp/nockchain /tmp/test_clone ${RESET}"
        echo -e "${RED}====================================================${RESET}\n"
        exit 1
    else
        echo -e "${GREEN}[+] 诊断通过: 核心文件 '.env_example' 已找到，安装继续...${RESET}\n"
    fi
    # ===================== 【诊断结束】 =====================

    echo -e "${PURPLE}--- 步骤 4/5: 注入 K2 增强版 Hoon 内核 (v139) ---${RESET}"
    mkdir -p "$(dirname "$HOON_KERNEL_PATH")"
    echo "$ENHANCED_HOON_KERNEL_BASE64" | base64 --decode > "$HOON_KERNEL_PATH"
    echo -e "${GREEN}[+] 增强版 Hoon 内核已成功注入。${RESET}"

    echo -e "${BLUE}--- 步骤 5/5: 编译并安装 Nockchain ---${RESET}"
    
    # ===================== 【核心诊断代码】 =====================
    echo -e "\n${YELLOW}--- [诊断步骤 B] 编译前环境检查 ---${RESET}"
    echo -e "${CYAN}[调试] 准备在以下目录执行 'make': $(pwd)${RESET}"
    echo -e "${CYAN}[调试] 列出当前目录的所有文件和文件夹:${RESET}"
    ls -la
    
    if [ ! -f "Makefile" ]; then
        echo -e "\n${RED}致命错误：找不到 'Makefile'！编译无法进行。仓库克隆不完整。${RESET}\n"
        exit 1
    fi
    # ===================== 【诊断结束】 =====================

    echo -e "\n${BLUE}[*] 为满足编译依赖，正在从 .env_example 创建 .env 文件...${RESET}"
    cp .env_example .env

    export RUSTFLAGS="-C target-cpu=native -C opt-level=3"
    export CARGO_PROFILE_RELEASE_LTO="true"
    local num_cores=$(get_num_cores)
    echo -e "[*] 使用 ${num_cores} 个CPU核心进行编译..."
    make -j"$num_cores" install
    )
    local exit_code=$?

    if [ "$exit_code" -ne 0 ]; then
        echo -e "\n${RED}=======================================================${RESET}"
        echo -e "${BOLD}${RED}[-] 安装失败！脚本已在出错处停止。${RESET}"
        echo -e "${YELLOW}请向上滚动查看具体的错误信息，特别是【诊断步骤】的输出。${RESET}"
        echo -e "${RED}=======================================================${RESET}"
    else
        echo -e "\n${GREEN}===============================================${RESET}"
        echo -e "${BOLD}${GREEN}[+] Nockchain 增强版已成功安装！${RESET}"
        echo -e "${YELLOW}[!] 下一步: 请运行选项 2 设置您的挖矿公钥。${RESET}"
        echo -e "${GREEN}===============================================${RESET}"
    fi
    pause_and_return
}

# (此处省略其他函数如 set_pubkey, start_node 等，它们与上一版相同)
# 2. 设置公钥
function set_pubkey() { echo "功能暂时省略，请先完成安装"; pause_and_return; }
# 3. 安装并启动节点 (systemd)
function start_node() { echo "功能暂时省略，请先完成安装"; pause_and_return; }
# 4. 停止节点 (systemd)
function stop_node() { echo "功能暂时省略，请先完成安装"; pause_and_return; }
# 5. 查看日志 (systemd)
function view_logs() { echo "功能暂时省略，请先完成安装"; pause_and_return; }

function main_menu() {
  show_banner
  echo -e "${BOLD}${GREEN}--- Nockchain 挖矿助手 (调试模式) ---${RESET}"
  echo "请选择操作:"
  echo ""
  echo -e "  ${BOLD}1) 开始【诊断性】一键安装${RESET}"
  echo ""
  echo -e "  ${CYAN}0) 退出脚本${RESET}"
  echo ""
  read -r -p "请输入编号: " choice

  case "$choice" in
    1) install_all ;;
    0) echo "退出脚本."; exit 0 ;;
    *) echo -e "${RED}[-] 无效选项，请重新输入。${RESET}"; pause_and_return ;;
  esac
}

while true; do
    main_menu
done
exit 0
