#!/bin/bash

# ========= Nockchain 目录安全修复版脚本 v14.3 =========
RESET='\033[0m'
BOLD='\033[1m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
CYAN='\033[0;36m'
PURPLE='\033[0;35m'

NCK_DIR="$HOME/nockchain"
ENV_FILE="$NCK_DIR/.env"
LOG_FILE="$HOME/nockchain_build.log"
HOONC_LOG="$HOME/nockchain_hoonc.log"
NODE_LOG="$HOME/nockchain_node.log"

function show_banner() {
  clear
  echo -e "${BOLD}${CYAN}"
  echo "======================================================"
  echo "   Nockchain 目录安全修复版脚本 v14.3"
  echo "======================================================"
  echo -e "${RESET}"
  echo "🎯 目录安全: 自动检查和创建项目目录"
  echo "💾 内存优化: 基于社区反馈，支持大内存需求"
  echo "🔧 全面修复: 解决所有已知的构建和启动问题"
  echo "📊 智能诊断: 详细错误分析和解决建议"
  echo "🚀 完整管理: 从安装到运行的一站式解决方案"
  echo "------------------------------------------------------"
  echo ""
}

# ========= 关键：目录安全检查函数 =========
function ensure_nockchain_directory() {
  # 检查nockchain目录是否存在
  if [ ! -d "$NCK_DIR" ]; then
    echo -e "${YELLOW}[!] Nockchain项目目录不存在: $NCK_DIR${RESET}"
    echo -e "${BLUE}[i] 可能的原因:${RESET}"
    echo "  - 项目尚未克隆"
    echo "  - 克隆过程失败"
    echo "  - 目录被意外删除"
    echo ""
    
    read -p "是否要自动克隆Nockchain项目? (Y/n): " clone_choice
    
    if [[ "$clone_choice" =~ ^[Nn]$ ]]; then
      echo -e "${YELLOW}[!] 无法继续，需要Nockchain项目目录${RESET}"
      return 1
    else
      echo -e "[*] 自动克隆Nockchain项目..."
      clone_nockchain_project
      return $?
    fi
  else
    echo -e "${GREEN}[+] Nockchain项目目录存在${RESET}"
    return 0
  fi
}

function safe_cd_nockchain() {
  if ! ensure_nockchain_directory; then
    echo -e "${RED}[-] 无法访问Nockchain目录${RESET}"
    pause_and_return
    return 1
  fi
  
  cd "$NCK_DIR" || {
    echo -e "${RED}[-] 无法进入目录: $NCK_DIR${RESET}"
    pause_and_return
    return 1
  }
  
  return 0
}

# ========= 克隆项目函数 =========
function clone_nockchain_project() {
  echo -e "[*] 克隆Nockchain项目..."
  
  cd "$HOME" || return 1
  
  # 清理可能存在的残留
  if [ -d "nockchain" ]; then
    echo -e "[*] 清理旧的项目残留..."
    rm -rf nockchain
  fi
  
  # 克隆项目（基于搜索结果中的官方仓库）
  if git clone --depth 1 https://github.com/zorp-corp/nockchain; then
    echo -e "${GREEN}[+] 项目克隆成功${RESET}"
    
    cd nockchain || return 1
    
    # 创建基本配置
    if [ -f ".env_example" ]; then
      cp .env_example .env
    else
      cat > .env << 'EOF'
MINING_PUBKEY=
RUST_LOG=info
EOF
    fi
    
    # 创建必需的资产文件（修复资产文件缺失问题）
    echo -e "[*] 创建必需的资产文件..."
    mkdir -p assets
    touch assets/wal.jam
    touch assets/dumb.jam
    touch assets/miner.jam
    
    # 创建必要目录
    mkdir -p .socket test-leader logs
    chmod 755 .socket test-leader
    
    echo -e "${GREEN}[+] 项目初始化完成${RESET}"
    return 0
  else
    echo -e "${RED}[-] 项目克隆失败${RESET}"
    echo -e "${BLUE}[i] 请检查网络连接和Git配置${RESET}"
    return 1
  fi
}

# ========= 系统环境优化（基于社区反馈） =========
function optimize_system_complete() {
  echo -e "[*] 系统环境优化（基于社区经验）..."
  
  total_mem_kb=$(grep MemTotal /proc/meminfo | awk '{print $2}')
  total_mem_gb=$((total_mem_kb / 1024 / 1024))
  
  echo -e "${BLUE}[i] 系统内存: ${total_mem_gb}GB${RESET}"
  
  # 基于社区反馈，Nockchain需要大量内存[5]
  if [ $total_mem_gb -lt 16 ]; then
    echo -e "${RED}[-] 警告: 内存不足！${RESET}"
    echo -e "${YELLOW}[!] 社区反馈显示Nockchain至少需要16GB内存${RESET}"
    echo -e "${YELLOW}[!] 有用户报告即使64GB也可能遇到mem.rs错误${RESET}"
    
    required_swap=$((32 - total_mem_gb))
    if [ $required_swap -gt 0 ]; then
      echo -e "[*] 配置${required_swap}GB大容量swap..."
      sudo fallocate -l ${required_swap}G /swapfile-nockchain-mega 2>/dev/null || \
      sudo dd if=/dev/zero of=/swapfile-nockchain-mega bs=1G count=$required_swap 2>/dev/null
      
      sudo chmod 600 /swapfile-nockchain-mega
      sudo mkswap /swapfile-nockchain-mega >/dev/null 2>&1
      sudo swapon /swapfile-nockchain-mega >/dev/null 2>&1
      echo -e "${GREEN}[+] ${required_swap}GB Swap已配置${RESET}"
    fi
  fi
  
  # 系统参数优化
  sudo sysctl -w vm.overcommit_memory=1 >/dev/null 2>&1 || true
  sudo sysctl -w vm.max_map_count=2097152 >/dev/null 2>&1 || true
  sudo sysctl -w vm.dirty_ratio=5 >/dev/null 2>&1 || true
  sudo sysctl -w vm.swappiness=10 >/dev/null 2>&1 || true
  
  echo -e "${GREEN}[+] 系统优化完成${RESET}"
}

function install_complete_dependencies() {
  echo -e "[*] 安装完整构建依赖（基于社区经验）..."
  
  # 基于社区反馈[5]，需要安装build-essential和clang
  sudo apt-get update -y && sudo apt-get upgrade -y
  
  sudo apt install -y \
    build-essential \
    gcc g++ clang llvm llvm-dev libclang-dev \
    cmake make ninja-build autoconf automake libtool \
    curl git wget unzip tar gzip \
    pkg-config pkgconf \
    libssl-dev openssl \
    python3 python3-dev python3-pip \
    libffi-dev zlib1g-dev libbz2-dev \
    libreadline-dev libsqlite3-dev libncurses5-dev \
    xz-utils tk-dev libgdbm-dev liblzma-dev uuid-dev \
    screen htop jq bc time strace \
    net-tools lld \
    valgrind gdb
  
  # 验证关键工具
  for tool in gcc g++ clang cmake make pkg-config git; do
    if command -v "$tool" >/dev/null 2>&1; then
      echo -e "${GREEN}[+] $tool: 已安装${RESET}"
    else
      echo -e "${RED}[-] $tool: 未安装${RESET}"
      return 1
    fi
  done
  
  # 基于社区建议设置环境变量
  export CC=clang
  export CXX=clang++
  export CARGO_BUILD_JOBS=1
  
  echo -e "${GREEN}[+] 完整依赖安装完成${RESET}"
}

# ========= Rust环境配置（社区方案） =========
function setup_rust_complete() {
  echo -e "[*] Rust环境配置（基于社区方案）..."
  
  pkill -f cargo 2>/dev/null || true
  pkill -f rustc 2>/dev/null || true
  sleep 3
  
  # 基于社区反馈的Rust安装方法[5]
  if ! command -v rustc >/dev/null 2>&1; then
    echo -e "[*] 安装Rust（社区推荐方法）..."
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
    source "$HOME/.cargo/env"
  else
    echo -e "[*] 更新现有Rust..."
    source "$HOME/.cargo/env"
    rustup update stable
  fi
  
  export PATH="$HOME/.cargo/bin:$PATH"
  
  # 配置Cargo以减少内存使用
  mkdir -p "$HOME/.cargo"
  cat > "$HOME/.cargo/config.toml" << 'EOF'
[build]
jobs = 1

[net]
retry = 30
timeout = 900

[env]
CC = "clang"
CXX = "clang++"

[profile.release]
opt-level = 1
debug = false
debug-assertions = false
overflow-checks = false
lto = false
panic = "abort"
incremental = false
codegen-units = 1

[profile.dev]
opt-level = 0
debug = false
debug-assertions = false
overflow-checks = false
incremental = false
codegen-units = 1

[target.x86_64-unknown-linux-gnu]
linker = "clang"
EOF
  
  if command -v cargo >/dev/null 2>&1 && command -v rustc >/dev/null 2>&1; then
    echo -e "${GREEN}[+] Rust环境配置完成${RESET}"
    echo -e "${GREEN}[+] Rust: $(rustc --version)${RESET}"
    echo -e "${GREEN}[+] Cargo: $(cargo --version)${RESET}"
    return 0
  else
    echo -e "${RED}[-] Rust环境配置失败${RESET}"
    return 1
  fi
}

# ========= 完整构建流程（使用make命令） =========
function build_all_components_complete() {
  echo -e "[*] 完整构建所有组件..."
  
  if ! safe_cd_nockchain; then
    return 1
  fi
  
  source "$HOME/.cargo/env"
  export PATH="$HOME/.cargo/bin:$PATH"
  export CC=clang
  export CXX=clang++
  export CARGO_BUILD_JOBS=1
  export RUSTFLAGS="-C opt-level=1 -C debuginfo=0 -C panic=abort"
  
  echo -e "[*] 清理构建缓存..."
  cargo clean >/dev/null 2>&1 || true
  rm -rf target/ 2>/dev/null || true
  
  echo -e "[*] 更新项目依赖..."
  timeout 600 cargo update >>"$LOG_FILE" 2>&1 || true
  
  build_success=0
  
  # 使用社区推荐的make命令[2]
  echo -e "[*] 使用make命令构建（社区推荐）..."
  
  # 检查Makefile
  if [ -f "Makefile" ]; then
    echo -e "${GREEN}[+] 发现Makefile，使用make命令构建${RESET}"
    
    # 构建主要组件
    for target in "build" "install-hoonc" "install-nockchain"; do
      echo -e "[*] 执行: make $target"
      if timeout 3600 make "$target" >>"$LOG_FILE" 2>&1; then
        echo -e "${GREEN}[+] make $target 成功${RESET}"
        ((build_success++))
      else
        echo -e "${YELLOW}[!] make $target 失败，尝试其他方法...${RESET}"
      fi
    done
  else
    echo -e "${YELLOW}[!] 未发现Makefile，使用cargo构建...${RESET}"
    # 回退到cargo构建
    build_with_cargo
  fi
  
  # 设置PATH
  export PATH="$HOME/.cargo/bin:$PATH"
  
  # 检查构建结果
  echo -e "[*] 检查构建结果..."
  component_count=0
  
  for binary in "hoonc" "nockchain-wallet" "nockchain"; do
    if command -v "$binary" >/dev/null 2>&1; then
      binary_path=$(command -v "$binary")
      binary_size=$(du -h "$binary_path" 2>/dev/null | cut -f1 || echo "unknown")
      echo -e "${GREEN}  ✓ $binary: $binary_path (大小: $binary_size)${RESET}"
      ((component_count++))
    else
      echo -e "${RED}  ✗ $binary: 未找到${RESET}"
    fi
  done
  
  echo -e "${BLUE}[i] 成功构建: $component_count/3 个组件${RESET}"
  
  if [ $component_count -ge 2 ]; then
    echo -e "${GREEN}[+] 构建成功！${RESET}"
    return 0
  else
    echo -e "${YELLOW}[!] 部分构建失败${RESET}"
    return 1
  fi
}

function build_with_cargo() {
  echo -e "[*] 使用cargo构建组件..."
  
  # 构建各个组件
  for component in "hoonc" "nockchain-wallet" "nockchain"; do
    echo -e "[*] 构建 $component..."
    if timeout 3600 cargo build -p "$component" >>"$LOG_FILE" 2>&1; then
      echo -e "${GREEN}[+] $component 构建成功${RESET}"
      
      # 尝试安装
      if [ -f "target/debug/$component" ]; then
        mkdir -p "$HOME/.cargo/bin"
        cp "target/debug/$component" "$HOME/.cargo/bin/"
        chmod +x "$HOME/.cargo/bin/$component"
      fi
    else
      echo -e "${YELLOW}[!] $component 构建失败${RESET}"
    fi
  done
}

# ========= 完整安装流程 =========
function complete_installation_process() {
  echo -e "[*] 开始Nockchain完整安装流程..."
  
  echo "=== Nockchain完整安装日志 $(date) ===" > "$LOG_FILE"
  
  echo -e "${BLUE}[i] 步骤1/5: 系统优化...${RESET}"
  optimize_system_complete
  
  echo -e "${BLUE}[i] 步骤2/5: 安装依赖...${RESET}"
  if ! install_complete_dependencies; then
    echo -e "${RED}[-] 依赖安装失败${RESET}"
    pause_and_return
    return
  fi
  
  echo -e "${BLUE}[i] 步骤3/5: 配置Rust环境...${RESET}"
  if ! setup_rust_complete; then
    echo -e "${RED}[-] Rust环境配置失败${RESET}"
    pause_and_return
    return
  fi
  
  echo -e "${BLUE}[i] 步骤4/5: 准备项目...${RESET}"
  if ! clone_nockchain_project; then
    echo -e "${RED}[-] 项目准备失败${RESET}"
    pause_and_return
    return
  fi
  
  echo -e "${BLUE}[i] 步骤5/5: 构建组件...${RESET}"
  if build_all_components_complete; then
    echo -e "${GREEN}[+] ✅ Nockchain完整安装成功！${RESET}"
    echo -e "${BLUE}[i] 所有组件已构建完成${RESET}"
    echo -e "${BLUE}[i] 下一步: 生成钱包和设置挖矿公钥${RESET}"
    echo -e "${BLUE}[i] 详细日志: $LOG_FILE${RESET}"
  else
    echo -e "${YELLOW}[!] 安装部分成功${RESET}"
    echo -e "${BLUE}[i] 查看诊断信息获取详情${RESET}"
  fi
  
  pause_and_return
}

# ========= 钱包管理功能（安全版） =========
function generate_wallet() {
  echo -e "[*] 生成钱包..."
  
  if ! safe_cd_nockchain; then
    return
  fi
  
  source "$HOME/.cargo/env" 2>/dev/null || true
  export PATH="$HOME/.cargo/bin:$PATH"
  
  wallet_bin=""
  if command -v nockchain-wallet >/dev/null 2>&1; then
    wallet_bin="nockchain-wallet"
  elif [ -f "target/debug/nockchain-wallet" ]; then
    wallet_bin="./target/debug/nockchain-wallet"
  elif [ -f "target/release/nockchain-wallet" ]; then
    wallet_bin="./target/release/nockchain-wallet"
  fi
  
  if [ -z "$wallet_bin" ]; then
    echo -e "${RED}[-] 未找到nockchain-wallet程序${RESET}"
    echo -e "${YELLOW}[!] 请先完成构建${RESET}"
    pause_and_return
    return
  fi
  
  echo -e "${GREEN}[+] 使用钱包: $wallet_bin${RESET}"
  
  if ! "$wallet_bin" keygen 2>/dev/null; then
    echo -e "${YELLOW}[!] 钱包生成可能有问题，尝试debug模式...${RESET}"
    RUST_LOG=debug "$wallet_bin" keygen
  fi
  
  echo -e "${YELLOW}[!] 请复制上方的公钥${RESET}"
  echo -e "${BLUE}[i] 公钥格式：128位16进制${RESET}"
  pause_and_return
}

function set_mining_pubkey() {
  echo -e "[*] 设置挖矿公钥..."
  
  if ! safe_cd_nockchain; then
    return
  fi

  echo -e "${BLUE}[i] 公钥格式：128位16进制字符串${RESET}"
  echo ""
  
  while true; do
    read -p "请输入公钥: " pubkey
    
    if [ -z "$pubkey" ]; then
      echo -e "${RED}[-] 公钥不能为空${RESET}"
      continue
    fi
    
    pubkey=$(echo "$pubkey" | tr -d ' \n\r\t' | tr '[:upper:]' '[:lower:]')
    
    if [ ${#pubkey} -eq 128 ] && [[ "$pubkey" =~ ^[0-9a-f]{128}$ ]]; then
      sed -i '/^MINING_PUBKEY=/d' "$ENV_FILE" 2>/dev/null || true
      echo "MINING_PUBKEY=$pubkey" >> "$ENV_FILE"
      echo -e "${GREEN}[+] 公钥已写入.env文件${RESET}"
      break
    else
      echo -e "${YELLOW}[!] 公钥格式错误，请重新输入${RESET}"
    fi
  done
  
  pause_and_return
}

# ========= 节点启动修复（安全版） =========
function fix_and_start_node() {
  echo -e "[*] 修复并启动节点..."
  
  if ! safe_cd_nockchain; then
    return
  fi
  
  if [ ! -f "$ENV_FILE" ]; then
    echo -e "${RED}[-] .env文件不存在${RESET}"
    pause_and_return
    return
  fi
  
  source "$ENV_FILE"
  if [ -z "$MINING_PUBKEY" ]; then
    echo -e "${RED}[-] 未设置挖矿公钥${RESET}"
    pause_and_return
    return
  fi
  
  echo -e "[*] 清理启动环境..."
  pkill -f nockchain 2>/dev/null || true
  screen -XS nockchain quit 2>/dev/null || true
  
  find . -name "*.sock" -delete 2>/dev/null || true
  find /tmp -name "*nockchain*.sock" -delete 2>/dev/null || true
  
  if netstat -tlnp 2>/dev/null | grep -q ":3006 "; then
    pid=$(netstat -tlnp 2>/dev/null | grep ":3006 " | awk '{print $7}' | cut -d'/' -f1 | head -1)
    if [ -n "$pid" ] && [ "$pid" != "-" ]; then
      kill -9 "$pid" 2>/dev/null || true
    fi
  fi
  
  sleep 5
  
  mkdir -p .socket test-leader
  chmod 755 .socket test-leader
  
  source "$HOME/.cargo/env" 2>/dev/null || true
  export PATH="$HOME/.cargo/bin:$PATH"
  
  node_bin=""
  if command -v nockchain >/dev/null 2>&1; then
    node_bin="nockchain"
  elif [ -f "target/debug/nockchain" ]; then
    node_bin="./target/debug/nockchain"
  elif [ -f "target/release/nockchain" ]; then
    node_bin="./target/release/nockchain"
  else
    echo -e "${RED}[-] 未找到节点程序${RESET}"
    pause_and_return
    return
  fi
  
  start_cmd="RUST_LOG=info $node_bin --mining-pubkey $MINING_PUBKEY \
--mine \
--peer /ip4/95.216.102.60/udp/3006/quic-v1 \
--peer /ip4/65.109.156.108/udp/3006/quic-v1 \
--peer /ip4/65.21.67.175/udp/3006/quic-v1 \
--peer /ip4/65.109.156.172/udp/3006/quic-v1 \
--peer /ip4/34.174.22.166/udp/3006/quic-v1 \
--npc-socket .socket/nockchain.sock \
--bind /ip4/0.0.0.0/udp/3006/quic-v1"
  
  if command -v screen >/dev/null 2>&1; then
    screen -dmS nockchain bash -c "cd '$NCK_DIR' && $start_cmd 2>&1 | tee '$NODE_LOG'"
    sleep 5
    
    if screen -list | grep -qw "nockchain"; then
      echo -e "${GREEN}[+] 节点启动成功 (screen: nockchain)${RESET}"
      echo -e "${BLUE}[i] 使用 'screen -r nockchain' 查看日志${RESET}"
    else
      echo -e "${RED}[-] 节点启动失败${RESET}"
    fi
  else
    nohup bash -c "$start_cmd" > "$NODE_LOG" 2>&1 &
    echo -e "${GREEN}[+] 节点已后台启动${RESET}"
  fi
  
  pause_and_return
}

# ========= 状态检查（安全版） =========
function check_complete_status() {
  echo -e "[*] 检查完整系统状态..."
  
  # 首先检查目录状态
  echo -e "${BLUE}[i] 目录状态:${RESET}"
  if [ -d "$NCK_DIR" ]; then
    echo -e "  ✓ 项目目录存在: $NCK_DIR"
  else
    echo -e "  ✗ 项目目录不存在: $NCK_DIR"
    echo -e "${YELLOW}[!] 请先运行完整安装${RESET}"
    pause_and_return
    return
  fi
  
  cd "$NCK_DIR" || return 1
  
  echo -e "${BLUE}[i] 配置状态:${RESET}"
  if [ -f "$ENV_FILE" ]; then
    source "$ENV_FILE" >/dev/null 2>&1
    if [ -n "$MINING_PUBKEY" ]; then
      echo -e "  ✓ 挖矿公钥: ${MINING_PUBKEY:0:16}...${MINING_PUBKEY: -16}"
    else
      echo -e "  ✗ 挖矿公钥未设置"
    fi
  else
    echo -e "  ✗ .env文件不存在"
  fi
  
  echo -e "${BLUE}[i] 组件状态:${RESET}"
  component_count=0
  
  for binary in "hoonc" "nockchain-wallet" "nockchain"; do
    if command -v "$binary" >/dev/null 2>&1; then
      binary_path=$(command -v "$binary")
      binary_size=$(du -h "$binary_path" 2>/dev/null | cut -f1 || echo "unknown")
      echo -e "  ✓ $binary: $binary_size"
      ((component_count++))
    else
      echo -e "  ✗ $binary: 未找到"
    fi
  done
  
  echo -e "${BLUE}[i] 构建状态: $component_count/3 组件成功${RESET}"
  
  echo -e "${BLUE}[i] 节点状态:${RESET}"
  if command -v screen >/dev/null 2>&1 && screen -list | grep -qw "nockchain"; then
    echo -e "  ✓ 节点运行中 (screen)"
  elif pgrep -f "nockchain" >/dev/null 2>&1; then
    echo -e "  ✓ 节点运行中 (进程)"
  else
    echo -e "  ✗ 节点未运行"
  fi
  
  echo -e "${BLUE}[i] 系统资源:${RESET}"
  echo -e "  内存: $(free -h | grep Mem | awk '{print $3"/"$2}')"
  echo -e "  Swap: $(free -h | grep Swap | awk '{print $3"/"$2}')"
  echo -e "  磁盘: $(df -h . | tail -1 | awk '{print $3"/"$2" ("$5" used)"}')"
  
  if [ $component_count -eq 3 ]; then
    echo -e "${GREEN}[+] ✅ 系统状态良好，所有组件就绪！${RESET}"
  else
    echo -e "${YELLOW}[!] 部分组件缺失，需要重新构建${RESET}"
  fi
  
  pause_and_return
}

# ========= 清理重建（安全版） =========
function cleanup_and_rebuild() {
  echo -e "[*] 清理环境并重新构建..."
  
  pkill -f cargo 2>/dev/null || true
  pkill -f rustc 2>/dev/null || true
  pkill -f nockchain 2>/dev/null || true
  sleep 3
  
  if [ -d "$NCK_DIR" ]; then
    cd "$NCK_DIR"
    cargo clean >/dev/null 2>&1 || true
    rm -rf target/ 2>/dev/null || true
  fi
  rm -rf ~/.cargo/registry/cache/ 2>/dev/null || true
  
  sync
  sudo sysctl -w vm.drop_caches=3 >/dev/null 2>&1 || true
  
  echo -e "${GREEN}[+] 环境清理完成${RESET}"
  echo -e "[*] 开始重新构建..."
  
  if [ -d "$NCK_DIR" ]; then
    build_all_components_complete
  else
    echo -e "${RED}[-] 项目目录不存在，请先运行完整安装${RESET}"
  fi
  
  pause_and_return
}

function view_node_logs() {
  if command -v screen >/dev/null 2>&1 && screen -list | grep -qw "nockchain"; then
    echo -e "${YELLOW}[!] 进入screen日志查看 (Ctrl+A+D 退出)...${RESET}"
    screen -r nockchain
  elif [ -f "$NODE_LOG" ]; then
    echo -e "${YELLOW}[!] 显示节点日志:${RESET}"
    tail -f "$NODE_LOG"
  else
    echo -e "${RED}[-] 无日志文件${RESET}"
  fi
  pause_and_return
}

function stop_all_services() {
  echo -e "[*] 停止所有Nockchain服务..."
  
  if command -v screen >/dev/null 2>&1 && screen -list | grep -qw "nockchain"; then
    screen -S nockchain -X quit >/dev/null 2>&1
    echo -e "${GREEN}[+] Screen会话已终止${RESET}"
  fi
  
  for process in "nockchain" "nockchain-wallet" "hoonc"; do
    if pgrep -f "$process" >/dev/null 2>&1; then
      pkill -f "$process" >/dev/null 2>&1
      echo -e "${GREEN}[+] $process 进程已终止${RESET}"
    fi
  done
  
  if [ -d "$NCK_DIR" ]; then
    cd "$NCK_DIR"
    find . -name "*.sock" -delete 2>/dev/null || true
  fi
  
  sleep 3
  echo -e "${GREEN}[+] 所有服务已停止${RESET}"
  pause_and_return
}

function pause_and_return() {
  echo ""
  read -n1 -r -p "按任意键返回主菜单..." key
  main_menu
}

# ========= 主菜单 =========
function main_menu() {
  show_banner
  echo "请选择操作:"
  echo ""
  echo "🚀 安装和构建:"
  echo "  1) 🎯 完整安装 (从零开始，包含目录检查)"
  echo "  2) 🔧 重新构建所有组件"
  echo "  3) 🧹 清理环境并重建"
  echo ""
  echo "🔑 钱包管理:"
  echo "  4) 🔑 生成新钱包"
  echo "  5) 📝 设置挖矿公钥"
  echo ""
  echo "⚡ 节点管理:"
  echo "  6) ⚡ 修复并启动节点"
  echo "  7) 📊 查看节点日志"
  echo "  8) ⏹️  停止所有服务"
  echo ""
  echo "🔍 状态和诊断:"
  echo "  9) 🔍 检查完整状态"
  echo ""
  echo "  0) 退出脚本"
  echo ""
  echo -e "${CYAN}💡 目录安全版: 自动检查和修复目录问题${RESET}"
  echo -e "${CYAN}💡 基于社区经验: 优化内存使用和构建流程${RESET}"
  echo ""
  read -p "请输入编号 (0-9): " choice

  case "$choice" in
    1) complete_installation_process ;;
    2) 
      if ensure_nockchain_directory; then
        build_all_components_complete
        pause_and_return
      fi
      ;;
    3) cleanup_and_rebuild ;;
    4) generate_wallet ;;
    5) set_mining_pubkey ;;
    6) fix_and_start_node ;;
    7) view_node_logs ;;
    8) stop_all_services ;;
    9) check_complete_status ;;
    0) echo "退出脚本."; exit 0 ;;
    *) echo -e "${RED}[-] 无效选项，请输入0-9${RESET}"; pause_and_return ;;
  esac
}

# 检查用户权限
if [ "$EUID" -eq 0 ]; then
  echo -e "${RED}[-] 请不要以root用户运行此脚本${RESET}"
  exit 1
fi

# 启动主菜单
main_menu
