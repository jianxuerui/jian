#!/usr/bin/env bash
# Ethminer 矿工专业工具 v9.2 (兼容性与健壮性增强版)
# 策略：修正了 v9.1 中因 shebang 与脚本内容不匹配导致的兼容性问题。
#      将解释器明确指定为 bash，以支持 pipefail 等高级特性。
#      同时优化了编辑器选择逻辑和变量引用的健壮性。

set -euo pipefail
IFS=$'\n\t' # 更加标准的 IFS 设置

# --- 全局配置 ---
CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/ethminer-tool"
CACHE_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/ethminer-tool"
REPO_PATH="$HOME/ethminer"

LOG_FILE="$CACHE_DIR/miner.log"
CONFIG_FILE="$CONFIG_DIR/ethminer.conf"
PID_FILE="$CACHE_DIR/miner.pid"

# --- 动态命令配置 ---
SUDO_CMD=""
if [ "$(id -u)" -ne 0 ]; then
  SUDO_CMD="sudo"
fi

# --- 环境与依赖 ---

get_cpu_cores() {
  case "$(uname -s)" in
    Linux*)  nproc 2>/dev/null || echo "2" ;;
    *)       echo "2" ;;
  esac
}

init_environment() {
  mkdir -p "$CONFIG_DIR" "$CACHE_DIR"
  if [ ! -f "$CONFIG_FILE" ]; then
    echo "▶ 首次运行，正在创建默认配置文件..."
    cat > "$CONFIG_FILE" <<EOF
# ethminer 配置文件
MINING_ADDRESS="0x0000000000000000000000000000000000000000"
POOL_URL="stratum+tcp://etc.2miners.com:1010"
WORKER_NAME="myrig1"
EOF
    echo "✔ 默认配置已创建于: $CONFIG_FILE"
    echo "请务必通过菜单选项 '2' 或 '3' 修改您的挖矿地址和矿池！"
    sleep 3
  fi
}

# --- 编译与安装核心流程 (终极版) ---
install_ethminer() {
  PKG_MANAGER=""
  while [ -z "$PKG_MANAGER" ]; do
    clear; echo "为正确安装依赖，请选择您的操作系统包管理器："; echo "-----------------------------------------------"; echo "  1) apt (适用于 Debian, Ubuntu 等)"; echo "  2) dnf/yum (适用于 Fedora, CentOS, RHEL)"; echo "-----------------------------------------------"; printf "请输入您的选择 [1-2]: "; read -r sys_choice
    case $sys_choice in 1) PKG_MANAGER="apt" ;; 2) PKG_MANAGER="dnf" ;; *) echo "输入无效。" && sleep 1 ;; esac
  done

  echo "✔ 系统选择完成: $PKG_MANAGER"
  
  echo "▶ 步骤 1/5: 安装基础编译工具..."
  case "$PKG_MANAGER" in
    apt)
      $SUDO_CMD apt-get update
      $SUDO_CMD apt-get install -y git cmake build-essential curl sha1sum
      ;;
    dnf)
      # dnf 和 yum 命令可以通用，这里统一用 dnf
      $SUDO_CMD dnf install -y git cmake gcc-c++ make curl openssl
      ;;
  esac
  echo "✔ 基础编译工具安装完成。"

  echo "▶ 步骤 2/5: 清理旧环境并为 Hunter 准备依赖..."
  
  # ### 这是最关键的修复：清理后立即切换到安全目录 ###
  echo "--> 切换到安全的主目录..."
  cd "$HOME"
  
  # 清理
  echo "--> 正在清理旧文件..."
  rm -rf "$REPO_PATH" "$HOME/.hunter"
  # 使用 -n 检查 SUDO_CMD 是否为空，更安全
  if [ -n "$SUDO_CMD" ]; then
    $SUDO_CMD rm -rf "/root/.hunter" # 如果以sudo运行，也清理root的缓存
  fi
  
  # 定义 Boost 依赖信息
  BOOST_VERSION="1.66.0"
  BOOST_SHA1="075d0b43980614054b1f1bafd189f863bba6600e"
  BOOST_FILENAME="boost_1_66_0.7z"
  # 可靠的备用下载地址
  BOOST_URL="https://sourceforge.net/projects/boost/files/boost/${BOOST_VERSION}/${BOOST_FILENAME}/download"
  # 根据当前用户确定Hunter缓存目录
  HUNTER_USER_CACHE_DIR="$HOME/.hunter"
  if [ "$(id -u)" -eq 0 ]; then
      HUNTER_USER_CACHE_DIR="/root/.hunter"
  fi
  HUNTER_CACHE_DIR="$HUNTER_USER_CACHE_DIR/_Base/Download/Boost/${BOOST_VERSION}/${BOOST_SHA1:0:7}"
  
  echo "--> [投喂 Hunter] 正在准备依赖: Boost v${BOOST_VERSION}"
  mkdir -p "$HUNTER_CACHE_DIR"
  
  if [ -f "$HUNTER_CACHE_DIR/$BOOST_FILENAME" ]; then
      echo "--> Boost 缓存已存在，跳过下载。"
  else
      echo "--> 正在从备用源下载 Boost (此步较慢，约100MB)..."
      # 使用 curl 下载，-L 参数可以处理重定向
      if ! curl -L --progress-bar -o "$HUNTER_CACHE_DIR/$BOOST_FILENAME" "$BOOST_URL"; then
          echo "!! 致命错误: 下载 Boost 失败。请检查网络或 URL: $BOOST_URL"
          exit 1
      fi
  fi

  echo "--> 正在校验下载的 Boost 文件..."
  # dnf 系统默认没有 sha1sum，但 openssl 可以实现
  if command -v sha1sum >/dev/null; then
    DOWNLOADED_SHA1=$(sha1sum "$HUNTER_CACHE_DIR/$BOOST_FILENAME" | awk '{print $1}')
  else
    DOWNLOADED_SHA1=$(openssl dgst -sha1 "$HUNTER_CACHE_DIR/$BOOST_FILENAME" | awk '{print $2}')
  fi

  if [ "$DOWNLOADED_SHA1" != "$BOOST_SHA1" ]; then
      echo "!! 致命错误: Boost 文件校验失败！"
      echo "   期望 SHA1: $BOOST_SHA1"
      echo "   实际 SHA1: $DOWNLOADED_SHA1"
      rm -f "$HUNTER_CACHE_DIR/$BOOST_FILENAME"
      exit 1
  fi
  echo "✔ Boost 依赖准备就绪！"

  echo "▶ 步骤 3/5: 完整克隆 ethminer 源码..."
  echo "--> 正在以 --recursive 模式完整克隆 ethminer..."
  if ! git clone --recursive https://github.com/ethereum-mining/ethminer.git "$REPO_PATH"; then
    echo "!! 克隆失败，请检查网络连接。" >&2; exit 1;
  fi
  echo "✔ 源码及所有依赖子模块已完整下载。"
  
  echo "▶ 步骤 4/5: 配置项目 (Hunter 将使用我们准备好的本地缓存)..."
  (
    cd "$REPO_PATH"
    mkdir -p build
    cd build
    cmake .. -DETHASHCL=OFF -DETHASHCUDA=OFF
  ) || { echo "!! 致命错误：CMake 配置失败。请检查上面的错误日志。"; exit 1; }
  echo "✔ 所有依赖已通过 Hunter 配置完成！"
  
  echo "▶ 步骤 5/5: 正在编译 ethminer 主程序..."
  (
    cd "$REPO_PATH/build"
    make -j"$(get_cpu_cores)"
  ) || { echo "!! 致命错误：编译 ethminer 失败。请检查以上日志。"; exit 1; }
  echo "✔ 编译完成！"

  echo "▶ 安装程序..."
  mkdir -p "${HOME}/.local/bin"
  install -m755 "$REPO_PATH/build/ethminer/ethminer" "${HOME}/.local/bin/"
  echo "✔ ethminer 已成功安装到 ${HOME}/.local/bin/"

  if ! echo "$PATH" | grep -q "$HOME/.local/bin"; then
    echo "----------------------------------------------------------------------"
    echo "重要提示: '${HOME}/.local/bin' 不在你的 PATH 环境变量中。"
    echo "请重新登录或运行以下命令，然后再次运行本脚本："
    echo "  export PATH=\"\$HOME/.local/bin:\$PATH\""
    echo "----------------------------------------------------------------------"
  fi
  echo "按任意键返回主菜单..."
  read -n 1 -s -r # -s 静默输入，-r 允许退格
}

# --- 日常管理功能 ---
change_mining_address(){ . "$CONFIG_FILE"; echo "--- 更改挖矿地址 ---"; echo "当前挖矿地址: $MINING_ADDRESS"; printf "➤ 请输入新的挖矿地址 (或直接回车取消): "; read -r new_address; if [ -z "$new_address" ]; then echo "操作已取消。"; sleep 2; return; fi; if ! echo "$new_address" | grep -Eq '^0x[a-fA-F0-9]{40}$'; then echo "✘ 错误：地址格式无效。"; sleep 3; return 1; fi; sed -i.bak "s|^MINING_ADDRESS=.*|MINING_ADDRESS=\"$new_address\"|" "$CONFIG_FILE"; rm -f "${CONFIG_FILE}.bak"; echo "✔ 挖矿地址已成功更新！"; sleep 2; }
edit_config(){ echo "▶ 打开配置文件进行编辑..."; if [ -n "$EDITOR" ]; then "$EDITOR" "$CONFIG_FILE"; elif command -v nano >/dev/null; then nano "$CONFIG_FILE"; elif command -v vi >/dev/null; then vi "$CONFIG_FILE"; else echo "未找到编辑器。请手动编辑: $CONFIG_FILE"; fi; echo "配置完成。"; sleep 2; }
start_miner(){ if [ -f "$PID_FILE" ] && ps -p "$(cat "$PID_FILE")" > /dev/null; then echo "矿机已经在运行 (PID: $(cat "$PID_FILE"))。"; sleep 2; return; fi; echo "▶ 正在启动矿机..."; if ! command -v ethminer >/dev/null; then echo "错误: 'ethminer' 命令未找到。请先安装(选项 1)。"; sleep 2; return 1; fi; . "$CONFIG_FILE"; POOL_HOST_PORT=$(echo "$POOL_URL" | sed 's|stratum+tcp://||'); STRATUM_URI="stratum+tcp://${MINING_ADDRESS}.${WORKER_NAME}@${POOL_HOST_PORT}"; echo "使用的矿池地址: $STRATUM_URI"; echo "日志文件位于: $LOG_FILE"; nohup ethminer -P "$STRATUM_URI" >"$LOG_FILE" 2>&1 & MINER_PID=$!; echo "$MINER_PID" > "$PID_FILE"; sleep 1; if ps -p "$MINER_PID" > /dev/null; then echo "✔ 矿机已启动，进程ID: $MINER_PID"; else echo "✘ 矿机启动失败，请查看日志: $LOG_FILE"; rm -f "$PID_FILE"; fi; sleep 2; }
stop_miner(){ if [ ! -f "$PID_FILE" ]; then echo "矿机未在运行。"; sleep 2; return; fi; PID=$(cat "$PID_FILE"); if ps -p "$PID" > /dev/null; then echo "▶ 正在停止矿机 (PID: $PID)..."; kill "$PID"; sleep 2; if ! ps -p "$PID" > /dev/null; then echo "✔ 矿机已停止。"; rm -f "$PID_FILE"; else echo "等待超时，强制停止..."; kill -9 "$PID"; rm -f "$PID_FILE"; fi; else echo "PID $PID 不存在。清理PID文件..."; rm -f "$PID_FILE"; fi; sleep 2; }
show_monitor(){ if [ -f "$LOG_FILE" ]; then echo "▶ 实时监控日志 (按 Ctrl+C 退出)..."; tail -f "$LOG_FILE"; else echo "日志文件不存在。"; sleep 2; fi; }

show_menu() {
  while true; do
    if [ -f "$CONFIG_FILE" ]; then . "$CONFIG_FILE"; fi
    clear
    cat << "EOF"
╔════════════════════════════════════════════════╗
║           Ethminer 矿工专业工具 v9.2           ║
╠════════════════════════════════════════════════╣
║ 1) 安装/更新 ethminer  2) 更改挖矿地址          ║
║ 3) 编辑矿池配置      4) 启动/停止矿机          ║
║ 5) 查看实时日志      0) 退出                   ║
╚════════════════════════════════════════════════╝
EOF
    echo
    if [ -f "$PID_FILE" ] && ps -p "$(cat "$PID_FILE")" > /dev/null; then 
        echo "当前状态: 运行中 (PID: $(cat "$PID_FILE"))"
    else 
        echo "当前状态: 已停止"
    fi
    echo "挖矿地址: ${MINING_ADDRESS:-未设置}"
    echo "矿池地址: ${POOL_URL:-未设置}"
    echo
    printf "➤ 请输入选项 [0-5]: "
    read -r choice
    case $choice in
      1) install_ethminer ;; 2) change_mining_address ;; 3) edit_config ;;
      4) if [ -f "$PID_FILE" ] && ps -p "$(cat "$PID_FILE")" > /dev/null; then stop_miner; else start_miner; fi ;;
      5) show_monitor ;; 0) echo "感谢使用，再见！"; exit 0 ;; *) echo "无效选项。"; sleep 1 ;;
    esac
  done
}

# --- 主程序入口 ---
main() {
  init_environment
  show_menu
}

main "$@"
