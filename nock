#!/bin/bash
# -*- coding: UTF-8 -*-
# Nockchain hoonc编译卡住问题完全解决方案 v9.0

# 颜色定义
RED='\033[1;31m'
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
BLUE='\033[1;34m'
CYAN='\033[1;36m'
MAGENTA='\033[1;35m'
RESET='\033[0m'

# 路径配置
INSTALL_PREFIX="$HOME/.local"
NOCKCHAIN_DIR="$HOME/nockchain"
LOG_FILE="$HOME/nockchain_install.log"
BACKUP_DIR="$HOME/nockchain_backup"
MINICONDA_DIR="$HOME/.miniconda3"

# hoonc编译优化环境变量
export PATH="$INSTALL_PREFIX/bin:$HOME/.cargo/bin:$PATH"
export RUST_MIN_STACK=67108864  # 64MB stack size for hoonc
export RUST_LOG=warn
export RUSTFLAGS="-C debuginfo=0 -C opt-level=1 -C codegen-units=1 -C link-arg=-Wl,--no-keep-memory -C link-arg=-Wl,--reduce-memory-overheads"
export CARGO_BUILD_JOBS=2  # 允许2个并行作业以加速编译
export CARGO_INCREMENTAL=0
export CARGO_NET_RETRY=10  # 网络重试次数
export CARGO_HTTP_TIMEOUT=300  # 5分钟超时
export CARGO_HTTP_LOW_SPEED_LIMIT=1  # 降低速度限制
export MALLOC_ARENA_MAX=4
export MALLOC_TRIM_THRESHOLD_=100000

# 消息输出函数
print_message() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${RESET}"
}

log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
}

check_command() {
    command -v "$1" >/dev/null 2>&1
}

# 验证128位16进制公钥格式
validate_128bit_hex_pubkey() {
    local pubkey=$1
    # 检查是否为128位16进制（64字节 = 128个16进制字符）
    if [[ $pubkey =~ ^[0-9a-fA-F]{128}$ ]]; then
        return 0
    else
        print_message "$RED" "错误：公钥必须是128位16进制格式（128个字符）"
        print_message "$YELLOW" "示例：0479BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8..."
        return 1
    fi
}

# 显示主菜单
show_menu() {
    clear
    echo -e "${BLUE}
=======================================
 Nockchain hoonc编译卡住完全解决方案 v9.0
=======================================
${RESET}"
    echo -e "${YELLOW}1. 完全解决hoonc编译卡住问题并安装Nockchain"
    echo "2. 配置128位16进制挖矿公钥"
    echo "3. 启动超时保护挖矿"
    echo "4. 查看实时编译/挖矿日志"
    echo "5. 检查钱包余额"
    echo "6. 系统状态监控"
    echo "7. 备份钱包密钥"
    echo "8. hoonc编译问题诊断"
    echo "9. 编译超时优化工具"
    echo "10. 退出脚本"
    echo -e "${BLUE}=======================================${RESET}"
}

# 检测Linux发行版
detect_distro() {
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        echo $ID
    elif [ -f /etc/redhat-release ]; then
        echo "centos"
    elif [ -f /etc/debian_version ]; then
        echo "debian"
    else
        echo "unknown"
    fi
}

# 安装系统级编译器工具
install_system_compilers() {
    print_message "$CYAN" "正在安装系统级编译器工具..."
    
    local distro=$(detect_distro)
    print_message "$YELLOW" "检测到系统: $distro"
    
    case $distro in
        "ubuntu"|"debian"|"mint"|"pop")
            if sudo -n true 2>/dev/null; then
                sudo apt update
                sudo apt install -y build-essential gcc g++ make cmake clang llvm-dev libclang-dev pkg-config libssl-dev libc6-dev curl wget git
                print_message "$GREEN" "系统编译器安装完成"
            else
                print_message "$YELLOW" "无sudo权限，将使用Conda编译器"
                return 1
            fi
            ;;
            
        "centos"|"rhel"|"rocky"|"almalinux"|"fedora")
            if sudo -n true 2>/dev/null; then
                if check_command "dnf"; then
                    sudo dnf groupinstall -y "Development Tools"
                    sudo dnf install -y clang llvm-devel openssl-devel cmake curl wget git
                elif check_command "yum"; then
                    sudo yum groupinstall -y "Development Tools"
                    sudo yum install -y clang llvm-devel openssl-devel cmake curl wget git
                fi
                print_message "$GREEN" "系统编译器安装完成"
            else
                print_message "$YELLOW" "无sudo权限，将使用Conda编译器"
                return 1
            fi
            ;;
            
        *)
            print_message "$YELLOW" "未知系统类型，将使用Conda编译器"
            return 1
            ;;
    esac
    
    return 0
}

# 智能处理Miniconda安装
smart_miniconda_setup() {
    print_message "$CYAN" "正在智能处理Miniconda环境..."
    
    if [ -d "$MINICONDA_DIR" ]; then
        if [ -f "$MINICONDA_DIR/bin/conda" ] && "$MINICONDA_DIR/bin/conda" --version >/dev/null 2>&1; then
            print_message "$GREEN" "发现有效的Miniconda安装"
            source "$MINICONDA_DIR/etc/profile.d/conda.sh"
            export PATH="$MINICONDA_DIR/bin:$PATH"
            return 0
        else
            print_message "$YELLOW" "发现损坏的Miniconda安装，正在清理..."
            rm -rf "$MINICONDA_DIR"
        fi
    fi
    
    print_message "$CYAN" "正在安装Miniconda..."
    local arch=$(uname -m)
    case $arch in
        x86_64) MINICONDA_URL="https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh" ;;
        aarch64) MINICONDA_URL="https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-aarch64.sh" ;;
        *) print_message "$RED" "不支持的架构: $arch"; return 1 ;;
    esac
    
    local installer="/tmp/miniconda_installer.sh"
    
    if wget -q --show-progress --timeout=60 --tries=3 "$MINICONDA_URL" -O "$installer"; then
        chmod +x "$installer"
        if bash "$installer" -b -p "$MINICONDA_DIR"; then
            source "$MINICONDA_DIR/etc/profile.d/conda.sh"
            export PATH="$MINICONDA_DIR/bin:$PATH"
            conda config --set auto_activate_base false
            conda config --set channel_priority strict
            rm -f "$installer"
            print_message "$GREEN" "Miniconda安装完成"
            return 0
        fi
    fi
    
    print_message "$RED" "Miniconda安装失败"
    return 1
}

# 安装Conda编译器工具链
install_conda_compilers() {
    print_message "$CYAN" "正在安装Conda编译器工具链..."
    
    source "$MINICONDA_DIR/etc/profile.d/conda.sh"
    export PATH="$MINICONDA_DIR/bin:$PATH"
    
    print_message "$CYAN" "创建nockchain-hoonc环境..."
    conda create -n nockchain-hoonc -y python=3.9 --no-default-packages || {
        print_message "$YELLOW" "环境已存在，正在更新..."
    }
    
    conda activate nockchain-hoonc
    
    print_message "$CYAN" "安装编译器工具链..."
    local compiler_packages=(
        "compilers"
        "gcc_linux-64"
        "gxx_linux-64"
        "clang"
        "clangxx"
        "make"
        "cmake"
        "pkg-config"
        "binutils"
        "ld_impl_linux-64"
        "openssl"
        "libffi"
        "curl"
        "wget"
    )
    
    for package in "${compiler_packages[@]}"; do
        print_message "$YELLOW" "安装 $package..."
        conda install -y "$package" -c conda-forge --quiet || {
            print_message "$YELLOW" "跳过 $package（可能不可用）"
        }
        sleep 1
    done
    
    if check_command "gcc" && check_command "g++"; then
        print_message "$GREEN" "Conda编译器工具链安装成功"
        
        if ! check_command "cc"; then
            ln -sf "$(which gcc)" "$MINICONDA_DIR/envs/nockchain-hoonc/bin/cc"
            print_message "$GREEN" "创建cc -> gcc符号链接"
        fi
        
        return 0
    else
        print_message "$RED" "Conda编译器安装失败"
        return 1
    fi
}

# 配置Rust环境 - hoonc编译优化版
setup_rust_environment() {
    print_message "$CYAN" "正在配置Rust环境（hoonc编译优化版）..."
    
    if ! check_command "rustc"; then
        print_message "$CYAN" "安装Rust..."
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y \
            --default-toolchain stable \
            --profile minimal \
            --no-modify-path
        source "$HOME/.cargo/env"
    fi
    
    export PATH="$HOME/.cargo/bin:$PATH"
    
    # 配置Cargo - hoonc编译优化版
    mkdir -p "$HOME/.cargo"
    cat > "$HOME/.cargo/config.toml" << 'EOF'
[build]
jobs = 2

[net]
retry = 10
git-fetch-with-cli = true
offline = false

[http]
timeout = 300
low-speed-limit = 1

[target.x86_64-unknown-linux-gnu]
linker = "cc"
rustflags = [
    "-C", "link-arg=-Wl,--no-keep-memory", 
    "-C", "link-arg=-Wl,--reduce-memory-overheads",
    "-C", "link-arg=-Wl,--gc-sections"
]

[profile.dev]
debug = 0
opt-level = 1
incremental = false
codegen-units = 1

[profile.release]
debug = 0
lto = "thin"
codegen-units = 1
incremental = false
EOF
    
    # 设置hoonc编译专用环境变量
    export RUST_MIN_STACK=67108864  # 64MB for hoonc
    export CARGO_INCREMENTAL=0
    export CARGO_BUILD_JOBS=2
    export CARGO_NET_RETRY=10
    export CARGO_HTTP_TIMEOUT=300
    
    print_message "$GREEN" "Rust环境配置完成（hoonc编译优化版）"
}

# 设置编译器环境变量 - hoonc优化版
setup_compiler_environment() {
    print_message "$CYAN" "正在设置编译器环境变量（hoonc优化版）..."
    
    source "$MINICONDA_DIR/etc/profile.d/conda.sh"
    conda activate nockchain-hoonc
    
    export CC=$(which gcc || which clang)
    export CXX=$(which g++ || which clang++)
    export AR=$(which ar)
    export RANLIB=$(which ranlib)
    export STRIP=$(which strip)
    
    if ! check_command "cc"; then
        if [ -n "$CC" ]; then
            export CC_x86_64_unknown_linux_gnu="$CC"
            local cc_link="$MINICONDA_DIR/envs/nockchain-hoonc/bin/cc"
            ln -sf "$CC" "$cc_link" 2>/dev/null || true
            export PATH="$(dirname "$cc_link"):$PATH"
        fi
    fi
    
    # hoonc编译专用RUSTFLAGS
    export RUSTFLAGS="-C debuginfo=0 -C opt-level=1 -C linker=$CC -C link-arg=-Wl,--no-keep-memory -C link-arg=-Wl,--reduce-memory-overheads -C codegen-units=1"
    export RUST_MIN_STACK=67108864
    export CARGO_BUILD_JOBS=2
    
    print_message "$GREEN" "编译器环境变量设置完成（hoonc优化版）"
    print_message "$YELLOW" "CC=$CC"
    print_message "$YELLOW" "RUSTFLAGS=$RUSTFLAGS"
    print_message "$YELLOW" "RUST_MIN_STACK=$RUST_MIN_STACK"
}

# hoonc超时编译函数
compile_hoonc_with_timeout() {
    print_message "$CYAN" "开始编译hoonc编译器（超时保护版）..."
    
    cd "$NOCKCHAIN_DIR" || return 1
    
    source "$MINICONDA_DIR/etc/profile.d/conda.sh"
    conda activate nockchain-hoonc
    setup_compiler_environment
    
    print_message "$CYAN" "清理编译缓存..."
    rm -rf target/debug/build/*hoonc* target/release/build/*hoonc* || true
    cargo clean -p hoonc || true
    
    print_message "$GREEN" "链接器验证通过: $(which cc)"
    
    # 设置编译超时监控
    compile_with_timeout() {
        local timeout_seconds=1800  # 30分钟超时
        local log_file="$NOCKCHAIN_DIR/logs/hoonc_compile.log"
        mkdir -p "$NOCKCHAIN_DIR/logs"
        
        print_message "$CYAN" "开始hoonc编译（30分钟超时保护）..."
        
        # 在后台启动编译
        (
            cd "$NOCKCHAIN_DIR"
            make install-hoonc 2>&1 | tee "$log_file"
            echo $? > /tmp/hoonc_exit_code
        ) &
        
        local compile_pid=$!
        local count=0
        
        # 监控编译进度
        while kill -0 $compile_pid 2>/dev/null; do
            sleep 30
            count=$((count + 30))
            
            if [ $count -ge $timeout_seconds ]; then
                print_message "$YELLOW" "hoonc编译超时，尝试手动编译..."
                kill $compile_pid 2>/dev/null || true
                wait $compile_pid 2>/dev/null || true
                return 1
            fi
            
            if [ $((count % 120)) -eq 0 ]; then
                print_message "$CYAN" "hoonc编译进行中... (${count}秒)"
            fi
        done
        
        wait $compile_pid
        local exit_code=$(cat /tmp/hoonc_exit_code 2>/dev/null || echo "1")
        rm -f /tmp/hoonc_exit_code
        
        return $exit_code
    }
    
    # 尝试正常编译
    if compile_with_timeout; then
        print_message "$GREEN" "hoonc编译成功！"
        return 0
    fi
    
    # 如果超时，尝试手动编译
    print_message "$YELLOW" "正常编译超时，尝试手动编译hoonc..."
    
    cd crates/hoonc || return 1
    
    print_message "$CYAN" "手动编译hoonc（分步骤进行）..."
    
    # 分步编译以避免超时
    if timeout 1200 cargo build --release --bin hoonc; then
        mkdir -p "$HOME/.cargo/bin"
        cp target/release/hoonc "$HOME/.cargo/bin/"
        print_message "$GREEN" "hoonc手动编译成功！"
        cd ../..
        return 0
    else
        print_message "$RED" "hoonc编译失败"
        cd ../..
        return 1
    fi
}

# 编译Nockchain项目 - hoonc卡住修复版
compile_nockchain_with_hoonc_fix() {
    print_message "$CYAN" "开始编译Nockchain项目（hoonc卡住修复版）..."
    
    cd "$NOCKCHAIN_DIR" || return 1
    
    source "$MINICONDA_DIR/etc/profile.d/conda.sh"
    conda activate nockchain-hoonc
    setup_compiler_environment
    
    # 步骤1：编译hoonc（重点优化）
    print_message "$MAGENTA" "步骤 1/3: 编译hoonc编译器（超时保护）..."
    if ! compile_hoonc_with_timeout; then
        print_message "$RED" "hoonc编译失败"
        return 1
    fi
    
    # 验证hoonc可用
    if ! check_command "hoonc"; then
        print_message "$RED" "hoonc安装失败"
        return 1
    fi
    
    print_message "$GREEN" "hoonc编译器安装成功: $(which hoonc)"
    
    # 步骤2：编译主项目
    print_message "$MAGENTA" "步骤 2/3: 编译主项目..."
    if ! timeout 3600 make build; then
        print_message "$RED" "主项目编译失败"
        return 1
    fi
    
    # 步骤3：安装组件
    print_message "$MAGENTA" "步骤 3/3: 安装组件..."
    make install-nockchain-wallet || print_message "$YELLOW" "钱包安装失败"
    make install-nockchain || print_message "$YELLOW" "主程序安装失败"
    
    print_message "$GREEN" "Nockchain编译完成（hoonc卡住问题已修复）！"
}

# 主安装函数 - hoonc卡住完全解决版
install_nockchain_hoonc_fix() {
    print_message "$GREEN" ">>> 开始Nockchain hoonc编译卡住问题完全解决..."
    log_message "开始hoonc卡住修复安装流程"
    
    local total_ram=$(free -m 2>/dev/null | awk '/^Mem:/{print $2}' || echo "0")
    local available_space=$(df -m ~ 2>/dev/null | awk 'NR==2{print $4}' || echo "0")
    
    print_message "$YELLOW" "系统配置："
    print_message "$YELLOW" "- 内存: ${total_ram}MB"
    print_message "$YELLOW" "- 可用空间: ${available_space}MB"
    
    mkdir -p "$BACKUP_DIR" "$INSTALL_PREFIX"/{bin,lib,include}
    
    # 步骤1：安装系统编译器
    print_message "$MAGENTA" "步骤 1/6: 安装系统编译器..."
    local use_conda_compilers=false
    if ! install_system_compilers; then
        print_message "$YELLOW" "系统编译器安装失败，将使用Conda编译器"
        use_conda_compilers=true
    fi
    
    # 步骤2：设置Miniconda环境
    print_message "$MAGENTA" "步骤 2/6: 设置Miniconda环境..."
    if ! smart_miniconda_setup; then
        print_message "$RED" "Miniconda设置失败"
        return 1
    fi
    
    # 步骤3：安装Conda编译器（如果需要）
    if [ "$use_conda_compilers" = true ]; then
        print_message "$MAGENTA" "步骤 3/6: 安装Conda编译器工具链..."
        if ! install_conda_compilers; then
            print_message "$RED" "Conda编译器安装失败"
            return 1
        fi
    else
        print_message "$MAGENTA" "步骤 3/6: 跳过Conda编译器安装（使用系统编译器）"
    fi
    
    # 步骤4：配置Rust环境
    print_message "$MAGENTA" "步骤 4/6: 配置Rust环境（hoonc编译优化版）..."
    if ! setup_rust_environment; then
        print_message "$RED" "Rust环境配置失败"
        return 1
    fi
    
    # 步骤5：获取Nockchain源码
    print_message "$MAGENTA" "步骤 5/6: 获取Nockchain源码..."
    if [ -d "$NOCKCHAIN_DIR" ]; then
        print_message "$YELLOW" "更新现有项目..."
        cd "$NOCKCHAIN_DIR"
        git pull origin main || {
            cd "$HOME"
            rm -rf "$NOCKCHAIN_DIR"
            git clone https://github.com/zorp-corp/nockchain.git "$NOCKCHAIN_DIR"
        }
    else
        git clone https://github.com/zorp-corp/nockchain.git "$NOCKCHAIN_DIR" || {
            print_message "$RED" "项目克隆失败"
            return 1
        }
    fi
    
    cd "$NOCKCHAIN_DIR"
    
    # 配置环境文件 - 128位16进制公钥格式
    if [ -f ".env_example" ]; then
        cp .env_example .env
    else
        cat > .env << 'EOF'
MINING_PUBKEY=0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
NETWORK=mainnet
MAX_PEERS=1000
LOG_LEVEL=warn
RUST_LOG=warn
RUST_MIN_STACK=67108864
CARGO_BUILD_JOBS=2
CARGO_HTTP_TIMEOUT=300
EOF
    fi
    
    # 步骤6：编译项目
    print_message "$MAGENTA" "步骤 6/6: 编译Nockchain项目（hoonc卡住修复版）..."
    if ! compile_nockchain_with_hoonc_fix; then
        print_message "$RED" "项目编译失败"
        return 1
    fi
    
    # 生成钱包
    if check_command "nockchain-wallet"; then
        print_message "$CYAN" "生成钱包..."
        local wallet_output
        wallet_output=$(nockchain-wallet keygen 2>&1)
        
        if [ $? -eq 0 ]; then
            print_message "$GREEN" "钱包生成成功！"
            echo "$wallet_output"
            
            # 提取128位16进制公钥
            local pubkey=$(echo "$wallet_output" | grep -E "Public key:|公钥:" | awk '{print $NF}')
            if [ -n "$pubkey" ] && validate_128bit_hex_pubkey "$pubkey"; then
                sed -i "s/MINING_PUBKEY=.*/MINING_PUBKEY=$pubkey/" .env
                print_message "$GREEN" "128位16进制公钥自动配置完成"
            else
                print_message "$YELLOW" "请手动设置128位16进制公钥"
            fi
            
            echo "$wallet_output" > "$BACKUP_DIR/wallet_$(date +%Y%m%d_%H%M%S).txt"
        fi
    fi
    
    # 创建环境激活脚本
    cat > "$HOME/nockchain_hoonc_fixed.sh" << 'EOF'
#!/bin/bash
# Nockchain hoonc卡住修复版环境激活脚本
source "$HOME/.miniconda3/etc/profile.d/conda.sh"
conda activate nockchain-hoonc

# hoonc编译优化专用环境变量
export RUST_MIN_STACK=67108864
export RUST_LOG=warn
export CARGO_BUILD_JOBS=2
export CARGO_HTTP_TIMEOUT=300
export CARGO_NET_RETRY=10
export PATH="$HOME/.cargo/bin:$PATH"

# 设置编译器环境变量
export CC=$(which gcc || which clang)
export CXX=$(which g++ || which clang++)
if [ -n "$CC" ]; then
    export RUSTFLAGS="-C debuginfo=0 -C opt-level=1 -C linker=$CC -C link-arg=-Wl,--no-keep-memory"
fi

cd "$HOME/nockchain"
echo "Nockchain hoonc卡住修复版环境已激活"
echo "编译器: $CC"
echo "hoonc: $(which hoonc)"
echo "使用 'make run-nockchain' 启动挖矿"
EOF
    chmod +x "$HOME/nockchain_hoonc_fixed.sh"
    
    print_message "$GREEN" "🎉 Nockchain hoonc编译卡住问题完全解决！"
    print_message "$YELLOW" "安装路径: $NOCKCHAIN_DIR"
    print_message "$YELLOW" "环境激活: source ~/nockchain_hoonc_fixed.sh"
    print_message "$CYAN" "hoonc编译卡住问题已彻底修复！"
    print_message "$CYAN" "公钥格式已更新为128位16进制标准！"
    
    log_message "hoonc卡住修复安装完成"
}

# 配置128位16进制挖矿公钥
configure_128bit_mining_key() {
    print_message "$CYAN" ">>> 配置128位16进制挖矿公钥"
    
    if [ ! -f "$NOCKCHAIN_DIR/.env" ]; then
        print_message "$RED" "错误：未找到配置文件"
        return 1
    fi
    
    local current_key=$(grep "MINING_PUBKEY" "$NOCKCHAIN_DIR/.env" | cut -d'=' -f2)
    print_message "$YELLOW" "当前公钥: $current_key"
    
    print_message "$CYAN" "128位16进制公钥格式说明："
    print_message "$YELLOW" "- 必须是128个16进制字符（0-9, A-F）"
    print_message "$YELLOW" "- 代表64字节的椭圆曲线公钥"
    print_message "$YELLOW" "- 格式类似以太坊公钥标准"
    
    read -p "请输入新的128位16进制挖矿公钥: " new_pubkey
    
    if [ -n "$new_pubkey" ] && validate_128bit_hex_pubkey "$new_pubkey"; then
        cd "$NOCKCHAIN_DIR"
        cp .env .env.backup.$(date +%Y%m%d_%H%M%S)
        sed -i "s/MINING_PUBKEY=.*/MINING_PUBKEY=$new_pubkey/" .env
        print_message "$GREEN" "128位16进制公钥更新成功！"
    fi
}

# 启动超时保护挖矿
start_timeout_protected_mining() {
    print_message "$GREEN" ">>> 启动超时保护挖矿节点..."
    
    if [ ! -f "$NOCKCHAIN_DIR/.env" ]; then
        print_message "$RED" "错误：未找到安装"
        return 1
    fi
    
    if screen -list | grep -q "nockchain"; then
        read -p "检测到挖矿进程正在运行，是否重启？(y/N): " restart
        if [[ "$restart" =~ ^[Yy]$ ]]; then
            screen -S nockchain -X quit
            sleep 3
        else
            return 0
        fi
    fi
    
    cd "$NOCKCHAIN_DIR"
    source "$HOME/nockchain_hoonc_fixed.sh"
    
    print_message "$CYAN" "正在启动超时保护挖矿节点..."
    
    screen -dmS nockchain bash -c "
        source '$HOME/nockchain_hoonc_fixed.sh'
        cd '$NOCKCHAIN_DIR'
        source .env
        mkdir -p logs
        echo '=== Nockchain hoonc卡住修复版挖矿 ===' > logs/mining.log
        echo '启动时间: \$(date)' >> logs/mining.log
        echo '版本: hoonc编译卡住问题完全解决版' >> logs/mining.log
        echo '超时保护: 启用' >> logs/mining.log
        echo '公钥格式: 128位16进制' >> logs/mining.log
        echo '=================================' >> logs/mining.log
        
        while true; do
            timeout 3600 make run-nockchain 2>&1 | tee -a logs/mining.log
            exit_code=\$?
            if [ \$exit_code -eq 124 ]; then
                echo '检测到运行超时，重启挖矿进程...' >> logs/mining.log
                sleep 5
                continue
            elif [ \$exit_code -ne 0 ]; then
                echo '进程异常退出，退出码: \$exit_code，等待重启...' >> logs/mining.log
                sleep 10
                continue
            else
                echo '正常退出' >> logs/mining.log
                break
            fi
        done
    "
    
    sleep 5
    
    if screen -list | grep -q "nockchain"; then
        print_message "$GREEN" "🚀 超时保护挖矿节点启动成功！"
        print_message "$CYAN" "- 查看状态: screen -r nockchain"
        print_message "$CYAN" "- 停止挖矿: screen -S nockchain -X quit"
        print_message "$CYAN" "- 超时自动重启: 已启用（1小时超时）"
    else
        print_message "$RED" "启动失败，请查看日志"
    fi
}

# hoonc编译问题诊断
diagnose_hoonc_issues() {
    print_message "$GREEN" ">>> hoonc编译问题诊断"
    
    print_message "$CYAN" "正在检查hoonc编译相关问题..."
    
    # 检查hoonc可用性
    print_message "$YELLOW" "hoonc编译器检查："
    if check_command "hoonc"; then
        print_message "$GREEN" "✅ hoonc: $(which hoonc)"
        print_message "$CYAN" "版本: $(hoonc --version 2>/dev/null || echo '无法获取版本')"
    else
        print_message "$RED" "❌ hoonc: 未找到"
    fi
    
    # 检查编译环境
    print_message "$YELLOW" "编译环境检查："
    print_message "$CYAN" "- RUST_MIN_STACK: ${RUST_MIN_STACK:-未设置}"
    print_message "$CYAN" "- CARGO_BUILD_JOBS: ${CARGO_BUILD_JOBS:-未设置}"
    print_message "$CYAN" "- CARGO_HTTP_TIMEOUT: ${CARGO_HTTP_TIMEOUT:-未设置}"
    
    # 检查网络连接
    print_message "$YELLOW" "网络连接检查："
    if curl -s --connect-timeout 10 https://crates.io >/dev/null; then
        print_message "$GREEN" "✅ crates.io连接正常"
    else
        print_message "$RED" "❌ crates.io连接失败"
    fi
    
    if curl -s --connect-timeout 10 https://github.com >/dev/null; then
        print_message "$GREEN" "✅ GitHub连接正常"
    else
        print_message "$RED" "❌ GitHub连接失败"
    fi
    
    # 检查编译缓存
    print_message "$YELLOW" "编译缓存检查："
    if [ -d "$HOME/.cargo/registry" ]; then
        local cache_size=$(du -sh "$HOME/.cargo/registry" 2>/dev/null | awk '{print $1}')
        print_message "$CYAN" "Cargo缓存大小: ${cache_size:-未知}"
    fi
    
    # 检查公钥格式
    if [ -f "$NOCKCHAIN_DIR/.env" ]; then
        print_message "$YELLOW" "公钥格式检查："
        local pubkey=$(grep "MINING_PUBKEY" "$NOCKCHAIN_DIR/.env" | cut -d'=' -f2)
        if validate_128bit_hex_pubkey "$pubkey"; then
            print_message "$GREEN" "✅ 公钥格式正确（128位16进制）"
        else
            print_message "$RED" "❌ 公钥格式错误，需要128位16进制格式"
        fi
    fi
    
    # 提供修复建议
    print_message "$CYAN" "hoonc编译修复建议："
    
    if ! check_command "hoonc"; then
        print_message "$YELLOW" "1. hoonc编译器缺失，建议重新运行完整安装"
    fi
    
    if [ -z "$CARGO_HTTP_TIMEOUT" ]; then
        print_message "$YELLOW" "2. 未设置HTTP超时，建议设置CARGO_HTTP_TIMEOUT=300"
    fi
    
    if ! curl -s --connect-timeout 10 https://crates.io >/dev/null; then
        print_message "$YELLOW" "3. 网络连接问题，检查防火墙和代理设置"
    fi
    
    print_message "$YELLOW" "4. 建议使用选项1重新安装hoonc编译卡住修复版"
}

# 编译超时优化工具
compilation_timeout_tools() {
    print_message "$GREEN" ">>> 编译超时优化工具"
    
    echo "1. 清理编译缓存"
    echo "2. 设置网络优化"
    echo "3. 检查编译进程"
    echo "4. 优化Cargo配置"
    echo "5. 返回主菜单"
    
    read -p "请选择操作: " opt_choice
    
    case $opt_choice in
        1)
            print_message "$CYAN" "清理编译缓存..."
            cargo clean 2>/dev/null && print_message "$GREEN" "项目缓存清理完成"
            rm -rf ~/.cargo/registry/cache/* 2>/dev/null && print_message "$GREEN" "Cargo缓存清理完成"
            rm -rf ~/.cargo/git/db/* 2>/dev/null && print_message "$GREEN" "Git缓存清理完成"
            ;;
        2)
            print_message "$CYAN" "设置网络优化..."
            export CARGO_NET_RETRY=10
            export CARGO_HTTP_TIMEOUT=300
            export CARGO_HTTP_LOW_SPEED_LIMIT=1
            print_message "$GREEN" "网络优化设置完成"
            ;;
        3)
            print_message "$CYAN" "检查编译进程..."
            ps aux | grep -E "(cargo|rustc|hoonc)" | grep -v grep
            ;;
        4)
            print_message "$CYAN" "优化Cargo配置..."
            mkdir -p ~/.cargo
            cat > ~/.cargo/config.toml << 'EOF'
[build]
jobs = 2

[net]
retry = 10
git-fetch-with-cli = true

[http]
timeout = 300
low-speed-limit = 1
EOF
            print_message "$GREEN" "Cargo配置优化完成"
            ;;
        5)
            return
            ;;
    esac
}

# 查看日志
view_logs() {
    print_message "$GREEN" ">>> 显示编译/挖矿日志"
    
    if [ -f "$NOCKCHAIN_DIR/logs/mining.log" ]; then
        tail -f "$NOCKCHAIN_DIR/logs/mining.log"
    elif [ -f "$NOCKCHAIN_DIR/logs/hoonc_compile.log" ]; then
        print_message "$CYAN" "显示hoonc编译日志："
        tail -100 "$NOCKCHAIN_DIR/logs/hoonc_compile.log"
    else
        if screen -list | grep -q "nockchain"; then
            screen -r nockchain
        else
            print_message "$RED" "未找到日志或进程"
        fi
    fi
}

# 检查余额
check_balance() {
    print_message "$GREEN" ">>> 检查钱包余额"
    
    source "$HOME/nockchain_hoonc_fixed.sh"
    
    cd "$NOCKCHAIN_DIR"
    local pubkey=$(grep "MINING_PUBKEY" .env | cut -d'=' -f2)
    
    if [ -z "$pubkey" ] || [ "$pubkey" = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" ]; then
        print_message "$RED" "未配置有效的128位16进制公钥"
        return 1
    fi
    
    print_message "$CYAN" "查询余额: $pubkey"
    
    if check_command "nockchain-wallet"; then
        for socket in ./nockchain*.sock; do
            if [ -S "$socket" ]; then
                nockchain-wallet --nockchain-socket "$socket" list-notes-by-pubkey -p "$pubkey" 2>/dev/null && break
            fi
        done
    fi
}

# 系统监控
system_monitor() {
    print_message "$BLUE" "====== 系统状态监控（hoonc修复版） ======"
    
    local mem_info=$(free -h | awk '/^Mem:/{print "使用: "$3" / 总计: "$2}')
    local mem_percent=$(free | awk '/^Mem:/{printf "%.1f", $3/$2*100}')
    print_message "$YELLOW" "内存状态: $mem_info (${mem_percent}%)"
    
    local load_avg=$(uptime | awk -F'load average:' '{print $2}')
    print_message "$YELLOW" "系统负载: $load_avg"
    
    # hoonc相关检查
    print_message "$CYAN" "hoonc编译环境："
    if check_command "hoonc"; then
        print_message "$GREEN" "- hoonc编译器: $(which hoonc)"
    else
        print_message "$RED" "- hoonc编译器: 未找到"
    fi
    
    print_message "$YELLOW" "- CARGO_HTTP_TIMEOUT: ${CARGO_HTTP_TIMEOUT:-未设置}"
    print_message "$YELLOW" "- CARGO_BUILD_JOBS: ${CARGO_BUILD_JOBS:-未设置}"
    
    # 挖矿状态
    if screen -list | grep -q "nockchain"; then
        print_message "$GREEN" "挖矿状态: ✅ 正在运行（超时保护已启用）"
    else
        print_message "$RED" "挖矿状态: ❌ 未运行"
    fi
    
    # 公钥格式检查
    if [ -f "$NOCKCHAIN_DIR/.env" ]; then
        local pubkey=$(grep "MINING_PUBKEY" "$NOCKCHAIN_DIR/.env" | cut -d'=' -f2)
        if validate_128bit_hex_pubkey "$pubkey"; then
            print_message "$GREEN" "- 公钥格式: ✅ 128位16进制正确"
        else
            print_message "$RED" "- 公钥格式: ❌ 需要128位16进制"
        fi
    fi
}

# 备份钱包
backup_wallet() {
    print_message "$GREEN" ">>> 备份钱包密钥"
    
    local backup_file="$BACKUP_DIR/complete_backup_$(date +%Y%m%d_%H%M%S).tar.gz"
    mkdir -p "$BACKUP_DIR"
    
    cd "$NOCKCHAIN_DIR" 2>/dev/null || return 1
    
    tar -czf "$backup_file" .env logs/ *.txt 2>/dev/null || true
    
    if [ -f ".env" ]; then
        cp .env "$BACKUP_DIR/env_$(date +%Y%m%d_%H%M%S).backup"
    fi
    
    print_message "$GREEN" "备份完成: $backup_file"
}

# 主循环
main() {
    if [ "$EUID" -eq 0 ]; then
        print_message "$RED" "请不要以root用户运行"
        exit 1
    fi
    
    mkdir -p "$BACKUP_DIR"
    touch "$LOG_FILE"
    log_message "hoonc卡住修复脚本启动 v9.0"
    
    while true; do
        show_menu
        read -p "请输入选项编号（1-10）: " choice
        
        case $choice in
            1) install_nockchain_hoonc_fix ;;
            2) configure_128bit_mining_key ;;
            3) start_timeout_protected_mining ;;
            4) view_logs ;;
            5) check_balance ;;
            6) system_monitor ;;
            7) backup_wallet ;;
            8) diagnose_hoonc_issues ;;
            9) compilation_timeout_tools ;;
            10)
                print_message "$GREEN" "感谢使用Nockchain hoonc卡住完全解决方案！"
                log_message "脚本正常退出"
                exit 0
                ;;
            *)
                print_message "$RED" "无效选项"
                ;;
        esac
        
        echo
        read -p "按回车键继续..." -r
    done
}

# 启动程序
main
