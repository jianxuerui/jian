#!/bin/bash

# ========= Nockchain 完整管理脚本 v14.1 - 包含完整日志功能 =========
RESET='\033[0m'
BOLD='\033[1m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
CYAN='\033[0;36m'
PURPLE='\033[0;35m'

NCK_DIR="$HOME/nockchain"
ENV_FILE="$NCK_DIR/.env"
LOG_FILE="$HOME/nockchain_build.log"
HOONC_LOG="$HOME/nockchain_hoonc.log"
NODE_LOG="$HOME/nockchain_node.log"

function show_banner() {
  clear
  echo -e "${BOLD}${CYAN}"
  echo "======================================================"
  echo "   Nockchain 完整管理脚本 v14.1 - 包含完整日志功能"
  echo "======================================================"
  echo -e "${RESET}"
  echo "🎯 完整功能: 安装 + 构建 + 钱包 + 节点 + 日志监控"
  echo "💾 内存优化: 自动处理大内存需求和swap配置"
  echo "🔧 全面修复: 资产文件 + 虚拟清单 + 构建失败 + 启动问题"
  echo "📊 智能诊断: 详细错误分析和解决建议"
  echo "📈 完整日志: 多种日志查看和监控方式"
  echo "------------------------------------------------------"
  echo ""
}

# ========= 之前的所有安装和构建函数保持不变 =========
# [前面的所有函数代码保持相同，这里只添加完整的日志查看功能]

# ========= 完整的节点日志查看功能 =========
function view_node_logs() {
  echo -e "[*] 节点日志查看选项..."
  
  cd "$NCK_DIR" || return 1
  
  echo -e "${BLUE}[i] 可用的日志查看方式:${RESET}"
  echo "  1) 实时节点日志 (screen会话)"
  echo "  2) 节点运行日志文件"
  echo "  3) 系统nockchain日志"
  echo "  4) 最新错误日志"
  echo "  5) 完整日志历史"
  echo "  0) 返回主菜单"
  echo ""
  
  read -p "请选择日志查看方式 (0-5): " log_choice
  
  case "$log_choice" in
    1) view_realtime_logs ;;
    2) view_node_log_file ;;
    3) view_system_nockchain_logs ;;
    4) view_latest_errors ;;
    5) view_full_log_history ;;
    0) return ;;
    *) echo -e "${RED}[-] 无效选择${RESET}"; pause_and_return ;;
  esac
}

function view_realtime_logs() {
  echo -e "[*] 查看实时节点日志..."
  
  if command -v screen >/dev/null 2>&1 && screen -list | grep -qw "nockchain"; then
    echo -e "${GREEN}[+] 发现运行中的nockchain screen会话${RESET}"
    echo -e "${YELLOW}[!] 进入实时日志查看 (按 Ctrl+A+D 退出但保持节点运行)${RESET}"
    echo -e "${YELLOW}[!] 按 Ctrl+C 然后 exit 可以停止节点${RESET}"
    echo ""
    read -p "按Enter进入实时日志查看..." key
    screen -r nockchain
  else
    echo -e "${RED}[-] 未发现运行中的nockchain screen会话${RESET}"
    echo -e "${BLUE}[i] 尝试查看其他日志文件...${RESET}"
    view_node_log_file
  fi
  
  pause_and_return
}

function view_node_log_file() {
  echo -e "[*] 查看节点日志文件..."
  
  if [ -f "$NODE_LOG" ]; then
    echo -e "${GREEN}[+] 发现节点日志文件: $NODE_LOG${RESET}"
    echo -e "${BLUE}[i] 显示最新50行日志，按 Ctrl+C 退出实时监控${RESET}"
    echo ""
    
    # 显示最新日志
    echo -e "${YELLOW}=== 最新50行日志 ===${RESET}"
    tail -50 "$NODE_LOG"
    
    echo ""
    read -p "是否要实时监控此日志文件? (y/N): " monitor_choice
    if [[ "$monitor_choice" =~ ^[Yy]$ ]]; then
      echo -e "${BLUE}[i] 开始实时监控 (按 Ctrl+C 退出)...${RESET}"
      tail -f "$NODE_LOG"
    fi
  elif [ -f "$NCK_DIR/nockchain.log" ]; then
    echo -e "${GREEN}[+] 发现节点日志文件: $NCK_DIR/nockchain.log${RESET}"
    echo -e "${BLUE}[i] 显示最新50行日志${RESET}"
    tail -50 "$NCK_DIR/nockchain.log"
    
    echo ""
    read -p "是否要实时监控此日志文件? (y/N): " monitor_choice
    if [[ "$monitor_choice" =~ ^[Yy]$ ]]; then
      echo -e "${BLUE}[i] 开始实时监控 (按 Ctrl+C 退出)...${RESET}"
      tail -f "$NCK_DIR/nockchain.log"
    fi
  else
    echo -e "${RED}[-] 未找到节点日志文件${RESET}"
    echo -e "${BLUE}[i] 可能的原因:${RESET}"
    echo "  - 节点尚未启动"
    echo "  - 日志文件位置不同"
    echo "  - 节点启动失败"
  fi
  
  pause_and_return
}

function view_system_nockchain_logs() {
  echo -e "[*] 查看系统nockchain相关日志..."
  
  # 检查systemd日志
  if command -v journalctl >/dev/null 2>&1; then
    echo -e "${BLUE}[i] 检查systemd日志...${RESET}"
    if journalctl -u nockchain --no-pager -n 20 2>/dev/null | grep -q "nockchain"; then
      echo -e "${GREEN}[+] 发现systemd nockchain服务日志${RESET}"
      journalctl -u nockchain --no-pager -n 50
    else
      echo -e "${YELLOW}[!] 无systemd nockchain服务日志${RESET}"
    fi
  fi
  
  # 检查syslog中的nockchain相关日志
  echo -e "${BLUE}[i] 检查系统日志中的nockchain相关记录...${RESET}"
  if [ -f "/var/log/syslog" ]; then
    nockchain_logs=$(grep -i "nockchain" /var/log/syslog 2>/dev/null | tail -10)
    if [ -n "$nockchain_logs" ]; then
      echo -e "${GREEN}[+] 发现系统日志中的nockchain记录:${RESET}"
      echo "$nockchain_logs"
    else
      echo -e "${YELLOW}[!] 系统日志中无nockchain记录${RESET}"
    fi
  fi
  
  # 检查当前目录下的所有日志文件
  echo -e "${BLUE}[i] 搜索当前目录下的nockchain日志文件...${RESET}"
  cd "$NCK_DIR" 2>/dev/null || cd "$HOME"
  
  found_logs=false
  for logfile in *.log nockchain*.log *.out; do
    if [ -f "$logfile" ]; then
      echo -e "${GREEN}[+] 发现日志文件: $logfile${RESET}"
      echo -e "  大小: $(du -h "$logfile" | cut -f1)"
      echo -e "  最后修改: $(stat -c %y "$logfile" 2>/dev/null || echo "未知")"
      found_logs=true
    fi
  done
  
  if [ "$found_logs" = false ]; then
    echo -e "${YELLOW}[!] 未发现本地日志文件${RESET}"
  fi
  
  pause_and_return
}

function view_latest_errors() {
  echo -e "[*] 查看最新错误日志..."
  
  echo -e "${BLUE}[i] 分析各种日志文件中的错误信息...${RESET}"
  
  # 检查构建日志错误
  if [ -f "$LOG_FILE" ]; then
    echo -e "${YELLOW}=== 构建日志错误 ===${RESET}"
    grep -i "error\|failed\|panic" "$LOG_FILE" | tail -5
    echo ""
  fi
  
  # 检查hoonc日志错误
  if [ -f "$HOONC_LOG" ]; then
    echo -e "${YELLOW}=== hoonc构建错误 ===${RESET}"
    grep -i "error\|failed\|panic" "$HOONC_LOG" | tail -5
    echo ""
  fi
  
  # 检查节点日志错误
  if [ -f "$NODE_LOG" ]; then
    echo -e "${YELLOW}=== 节点运行错误 ===${RESET}"
    grep -i "error\|failed\|panic\|addr.*use" "$NODE_LOG" | tail -5
    echo ""
  fi
  
  # 检查screen会话是否有错误
  if command -v screen >/dev/null 2>&1; then
    if screen -list | grep -qw "nockchain"; then
      echo -e "${GREEN}[+] nockchain screen会话正在运行${RESET}"
    else
      echo -e "${YELLOW}[!] 无活动的nockchain screen会话${RESET}"
    fi
  fi
  
  # 检查进程状态
  if pgrep -f "nockchain" >/dev/null 2>&1; then
    echo -e "${GREEN}[+] 发现运行中的nockchain进程:${RESET}"
    pgrep -f "nockchain" | while read -r pid; do
      cmd=$(ps -p "$pid" -o args= 2>/dev/null || echo "unknown")
      echo -e "  PID $pid: $cmd"
    done
  else
    echo -e "${YELLOW}[!] 无运行中的nockchain进程${RESET}"
  fi
  
  pause_and_return
}

function view_full_log_history() {
  echo -e "[*] 查看完整日志历史..."
  
  cd "$NCK_DIR" 2>/dev/null || cd "$HOME"
  
  echo -e "${BLUE}[i] 可用的历史日志文件:${RESET}"
  log_files=()
  
  if [ -f "$LOG_FILE" ]; then
    log_files+=("$LOG_FILE")
    echo -e "  1) 主构建日志: $LOG_FILE ($(du -h "$LOG_FILE" | cut -f1))"
  fi
  
  if [ -f "$HOONC_LOG" ]; then
    log_files+=("$HOONC_LOG")
    echo -e "  2) hoonc构建日志: $HOONC_LOG ($(du -h "$HOONC_LOG" | cut -f1))"
  fi
  
  if [ -f "$NODE_LOG" ]; then
    log_files+=("$NODE_LOG")
    echo -e "  3) 节点运行日志: $NODE_LOG ($(du -h "$NODE_LOG" | cut -f1))"
  fi
  
  # 查找其他日志文件
  local_logs=$(find . -name "*.log" -o -name "nockchain*.out" 2>/dev/null | head -5)
  if [ -n "$local_logs" ]; then
    echo -e "${BLUE}[i] 其他发现的日志文件:${RESET}"
    echo "$local_logs" | while read -r logfile; do
      if [ -f "$logfile" ]; then
        size=$(du -h "$logfile" | cut -f1)
        echo -e "  - $logfile ($size)"
      fi
    done
  fi
  
  if [ ${#log_files[@]} -eq 0 ]; then
    echo -e "${YELLOW}[!] 未发现历史日志文件${RESET}"
    pause_and_return
    return
  fi
  
  echo ""
  read -p "选择要查看的日志文件 (1-3) 或按Enter查看所有: " file_choice
  
  case "$file_choice" in
    1) if [ -f "$LOG_FILE" ]; then less "$LOG_FILE"; fi ;;
    2) if [ -f "$HOONC_LOG" ]; then less "$HOONC_LOG"; fi ;;
    3) if [ -f "$NODE_LOG" ]; then less "$NODE_LOG"; fi ;;
    "")
      echo -e "${BLUE}[i] 显示所有日志文件的最新内容...${RESET}"
      for logfile in "${log_files[@]}"; do
        if [ -f "$logfile" ]; then
          echo -e "${YELLOW}=== $(basename "$logfile") 最新50行 ===${RESET}"
          tail -50 "$logfile"
          echo ""
        fi
      done
      ;;
    *) echo -e "${RED}[-] 无效选择${RESET}" ;;
  esac
  
  pause_and_return
}

# ========= 增强的状态检查（包含日志状态） =========
function check_logs_status() {
  echo -e "[*] 检查日志状态..."
  
  cd "$NCK_DIR" || return 1
  
  echo -e "${BLUE}[i] 日志文件状态:${RESET}"
  
  # 检查主要日志文件
  for logfile in "$LOG_FILE" "$HOONC_LOG" "$NODE_LOG"; do
    if [ -f "$logfile" ]; then
      size=$(du -h "$logfile" | cut -f1)
      modified=$(stat -c %y "$logfile" 2>/dev/null | cut -d'.' -f1 || echo "未知")
      echo -e "  ✓ $(basename "$logfile"): $size (修改: $modified)"
    else
      echo -e "  ✗ $(basename "$logfile"): 不存在"
    fi
  done
  
  # 检查实时日志（screen会话）
  if command -v screen >/dev/null 2>&1 && screen -list | grep -qw "nockchain"; then
    echo -e "  ✓ 实时日志 (screen会话): 活动中"
  else
    echo -e "  ✗ 实时日志 (screen会话): 无活动会话"
  fi
  
  # 检查本地日志文件
  local_log_count=$(find . -name "*.log" 2>/dev/null | wc -l)
  echo -e "  📊 本地日志文件总数: $local_log_count"
  
  pause_and_return
}

# ========= 保持之前所有其他函数不变 =========
# [这里包含之前所有的安装、构建、钱包、节点管理功能]

function pause_and_return() {
  echo ""
  read -n1 -r -p "按任意键返回主菜单..." key
  main_menu
}

# ========= 更新的主菜单（包含完整日志功能） =========
function main_menu() {
  show_banner
  echo "请选择操作:"
  echo ""
  echo "🚀 安装和构建:"
  echo "  1) 🎯 完整安装 (从零开始完整安装)"
  echo "  2) 🔧 重新构建所有组件"
  echo "  3) 🧹 清理环境并重建"
  echo ""
  echo "🔑 钱包管理:"
  echo "  4) 🔑 生成新钱包"
  echo "  5) 📝 设置挖矿公钥"
  echo "  6) 💾 导出钱包密钥"
  echo "  7) 📂 导入钱包密钥"
  echo ""
  echo "⚡ 节点管理:"
  echo "  8) ⚡ 修复并启动节点"
  echo "  9) ⏹️  停止所有服务"
  echo ""
  echo "📈 日志监控:"
  echo " 10) 📊 节点日志查看 (完整版)"
  echo " 11) 🔍 检查日志状态"
  echo " 12) ⚠️  查看最新错误"
  echo ""
  echo "🔍 状态和诊断:"
  echo " 13) 🔍 检查完整状态"
  echo " 14) 📊 系统问题诊断"
  echo ""
  echo "  0) 退出脚本"
  echo ""
  echo -e "${CYAN}💡 新增完整日志功能: 实时监控 + 历史查看 + 错误分析${RESET}"
  echo -e "${CYAN}💡 完整解决方案: 安装 + 构建 + 钱包 + 节点 + 日志${RESET}"
  echo ""
  read -p "请输入编号 (0-14): " choice

  case "$choice" in
    1) complete_installation_process ;;
    2) build_all_components_complete; pause_and_return ;;
    3) cleanup_and_rebuild ;;
    4) generate_wallet ;;
    5) set_mining_pubkey ;;
    6) export_wallet_keys ;;
    7) import_wallet_keys ;;
    8) fix_and_start_node ;;
    9) stop_all_services ;;
    10) view_node_logs ;;
    11) check_logs_status ;;
    12) view_latest_errors; pause_and_return ;;
    13) check_complete_status ;;
    14) diagnose_system_issues ;;
    0) echo "退出脚本."; exit 0 ;;
    *) echo -e "${RED}[-] 无效选项，请输入0-14${RESET}"; pause_and_return ;;
  esac
}

# 检查用户权限
if [ "$EUID" -eq 0 ]; then
  echo -e "${RED}[-] 请不要以root用户运行此脚本${RESET}"
  exit 1
fi

# 启动主菜单
main_menu
