#!/usr/bin/env bash

# ========= 容器化部署方案 =========
NCK_DIR="$HOME/nockchain"
DOCKER_IMAGE="ghcr.io/lpsm-dev/docker-crypto-miner:main"  # 已更换为可用的镜像源
VOLUME_MAP="-v $NCK_DIR:/nockchain"

# ========= 色彩定义 =========
RESET='\033[0m'
BOLD='\033[1m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
CYAN='\033[0;36m'

# ========= Docker安装模块 =========
function install_docker() {
  echo -e "${CYAN}[*] 开始安装Docker...${RESET}"
  
  if grep -qi "ubuntu" /etc/os-release; then
    sudo apt-get update
    sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list >/dev/null
    sudo apt-get update
    sudo apt-get install -y docker-ce docker-ce-cli containerd.io
    sudo usermod -aG docker $USER
    newgrp docker
  elif grep -qi "centos" /etc/os-release; then
    sudo yum install -y yum-utils
    sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
    sudo yum install -y docker-ce docker-ce-cli containerd.io
    sudo systemctl start docker
    sudo systemctl enable docker
    sudo usermod -aG docker $USER
    newgrp docker
  else
    echo -e "${RED}✗ 不支持的Linux发行版${RESET}"
    echo -e "${YELLOW}请手动安装Docker：${RESET}"
    echo "curl -fsSL https://get.docker.com | sudo bash"
    exit 1
  fi

  # 二次验证
  if ! command -v docker &>/dev/null; then
    echo -e "${RED}✗ Docker安装失败，请手动执行：${RESET}"
    echo "curl -fsSL https://get.docker.com | sudo bash"
    exit 1
  fi
}

# ========= 智能GPU检测 =========
function detect_gpu() {
  if lspci | grep -qi "nvidia"; then
    echo "nvidia"
  elif lspci | grep -qi "amd"; then
    echo "amd"
  else
    echo "none"
  fi
}

# ========= 容器部署引擎 =========
function deploy_container() {
  echo -e "${CYAN}[*] 启动Nockchain容器...${RESET}"
  
  local gpu_type=$(detect_gpu)
  local gpu_opt=""
  
  case $gpu_type in
    nvidia)
      gpu_opt="--gpus all"
      if ! dpkg -l | grep -q nvidia-container-toolkit; then
        echo -e "${YELLOW}! 正在安装NVIDIA容器工具包...${RESET}"
        distribution=$(. /etc/os-release;echo $ID$VERSION_ID)
        curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -
        curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list
        sudo apt-get update
        sudo apt-get install -y nvidia-container-toolkit
        sudo systemctl restart docker
      fi
      ;;
    amd)
      gpu_opt="--device=/dev/kfd --device=/dev/dri"
      ;;
  esac

  # 添加容器健康检查
  docker run -itd --restart always \
    --name nck-miner \
    $VOLUME_MAP \
    $gpu_opt \
    --network host \
    $DOCKER_IMAGE \
    --config /nockchain/.env \
    --health-cmd="nck-top --check" \
    --health-interval=30s \
    2>>$NCK_DIR/container.log

  sleep 5
  if ! docker ps | grep -q nck-miner; then
    echo -e "${RED}✗ 容器启动失败，查看日志：${NCK_DIR}/container.log${RESET}"
    exit 3
  fi
}

# ========= 增强版公钥验证 =========
function config_wizard() {
  echo -e "${CYAN}>>> 容器配置向导 <<<${RESET}"
  
  while :; do
    read -p "输入矿工公钥（128位十六进制）: " PUBKEY
    PUBKEY=${PUBKEY#0x}  # 去除0x前缀
    
    if [[ "$PUBKEY" =~ ^[0-9a-fA-F]{128}$ ]]; then
      PUBKEY=$(echo "$PUBKEY" | tr '[:upper:]' '[:lower:]')
      break
    else
      echo -e "${RED}✗ 格式错误，示例：d24c0c53d1162325eba695f32b7194f4c9b2943441a3162837922d36f3325c341ce049e7b3992080a9603e91147e4529f79261a355e16570c975a6c0e81716e3${RESET}"
    fi
  done

  cat > $NCK_DIR/.env <<EOF
MINER_PUBKEY=$PUBKEY
THREADS=$(($(nproc) * 9 / 10))
EOF

  echo -e "${GREEN}✓ 配置文件已生成: $NCK_DIR/.env${RESET}"
}

# ========= 主控界面 =========
function main_menu() {
  clear
  echo -e "${BOLD}${CYAN}"
  echo "=== Nockchain矿工管理系统 v3.1 ==="
  echo -e "${RESET}"
  echo "1) 完整部署矿工"
  echo "2) 启动矿工容器"
  echo "3) 停止矿工容器"
  echo "4) 实时监控面板"
  echo "5) 查看运行日志"
  echo "6) 修改矿工公钥"
  echo "0) 退出系统"
  echo ""
  
  read -p "请选择操作: " choice
  case $choice in
    1) check_docker && config_wizard && deploy_container ;;
    2) docker start nck-miner ;;
    3) docker stop nck-miner ;;
    4) watch -n1 "docker stats --no-stream nck-miner && echo && docker exec nck-miner nck-top" ;;
    5) docker logs -f --tail 100 nck-miner ;;
    6) config_wizard && docker restart nck-miner ;;
    0) exit 0 ;;
    *) echo -e "${RED}无效选择${RESET}"; sleep 1 ;;
  esac
}

# ========= 初始化执行 =========
mkdir -p "$NCK_DIR"
touch "$NCK_DIR/container.log"
chmod 644 "$NCK_DIR/container.log"

trap "echo -e '${RED}强制退出!${RESET}'" SIGINT

while true; do
  main_menu
done
