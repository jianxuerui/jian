#!/usr/bin/env bash
# nockchain_toolbox.sh 完整修复版 v4.0
# 适配RHEL/CentOS系统 + 自动处理CUDA/OpenCL依赖 + 智能仓库配置

set -euo pipefail
IFS=$'\n\t'

###############################
# 全局配置
###############################
SRC_DIR="${HOME}/build/ethminer"
INSTALL_PREFIX="/usr/local"
JOBS="$(nproc)"
LOG_FILE="${HOME}/nockchain.log"
CONFIG_FILE="${HOME}/.nockchain.conf"

###############################
# 输出颜色定义
###############################
c_info()  { printf "\033[32m[INFO]\033[0m %s\n" "$*"; }
c_warn()  { printf "\033[33m[WARN]\033[0m %s\n" "$*"; }
c_err()   { printf "\033[31m[ERR]\033[0m %s\n" "$*"; exit 1; }

###############################
# 系统包管理器检测
###############################
detect_pkg_mgr() {
    if command -v dnf >/dev/null; then
        echo "dnf"
    elif command -v yum >/dev/null; then
        echo "yum"
    else
        c_err "不支持的包管理器"
    fi
}

###############################
# 安装编译依赖 (RHEL/CentOS专用)
###############################
install_deps() {
    local pm=$(detect_pkg_mgr)
    c_info "检测到包管理器: ${pm}"

    # 启用必要仓库
    c_info "配置EPEL和PowerTools仓库..."
    sudo $pm install -y epel-release
    sudo $pm config-manager --set-enabled powertools 2>/dev/null || true
    sudo $pm makecache

    # 安装开发工具组
    c_info "安装开发工具组..."
    sudo $pm groupinstall -y "Development Tools"

    # 安装特定依赖
    c_info "安装编译依赖..."
    sudo $pm install -y \
        openssl-devel \
        ocl-icd-devel \
        opencl-headers \
        mesa-libGL-devel \
        mesa-libGLU-devel \
        pkgconfig \
        libstdc++-devel

    # 强制更新动态库链接
    sudo ldconfig
}

###############################
# 源码管理
###############################
fetch_source() {
    mkdir -p "$(dirname "$SRC_DIR")"
    if [[ -d "$SRC_DIR/.git" ]]; then
        c_info "更新ethminer源码..."
        git -C "$SRC_DIR" pull --rebase
    else
        c_info "克隆ethminer仓库..."
        git clone --recursive https://github.com/ethereum-mining/ethminer.git "$SRC_DIR"
    fi
}

###############################
# 应用源码补丁
###############################
apply_patches() {
    # 修复JSONCPP弃用警告
    local cmake_file="$SRC_DIR/CMakeLists.txt"
    if ! grep -q "Wno-deprecated-declarations" "$cmake_file"; then
        c_info "注入编译选项到CMakeLists.txt"
        sed -i '/CMAKE_CXX_STANDARD/a add_compile_options(-Wno-deprecated-declarations)' "$cmake_file"
    fi

    # 强制使用系统OpenCL
    local libethash_cmake="$SRC_DIR/libethash-cl/CMakeLists.txt"
    sed -i 's/if(USE_SYS_OPENCL)/if(TRUE)/' "$libethash_cmake"
}

###############################
# CUDA自动检测
###############################
detect_cuda() {
    if command -v nvcc &>/dev/null || [[ -d "/usr/local/cuda" ]]; then
        echo "ON"
    else
        echo "OFF"
    fi
}

###############################
# 编译安装
###############################
build_ethminer() {
    local use_cuda=$(detect_cuda)
    c_info "CUDA支持状态: ${use_cuda}"

    cd "$SRC_DIR"
    mkdir -p build && cd build

    cmake .. \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_CXX_COMPILER=g++ \
        -DCMAKE_INSTALL_PREFIX="$INSTALL_PREFIX" \
        -DETHASHCUDA="$use_cuda" \
        -DUSE_SYS_OPENCL=ON

    make -j"$JOBS"
    sudo make install
}

###############################
# 钱包配置管理
###############################
manage_wallet() {
    read -rp "输入新钱包地址: " wallet
    [[ -z "$wallet" ]] && { c_warn "操作取消"; return; }
    echo "WALLET=$wallet" > "$CONFIG_FILE"
    c_info "钱包地址已更新"
}

###############################
# 节点控制
###############################
start_node() {
    local wallet=$(grep -Po 'WALLET=\K.*' "$CONFIG_FILE" 2>/dev/null || true)
    [[ -z "$wallet" ]] && { c_warn "请先配置钱包"; return; }

    nohup ethminer -P "stratum1+tcp://${wallet}@eth.pool.example:4444" &>> "$LOG_FILE" &
    c_info "节点已启动 | 日志: tail -f $LOG_FILE"
}

view_logs() {
    [[ -f "$LOG_FILE" ]] || { c_warn "日志文件不存在"; return; }
    tail -n 50 -f "$LOG_FILE"
}

###############################
# 用户界面
###############################
show_menu() {
    clear
    echo -e "\n========== Nockchain 管理终端 =========="
    echo "1) 安装/更新 ethminer"
    echo "2) 配置钱包地址"
    echo "3) 启动挖矿节点"
    echo "4) 查看实时日志"
    echo "5) 退出"
    echo -e "=======================================\n"
}

main() {
    while true; do
        show_menu
        read -rp "请选择操作 [1-5]: " choice
        case $choice in
            1) install_deps
               fetch_source
               apply_patches
               build_ethminer ;;
            2) manage_wallet ;;
            3) start_node ;;
            4) view_logs ;;
            5) c_info "再见！"; exit 0 ;;
            *) c_warn "无效选项" ;;
        esac
        read -rp "按回车继续..."
    done
}

# 脚本入口
main "$@"
