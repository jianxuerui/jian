#!/bin/bash
# ==============================================================================
# Nockchain 挖矿助手 (K2 增强融合版 v5.4 - 动态内核下载)
# ==============================================================================
# HOW TO RUN THIS SCRIPT (重要运行说明):
# 1. 切换到普通用户 (非 root): `su - your_username`
# 2. 保存此脚本: 例如，保存为 `nock.sh`
# 3. 授予执行权限: `chmod +x nock.sh`
# 4. 在 screen/tmux 中运行: `screen -S nck` 然后 `./nock.sh`
# ==============================================================================
# 作者: K2 节点教程分享 (AI 修复增强版)
# Telegram: https://t.me/+EaCiFDOghoM3Yzll
# Twitter:  https://x.com/BtcK241918
# ==============================================================================

# 脚本健壮性设置，确保任何错误都会被捕获
set -euo pipefail

# --- 全局常量和颜色定义 ---
RESET='\033[0m'; BOLD='\033[1m'; GREEN='\033[0;32m'; BLUE='\033[0;34m'; YELLOW='\033[1;33m'; RED='\033[0;31m'; PURPLE='\033[0;35m'; CYAN='\033[0;36m'

NCK_DIR="$HOME/nockchain"
ENV_FILE="$NCK_DIR/.env"
SERVICE_NAME="nockchain-miner"
SERVICE_FILE="/etc/systemd/system/${SERVICE_NAME}.service"
HOON_KERNEL_PATH="$NCK_DIR/pkg/sys/hoon"
# [核心修复] 定义内核文件的下载地址，而不是硬编码内容
HOON_KERNEL_URL="https://gist.githubusercontent.com/git-k2/438b45f1b528a4c042da4938634e797d/raw/hoon_v139"

# --- 核心函数 ---

function show_banner() {
  clear
  echo -e "${BOLD}${BLUE}"
  echo "======================================================"
  echo " Nockchain 挖矿助手 (K2 增强融合版 v5.4)"
  echo "======================================================"
  echo -e "${RESET}"
  echo -e "✨ ${BOLD}${PURPLE}内核增强: 动态下载 v139 优化版 Hoon 内核，杜绝错误！${RESET}"
  echo -e "🛡️ ${BOLD}${RED}终极修复: 采用手动编译，补全所有已知.jam文件依赖！${RESET}"
  echo -e "🚀 ${BOLD}使用 Systemd 服务管理，确保稳定运行。${RESET}"
  echo "📌 作者: K2 节点教程分享 (AI 修复增强版)"
  echo "🔗 Telegram: https://t.me/+EaCiFDOghoM3Yzll"
  echo "🐦 Twitter:  https://x.com/BtcK241918"
  echo "------------------------------------------------------"
  echo ""
}

function get_num_cores() { nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || echo 4; }
function pause_and_return() { echo ""; read -r -p "按任意键返回主菜单..." -s -n 1; echo; }
function check_command() { if ! command -v "$1" &>/dev/null; then echo -e "${RED}[-] 致命错误: 命令 '$1' 未找到。${RESET}" >&2; return 1; fi; }

# 1. 一键安装
function install_all() {
    show_banner
    # 检查是否为 root 用户
    if [[ "$(id -u)" -eq 0 ]]; then
        echo -e "${RED}错误：请不要使用 root 用户运行安装。${RESET}"
        echo -e "${YELLOW}请创建一个普通用户，并切换到该用户下再运行此脚本。${RESET}"
        echo -e "例如: adduser miner && usermod -aG sudo miner && su - miner"
        pause_and_return
        return
    fi
    
    # 清理旧环境
    echo -e "${YELLOW}[*] 为确保全新安装，正在清理旧的 nockchain 目录...${RESET}"
    if [ -d "$NCK_DIR" ]; then
        if systemctl is-active --quiet "$SERVICE_NAME"; then
            echo -e "${YELLOW}[!] 检测到服务正在运行，正在停止服务...${RESET}"
            sudo systemctl stop "$SERVICE_NAME"
        fi
        rm -rf "$NCK_DIR"
        echo -e "${GREEN}[+] 旧目录已清理。${RESET}"
    fi

    (
    set -e # 确保子shell中任何命令失败都会立即退出
    echo -e "${BLUE}--- 步骤 1/4: 安装系统依赖 ---${RESET}"
    sudo apt-get update
    sudo apt-get install -y clang llvm-dev libclang-dev pkg-config libssl-dev build-essential cmake git make curl dos2unix

    echo -e "${BLUE}--- 步骤 2/4: 安装 Rust ---${RESET}"
    if ! command -v cargo &>/dev/null; then
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    else
        echo -e "${YELLOW}[!] Rust 已安装，跳过。${RESET}"
    fi
    source "$HOME/.cargo/env"

    echo -e "${BLUE}--- 步骤 3/4: 克隆 Nockchain 仓库并注入内核 ---${RESET}"
    echo -e "${BLUE}[*] 正在克隆仓库到 $NCK_DIR...${RESET}"
    git clone https://github.com/zorp-corp/nockchain "$NCK_DIR"
    cd "$NCK_DIR"
    
    echo -e "${PURPLE}--- [增强] 正在从网络动态下载并注入 K2 修复版 Hoon 内核 (v139) ---${RESET}"
    # [核心修复] 使用 curl 下载内核文件，而不是从变量解码
    if curl -sSLf -o "$HOON_KERNEL_PATH" "$HOON_KERNEL_URL"; then
        echo -e "${GREEN}[+] 增强版 Hoon 内核已成功注入。${RESET}"
    else
        echo -e "${RED}致命错误: 无法从 URL 下载内核文件！请检查网络连接或 URL 是否有效。${RESET}"
        exit 1
    fi
    
    echo -e "${RED}${BOLD}--- 步骤 4/4: 执行终极手动编译流程 ---${RESET}"
    
    # 编译阶段
    echo -e "${CYAN}[*] 编译阶段 1/3: 正在编译 Hoon 编译器 (hoonc)...${RESET}"
    cargo build --release -p hoonc
    HOONC_PATH="$NCK_DIR/target/release/hoonc"
    
    echo -e "${CYAN}[*] 编译阶段 2/3: 正在生成所有 .jam 资产文件...${RESET}"
    mkdir -p assets
    "$HOONC_PATH" pkg/miner.hoon > assets/miner.jam
    "$HOONC_PATH" pkg/dumb.hoon > assets/dumb.jam
    "$HOONC_PATH" pkg/wal.hoon > assets/wal.jam
    
    echo -e "${CYAN}[*] 编译阶段 3/3: 正在编译 Nockchain 主程序...${RESET}"
    local num_cores=$(get_num_cores)
    export RUSTFLAGS="-C target-cpu=native -C opt-level=3"
    export CARGO_PROFILE_RELEASE_LTO="true"
    cargo build --release --workspace --exclude hoonc -j"$num_cores"
    
    cp "$NCK_DIR/target/release/nockchain" "$HOME/.cargo/bin/"

    )
    local exit_code=$?

    if [ "$exit_code" -ne 0 ]; then
        echo -e "\n${RED}=======================================================${RESET}"
        echo -e "${BOLD}${RED}[-] 安装失败！脚本已在出错处停止。${RESET}"
        echo -e "${YELLOW}请向上滚动查看具体的错误信息。${RESET}"
        echo -e "${RED}=======================================================${RESET}"
    else
        echo -e "\n${GREEN}===============================================${RESET}"
        echo -e "${BOLD}${GREEN}[+] Nockchain 增强版已通过手动编译方式成功安装！${RESET}"
        echo -e "${YELLOW}[!] 下一步: 请运行选项 2 设置您的挖矿公钥。${RESET}"
        echo -e "${GREEN}===============================================${RESET}"
    fi
    pause_and_return
}

# 2. 设置公钥
function set_pubkey() {
    show_banner
    echo -e "${BLUE}[*] 设置 MINING_PUBKEY 到 .env 文件...${RESET}"
    if [ ! -d "$NCK_DIR" ]; then echo -e "${RED}项目目录不存在，请先运行安装。${RESET}"; pause_and_return; return; fi

    local pubkey
    read -r -p "请输入您的挖矿公钥 (MINING_PUBKEY): " pubkey
    if ! [[ "$pubkey" =~ ^[0-9a-fA-F]{128}$ ]]; then
        echo -e "${RED}[-] 错误: 公钥格式不正确。它应该是128个十六进制字符。${RESET}"
        pause_and_return; return
    fi
    
    touch "$ENV_FILE"

    local num_cores=$(get_num_cores)
    sed -i '/^MINING_PUBKEY=/d' "$ENV_FILE"
    sed -i '/^MINER_THREADS=/d' "$ENV_FILE"
    
    echo "MINING_PUBKEY=$pubkey" >> "$ENV_FILE"
    echo "MINER_THREADS=$num_cores" >> "$ENV_FILE"

    echo -e "${GREEN}[+] 挖矿配置已更新到 $ENV_FILE。${RESET}"
    echo -e "${YELLOW}[!] 如果您已启动挖矿服务，请重启 (选项 3) 以使更改生效。${RESET}"
    pause_and_return
}

# 3. 安装并启动节点 (systemd)
function start_node() {
    show_banner
    echo -e "${BLUE}[*] 安装并启动 Nockchain 挖矿服务...${RESET}"
    if ! check_command systemctl; then
        echo -e "${RED}[-] 错误: 您的系统不支持 systemd。此功能不可用。${RESET}"; pause_and_return; return;
    fi
    
    if [ ! -f "$ENV_FILE" ] || ! grep -q "MINING_PUBKEY" "$ENV_FILE" || [[ -z "$(grep MINING_PUBKEY "$ENV_FILE" | cut -d '=' -f2)" ]]; then
        echo -e "${RED}[-] 错误: MINING_PUBKEY 未设置! 请先运行选项 2。${RESET}"; pause_and_return; return;
    fi
    
    cd "$NCK_DIR"
    
    echo -e "${BLUE}[*] 正在创建 systemd 服务...${RESET}"
    sudo bash -c "cat <<EOF > $SERVICE_FILE
[Unit]
Description=$SERVICE_NAME service
After=network-online.target

[Service]
User=$USER
Group=$(id -gn "$USER")
WorkingDirectory=$NCK_DIR
EnvironmentFile=$ENV_FILE
ExecStart=$HOME/.cargo/bin/nockchain
Restart=on-failure
RestartSec=10
LimitNOFILE=65536
Nice=-5

[Install]
WantedBy=multi-user.target
EOF"

    echo -e "${BLUE}[*] 正在重载并启动服务...${RESET}"
    sudo systemctl daemon-reload
    sudo systemctl enable "$SERVICE_NAME"
    sudo systemctl restart "$SERVICE_NAME"

    echo -e "${GREEN}===============================================${RESET}"
    echo -e "${GREEN}[+] Nockchain 挖矿服务已成功启动！${RESET}"
    echo -e "${YELLOW}    使用选项 5 查看实时日志。${RESET}"
    echo -e "${GREEN}===============================================${RESET}"
    pause_and_return
}

# 4. 停止节点 (systemd)
function stop_node() {
    show_banner
    echo -e "${BLUE}[*] 停止 Nockchain 挖矿服务...${RESET}"
    if ! systemctl list-units --full -all | grep -q "${SERVICE_NAME}.service"; then
        echo -e "${YELLOW}[!] Systemd 服务未安装或不可用。${RESET}"
        pause_and_return; return;
    fi
    sudo systemctl stop "$SERVICE_NAME"
    echo -e "${GREEN}[+] 服务已停止。${RESET}"
    pause_and_return
}

# 5. 查看日志 (systemd)
function view_logs() {
    show_banner
    echo -e "${BLUE}[*] 查看实时挖矿日志...${RESET}"
    if ! systemctl list-units --full -all | grep -q "${SERVICE_NAME}.service"; then
        echo -e "${YELLOW}[!] Systemd 服务未安装或不可用。${RESET}"
        pause_and_return; return;
    fi
    echo -e "${YELLOW}[!] 按 Ctrl+C 退出日志查看。${RESET}"
    journalctl -u "$SERVICE_NAME" -f --no-pager
    pause_and_return
}

# ========= 主菜单 =========
function main_menu() {
  show_banner
  echo -e "${BOLD}${GREEN}--- Nockchain 挖矿助手 ---${RESET}"
  echo "请选择操作:"
  echo ""
  echo -e "  ${BOLD}1) 一键安装增强版 Nockchain${RESET} ${RED}(动态内核版 v5.4)${RESET}"
  echo -e "  ${BOLD}2) 设置挖矿公钥 (MINING_PUBKEY)${RESET}"
  echo ""
  echo "  ${GREEN}3) 安装并启动/重启挖矿服务 (Systemd)${RESET}"
  echo "  ${RED}4) 停止挖矿服务 (Systemd)${RESET}"
  echo "  ${YELLOW}5) 查看实时挖矿日志 (Systemd)${RESET}"
  echo ""
  echo -e "  ${CYAN}0) 退出脚本${RESET}"
  echo ""
  read -r -p "请输入编号: " choice

  case "$choice" in
    1) install_all ;;
    2) set_pubkey ;;
    3) start_node ;;
    4) stop_node ;;
    5) view_logs ;;
    0) echo "退出脚本."; exit 0 ;;
    *) echo -e "${RED}[-] 无效选项，请重新输入。${RESET}"; pause_and_return ;;
  esac
}

# ========= 脚本入口 =========
while true; do
    main_menu
done

exit 0
