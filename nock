#!/bin/bash

# ========= Nockchain 全功能构建修复脚本 v12.0 完整版 =========
RESET='\033[0m'
BOLD='\033[1m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
CYAN='\033[0;36m'
PURPLE='\033[0;35m'

NCK_DIR="$HOME/nockchain"
ENV_FILE="$NCK_DIR/.env"
LOG_FILE="$HOME/nockchain_build.log"
HOONC_LOG="$HOME/nockchain_hoonc.log"
NODE_LOG="$HOME/nockchain_node.log"

function show_banner() {
  clear
  echo -e "${BOLD}${CYAN}"
  echo "======================================================"
  echo "   Nockchain 全功能构建修复脚本 v12.0 完整版"
  echo "======================================================"
  echo -e "${RESET}"
  echo "🎯 全面解决: hoonc + nockchain-wallet + nockchain"
  echo "💾 内存优化: 自动处理大内存需求和swap配置"
  echo "🔧 多重修复: 资产文件 + 虚拟清单 + 构建失败"
  echo "📊 智能诊断: 详细错误分析和解决建议"
  echo "🚀 完整功能: 钱包管理 + 节点运行 + 日志监控"
  echo "⚡ 节点修复: 专门解决启动失败和socket冲突"
  echo "------------------------------------------------------"
  echo ""
}

# ========= 系统优化和依赖安装 =========
function optimize_system_comprehensive() {
  echo -e "[*] 全面系统优化..."
  
  # 内存检查
  total_mem_kb=$(grep MemTotal /proc/meminfo | awk '{print $2}')
  total_mem_gb=$((total_mem_kb / 1024 / 1024))
  
  echo -e "${BLUE}[i] 系统内存: ${total_mem_gb}GB${RESET}"
  
  # 配置大容量swap
  current_swap=$(free -g | grep Swap | awk '{print $2}')
  required_swap=$((32 - total_mem_gb))
  
  if [ $required_swap -gt 0 ] && [ $current_swap -lt $required_swap ]; then
    echo -e "${YELLOW}[*] 配置${required_swap}GB swap空间...${RESET}"
    sudo fallocate -l ${required_swap}G /swapfile-nockchain-mega 2>/dev/null || \
    sudo dd if=/dev/zero of=/swapfile-nockchain-mega bs=1G count=$required_swap 2>/dev/null
    
    sudo chmod 600 /swapfile-nockchain-mega
    sudo mkswap /swapfile-nockchain-mega >/dev/null 2>&1
    sudo swapon /swapfile-nockchain-mega >/dev/null 2>&1
    echo -e "${GREEN}[+] Swap配置完成${RESET}"
  fi
  
  # 系统参数优化
  sudo sysctl -w vm.overcommit_memory=1 >/dev/null 2>&1 || true
  sudo sysctl -w vm.max_map_count=2097152 >/dev/null 2>&1 || true
  sudo sysctl -w vm.dirty_ratio=5 >/dev/null 2>&1 || true
  sudo sysctl -w vm.swappiness=10 >/dev/null 2>&1 || true
  
  echo -e "${GREEN}[+] 系统优化完成${RESET}"
}

function install_all_dependencies() {
  echo -e "[*] 安装完整构建依赖..."
  
  sudo apt-get update -y
  sudo apt install -y \
    build-essential \
    gcc g++ clang llvm llvm-dev libclang-dev \
    cmake make ninja-build \
    autoconf automake libtool \
    curl git wget \
    pkg-config pkgconf \
    libssl-dev openssl \
    python3 python3-dev \
    libffi-dev zlib1g-dev \
    screen htop unzip tar \
    jq bc time \
    lld \
    net-tools
  
  # 设置环境变量
  export CC=clang
  export CXX=clang++
  export CARGO_BUILD_JOBS=1
  
  echo -e "${GREEN}[+] 依赖安装完成${RESET}"
}

# ========= Rust环境管理 =========
function setup_rust_environment() {
  echo -e "[*] 设置Rust环境..."
  
  # 清理旧环境
  pkill -f cargo 2>/dev/null || true
  pkill -f rustc 2>/dev/null || true
  sleep 3
  
  # 安装或更新Rust
  if ! command -v rustc >/dev/null 2>&1; then
    echo -e "[*] 安装Rust..."
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
  fi
  
  source "$HOME/.cargo/env"
  export PATH="$HOME/.cargo/bin:$PATH"
  
  # 配置Cargo
  mkdir -p "$HOME/.cargo"
  cat > "$HOME/.cargo/config.toml" << 'EOF'
[build]
jobs = 1

[net]
retry = 20
timeout = 600

[env]
CC = "clang"
CXX = "clang++"

[profile.release]
opt-level = 1
debug = false
lto = false
panic = "abort"
incremental = false
codegen-units = 1

[profile.dev]
opt-level = 0
debug = false
incremental = false
codegen-units = 1
EOF
  
  echo -e "${GREEN}[+] Rust环境配置完成${RESET}"
}

# ========= 项目准备 =========
function prepare_nockchain_project() {
  echo -e "[*] 准备Nockchain项目..."
  
  cd "$HOME" || exit 1
  
  # 停止相关进程
  screen -XS nockchain quit 2>/dev/null || true
  pkill -f nockchain 2>/dev/null || true
  sleep 2
  
  # 清理旧项目
  if [ -d "nockchain" ]; then
    echo -e "[*] 清理旧项目..."
    rm -rf nockchain
  fi
  
  # 克隆项目
  echo -e "[*] 克隆Nockchain项目..."
  if git clone --depth 1 https://github.com/zorp-corp/nockchain; then
    cd nockchain || return 1
    
    # 创建.env文件
    if [ -f ".env_example" ]; then
      cp .env_example .env
    else
      cat > .env << 'EOF'
MINING_PUBKEY=
RUST_LOG=info
EOF
    fi
    
    # 创建缺失的资产文件
    echo -e "[*] 创建资产文件..."
    mkdir -p assets
    touch assets/wal.jam
    touch assets/dumb.jam
    touch assets/miner.jam
    
    echo -e "${GREEN}[+] 项目准备完成${RESET}"
    return 0
  else
    echo -e "${RED}[-] 项目克隆失败${RESET}"
    return 1
  fi
}

# ========= 完整构建流程 =========
function build_all_components() {
  echo -e "[*] 构建所有Nockchain组件..."
  
  cd "$NCK_DIR" || return 1
  
  source "$HOME/.cargo/env"
  export PATH="$HOME/.cargo/bin:$PATH"
  export CC=clang
  export CXX=clang++
  export CARGO_BUILD_JOBS=1
  export RUSTFLAGS="-C opt-level=1 -C debuginfo=0 -C panic=abort"
  
  # 清理构建缓存
  cargo clean >/dev/null 2>&1 || true
  rm -rf target/ 2>/dev/null || true
  
  # 更新依赖
  timeout 300 cargo update >>"$LOG_FILE" 2>&1 || true
  
  build_count=0
  
  # 构建hoonc
  echo -e "[*] 构建hoonc..."
  if build_hoonc_component; then
    ((build_count++))
    echo -e "${GREEN}[+] hoonc构建成功${RESET}"
  else
    echo -e "${YELLOW}[!] hoonc构建失败${RESET}"
  fi
  
  # 构建nockchain-wallet
  echo -e "[*] 构建nockchain-wallet..."
  if build_wallet_component; then
    ((build_count++))
    echo -e "${GREEN}[+] nockchain-wallet构建成功${RESET}"
  else
    echo -e "${YELLOW}[!] nockchain-wallet构建失败${RESET}"
  fi
  
  # 构建nockchain
  echo -e "[*] 构建nockchain..."
  if build_node_component; then
    ((build_count++))
    echo -e "${GREEN}[+] nockchain构建成功${RESET}"
  else
    echo -e "${YELLOW}[!] nockchain构建失败${RESET}"
  fi
  
  # 结果报告
  echo -e "[*] 构建结果总结..."
  echo -e "${BLUE}[i] 成功构建: $build_count/3 个组件${RESET}"
  
  for binary in "hoonc" "nockchain-wallet" "nockchain"; do
    if command -v "$binary" >/dev/null 2>&1; then
      binary_path=$(command -v "$binary")
      binary_size=$(du -h "$binary_path" 2>/dev/null | cut -f1 || echo "unknown")
      echo -e "${GREEN}  ✓ $binary: $binary_path (大小: $binary_size)${RESET}"
    else
      echo -e "${RED}  ✗ $binary: 未找到${RESET}"
    fi
  done
  
  if [ $build_count -ge 2 ]; then
    echo -e "${GREEN}[+] 构建成功！${RESET}"
    return 0
  else
    echo -e "${YELLOW}[!] 部分构建失败${RESET}"
    return 1
  fi
}

# ========= 组件构建函数 =========
function build_hoonc_component() {
  echo "=== 构建hoonc ===" >> "$HOONC_LOG"
  
  # 方法1: 在hoonc目录构建
  if [ -d "crates/hoonc" ]; then
    cd crates/hoonc
    if timeout 3600 cargo build --bin hoonc >> "$HOONC_LOG" 2>&1; then
      if [ -f "target/debug/hoonc" ]; then
        mkdir -p "$HOME/.cargo/bin"
        cp target/debug/hoonc "$HOME/.cargo/bin/"
        chmod +x "$HOME/.cargo/bin/hoonc"
        cd "$NCK_DIR"
        return 0
      fi
    fi
    cd "$NCK_DIR"
  fi
  
  # 方法2: 工作空间构建
  if timeout 3600 cargo build -p hoonc --bin hoonc >> "$HOONC_LOG" 2>&1; then
    if [ -f "target/debug/hoonc" ]; then
      mkdir -p "$HOME/.cargo/bin"
      cp target/debug/hoonc "$HOME/.cargo/bin/"
      chmod +x "$HOME/.cargo/bin/hoonc"
      return 0
    fi
  fi
  
  return 1
}

function build_wallet_component() {
  # 方法1: 在wallet目录构建
  if [ -d "crates/nockchain-wallet" ]; then
    cd crates/nockchain-wallet
    if timeout 2400 cargo build --bin nockchain-wallet >> "$LOG_FILE" 2>&1; then
      if [ -f "target/debug/nockchain-wallet" ]; then
        mkdir -p "$HOME/.cargo/bin"
        cp target/debug/nockchain-wallet "$HOME/.cargo/bin/"
        cd "$NCK_DIR"
        return 0
      fi
    fi
    cd "$NCK_DIR"
  fi
  
  # 方法2: 工作空间构建
  if timeout 2400 cargo build -p nockchain-wallet >> "$LOG_FILE" 2>&1; then
    if [ -f "target/debug/nockchain-wallet" ]; then
      mkdir -p "$HOME/.cargo/bin"
      cp target/debug/nockchain-wallet "$HOME/.cargo/bin/"
      return 0
    fi
  fi
  
  return 1
}

function build_node_component() {
  # 方法1: 在node目录构建
  if [ -d "crates/nockchain" ]; then
    cd crates/nockchain
    if timeout 2400 cargo build --bin nockchain >> "$LOG_FILE" 2>&1; then
      if [ -f "target/debug/nockchain" ]; then
        mkdir -p "$HOME/.cargo/bin"
        cp target/debug/nockchain "$HOME/.cargo/bin/"
        cd "$NCK_DIR"
        return 0
      fi
    fi
    cd "$NCK_DIR"
  fi
  
  # 方法2: 工作空间构建
  if timeout 2400 cargo build -p nockchain >> "$LOG_FILE" 2>&1; then
    if [ -f "target/debug/nockchain" ]; then
      mkdir -p "$HOME/.cargo/bin"
      cp target/debug/nockchain "$HOME/.cargo/bin/"
      return 0
    fi
  fi
  
  return 1
}

# ========= 完整安装流程 =========
function complete_installation() {
  echo -e "[*] 开始Nockchain完整安装流程..."
  
  # 创建日志文件
  echo "=== Nockchain完整安装日志 $(date) ===" > "$LOG_FILE"
  echo "=== Nockchain hoonc构建日志 $(date) ===" > "$HOONC_LOG"
  
  optimize_system_comprehensive
  
  if ! install_all_dependencies; then
    echo -e "${RED}[-] 依赖安装失败${RESET}"
    pause_and_return
    return
  fi
  
  if ! setup_rust_environment; then
    echo -e "${RED}[-] Rust环境配置失败${RESET}"
    pause_and_return
    return
  fi
  
  if ! prepare_nockchain_project; then
    echo -e "${RED}[-] 项目准备失败${RESET}"
    pause_and_return
    return
  fi
  
  if build_all_components; then
    echo -e "${GREEN}[+] ✅ Nockchain完整安装成功！${RESET}"
    echo -e "${BLUE}[i] 已修复所有已知构建问题${RESET}"
    echo -e "${BLUE}[i] 详细日志: $LOG_FILE${RESET}"
    echo -e "${BLUE}[i] 下一步: 生成钱包和设置挖矿公钥${RESET}"
  else
    echo -e "${YELLOW}[!] 安装部分成功${RESET}"
    echo -e "${BLUE}[i] 查看诊断信息获取详情${RESET}"
  fi
  
  pause_and_return
}

# ========= 节点启动修复功能 =========
function fix_node_startup_environment() {
  echo -e "[*] 修复节点启动环境..."
  
  cd "$NCK_DIR" || return 1
  
  # 清理socket文件冲突
  echo -e "[*] 清理socket文件冲突..."
  socket_files=(
    ".socket/nockchain.sock"
    ".socket/nockchain_npc.sock"
    "nockchain.sock"
    "/tmp/nockchain.sock"
    ".data.nockchain/nockchain.sock"
  )
  
  for socket_file in "${socket_files[@]}"; do
    if [ -e "$socket_file" ]; then
      echo -e "${YELLOW}[!] 发现冲突socket: $socket_file${RESET}"
      rm -f "$socket_file" 2>/dev/null || true
    fi
  done
  
  # 检查端口占用
  if netstat -tlnp 2>/dev/null | grep -q ":3006 "; then
    echo -e "${YELLOW}[!] 端口3006被占用，尝试释放...${RESET}"
    pid=$(netstat -tlnp 2>/dev/null | grep ":3006 " | awk '{print $7}' | cut -d'/' -f1 | head -1)
    if [ -n "$pid" ] && [ "$pid" != "-" ]; then
      kill -9 "$pid" 2>/dev/null || true
    fi
  fi
  
  # 停止冲突进程
  pkill -f nockchain 2>/dev/null || true
  screen -XS nockchain quit 2>/dev/null || true
  sleep 3
  
  # 重建目录结构
  mkdir -p .socket .data.nockchain
  chmod 755 .socket .data.nockchain
  
  echo -e "${GREEN}[+] 节点启动环境修复完成${RESET}"
}

# ========= 钱包操作 =========
function generate_wallet() {
  echo -e "[*] 生成钱包..."
  cd "$NCK_DIR" || return 1
  
  source "$HOME/.cargo/env" 2>/dev/null || true
  export PATH="$HOME/.cargo/bin:$PATH"
  
  wallet_bin=""
  if command -v nockchain-wallet >/dev/null 2>&1; then
    wallet_bin="nockchain-wallet"
  elif [ -f "target/debug/nockchain-wallet" ]; then
    wallet_bin="./target/debug/nockchain-wallet"
  elif [ -f "target/release/nockchain-wallet" ]; then
    wallet_bin="./target/release/nockchain-wallet"
  fi
  
  if [ -z "$wallet_bin" ]; then
    echo -e "${RED}[-] 未找到nockchain-wallet程序${RESET}"
    echo -e "${YELLOW}[!] 请先完成构建${RESET}"
    pause_and_return
    return
  fi
  
  echo -e "${GREEN}[+] 使用钱包: $wallet_bin${RESET}"
  
  if ! "$wallet_bin" keygen 2>/dev/null; then
    echo -e "${YELLOW}[!] 钱包生成可能有问题，尝试debug模式...${RESET}"
    RUST_LOG=debug "$wallet_bin" keygen
  fi
  
  echo -e "${YELLOW}[!] 请复制上方的公钥${RESET}"
  echo -e "${BLUE}[i] 公钥格式：128位16进制${RESET}"
  pause_and_return
}

function set_pubkey_env() {
  echo -e "[*] 设置挖矿公钥..."
  cd "$NCK_DIR" || return 1

  echo -e "${BLUE}[i] 公钥格式：128位16进制字符串${RESET}"
  echo ""
  
  while true; do
    read -p "请输入公钥: " pubkey
    
    if [ -z "$pubkey" ]; then
      echo -e "${RED}[-] 公钥不能为空${RESET}"
      continue
    fi
    
    pubkey=$(echo "$pubkey" | tr -d ' \n\r\t' | tr '[:upper:]' '[:lower:]')
    
    if [ ${#pubkey} -eq 128 ] && [[ "$pubkey" =~ ^[0-9a-f]{128}$ ]]; then
      sed -i '/^MINING_PUBKEY=/d' "$ENV_FILE" 2>/dev/null || true
      echo "MINING_PUBKEY=$pubkey" >> "$ENV_FILE"
      echo -e "${GREEN}[+] 公钥已写入.env文件${RESET}"
      break
    else
      echo -e "${YELLOW}[!] 公钥格式错误，请重新输入${RESET}"
    fi
  done
  
  pause_and_return
}

function export_keys() {
  echo -e "[*] 导出密钥..."
  cd "$NCK_DIR" || return 1
  
  source "$HOME/.cargo/env" 2>/dev/null || true
  export PATH="$HOME/.cargo/bin:$PATH"
  
  wallet_bin=""
  if command -v nockchain-wallet >/dev/null 2>&1; then
    wallet_bin="nockchain-wallet"
  elif [ -f "target/debug/nockchain-wallet" ]; then
    wallet_bin="./target/debug/nockchain-wallet"
  elif [ -f "target/release/nockchain-wallet" ]; then
    wallet_bin="./target/release/nockchain-wallet"
  fi
  
  if [ -z "$wallet_bin" ]; then
    echo -e "${RED}[-] 未找到钱包程序${RESET}"
    pause_and_return
    return
  fi
  
  "$wallet_bin" export-keys
  echo -e "${GREEN}[+] 密钥已导出${RESET}"
  pause_and_return
}

function import_keys() {
  echo -e "[*] 导入密钥..."
  cd "$NCK_DIR" || return 1
  
  source "$HOME/.cargo/env" 2>/dev/null || true
  export PATH="$HOME/.cargo/bin:$PATH"
  
  wallet_bin=""
  if command -v nockchain-wallet >/dev/null 2>&1; then
    wallet_bin="nockchain-wallet"
  elif [ -f "target/debug/nockchain-wallet" ]; then
    wallet_bin="./target/debug/nockchain-wallet"
  elif [ -f "target/release/nockchain-wallet" ]; then
    wallet_bin="./target/release/nockchain-wallet"
  fi
  
  if [ -z "$wallet_bin" ]; then
    echo -e "${RED}[-] 未找到钱包程序${RESET}"
    pause_and_return
    return
  fi
  
  read -p "密钥文件路径 (默认: ./keys.export): " keyfile
  keyfile=${keyfile:-"./keys.export"}
  
  if [ -f "$keyfile" ]; then
    "$wallet_bin" import-keys --input "$keyfile"
    echo -e "${GREEN}[+] 密钥已导入${RESET}"
  else
    echo -e "${RED}[-] 文件不存在: $keyfile${RESET}"
  fi
  pause_and_return
}

# ========= 节点操作（修复版） =========
function start_node_fixed() {
  echo -e "[*] 启动节点（修复版）..."
  cd "$NCK_DIR" || return 1
  
  if [ ! -f "$ENV_FILE" ]; then
    echo -e "${RED}[-] .env文件不存在${RESET}"
    pause_and_return
    return
  fi
  
  source "$ENV_FILE"
  if [ -z "$MINING_PUBKEY" ]; then
    echo -e "${RED}[-] 未设置挖矿公钥${RESET}"
    pause_and_return
    return
  fi

  source "$HOME/.cargo/env" 2>/dev/null || true
  export PATH="$HOME/.cargo/bin:$PATH"

  node_bin=""
  if command -v nockchain >/dev/null 2>&1; then
    node_bin="nockchain"
  elif [ -f "target/debug/nockchain" ]; then
    node_bin="./target/debug/nockchain"
  elif [ -f "target/release/nockchain" ]; then
    node_bin="./target/release/nockchain"
  fi
  
  if [ -z "$node_bin" ]; then
    echo -e "${RED}[-] 未找到节点程序${RESET}"
    pause_and_return
    return
  fi

  echo -e "${GREEN}[+] 使用节点: $node_bin${RESET}"

  # 修复启动环境
  fix_node_startup_environment

  start_cmd="RUST_LOG=info $node_bin --mining-pubkey $MINING_PUBKEY \
--mine \
--peer /ip4/95.216.102.60/udp/3006/quic-v1 \
--peer /ip4/65.109.156.108/udp/3006/quic-v1 \
--peer /ip4/65.21.67.175/udp/3006/quic-v1 \
--peer /ip4/65.109.156.172/udp/3006/quic-v1 \
--peer /ip4/34.174.22.166/udp/3006/quic-v1 \
--npc-socket .socket/nockchain.sock \
--bind /ip4/0.0.0.0/udp/3006/quic-v1"

  if command -v screen >/dev/null 2>&1; then
    screen -dmS nockchain bash -c "cd '$NCK_DIR' && $start_cmd 2>&1 | tee '$NODE_LOG'"
    sleep 5
    
    if screen -list | grep -qw "nockchain"; then
      echo -e "${GREEN}[+] 节点已启动 (screen: nockchain)${RESET}"
      echo -e "${YELLOW}[!] 使用 'screen -r nockchain' 查看日志${RESET}"
      
      # 检查socket文件
      if [ -e ".socket/nockchain.sock" ]; then
        echo -e "${GREEN}[+] Socket文件已创建${RESET}"
      else
        echo -e "${YELLOW}[!] Socket文件未创建，检查日志${RESET}"
      fi
    else
      echo -e "${RED}[-] 节点启动失败${RESET}"
    fi
  else
    nohup bash -c "$start_cmd" > "$NODE_LOG" 2>&1 &
    echo -e "${GREEN}[+] 节点已后台启动${RESET}"
  fi
  
  pause_and_return
}

function view_logs() {
  if command -v screen >/dev/null 2>&1 && screen -list | grep -qw "nockchain"; then
    echo -e "${YELLOW}[!] 进入日志查看 (Ctrl+A+D 退出)...${RESET}"
    screen -r nockchain
  elif [ -f "$NODE_LOG" ]; then
    echo -e "${YELLOW}[!] 显示节点日志:${RESET}"
    tail -f "$NODE_LOG"
  elif [ -f "$NCK_DIR/nockchain.log" ]; then
    echo -e "${YELLOW}[!] 显示日志:${RESET}"
    tail -f "$NCK_DIR/nockchain.log"
  else
    echo -e "${RED}[-] 无日志文件${RESET}"
  fi
  pause_and_return
}

function check_status() {
  echo -e "[*] 检查完整状态..."
  
  cd "$NCK_DIR" || return 1
  
  # 检查公钥配置
  if [ -f "$ENV_FILE" ]; then
    source "$ENV_FILE" >/dev/null 2>&1
    if [ -n "$MINING_PUBKEY" ]; then
      echo -e "${GREEN}[+] 公钥: ${MINING_PUBKEY:0:16}...${MINING_PUBKEY: -16}${RESET}"
    else
      echo -e "${YELLOW}[!] 未设置公钥${RESET}"
    fi
  fi
  
  # 检查所有组件
  echo -e "${BLUE}[i] 组件状态:${RESET}"
  component_count=0
  
  for binary in "hoonc" "nockchain-wallet" "nockchain"; do
    if command -v "$binary" >/dev/null 2>&1; then
      binary_path=$(command -v "$binary")
      binary_size=$(du -h "$binary_path" 2>/dev/null | cut -f1 || echo "unknown")
      echo -e "${GREEN}  ✓ $binary: $binary_size${RESET}"
      ((component_count++))
    else
      echo -e "${RED}  ✗ $binary: 未找到${RESET}"
    fi
  done
  
  echo -e "${BLUE}[i] 构建状态: $component_count/3 组件成功${RESET}"
  
  # 检查节点运行状态
  if command -v screen >/dev/null 2>&1 && screen -list | grep -qw "nockchain"; then
    echo -e "${GREEN}[+] 节点运行中 (screen)${RESET}"
  elif pgrep -f "nockchain" >/dev/null 2>&1; then
    echo -e "${GREEN}[+] 节点运行中 (进程)${RESET}"
  else
    echo -e "${YELLOW}[!] 节点未运行${RESET}"
  fi
  
  # 检查socket文件
  if [ -e ".socket/nockchain.sock" ]; then
    echo -e "${GREEN}[+] Socket文件存在${RESET}"
  else
    echo -e "${YELLOW}[!] Socket文件不存在${RESET}"
  fi
  
  # 显示系统资源
  echo -e "${BLUE}[i] 系统资源:${RESET}"
  echo -e "  内存: $(free -h | grep Mem | awk '{print $3"/"$2}')"
  echo -e "  Swap: $(free -h | grep Swap | awk '{print $3"/"$2}')"
  
  if [ $component_count -eq 3 ]; then
    echo -e "${GREEN}[+] ✅ 所有组件构建成功！${RESET}"
  else
    echo -e "${YELLOW}[!] 部分组件缺失，需要修复构建${RESET}"
  fi
  
  pause_and_return
}

function stop_node() {
  echo -e "[*] 停止节点..."
  
  if command -v screen >/dev/null 2>&1 && screen -list | grep -qw "nockchain"; then
    screen -S nockchain -X quit >/dev/null 2>&1
  fi
  
  if pgrep -f "nockchain" >/dev/null 2>&1; then
    pkill -f "nockchain" >/dev/null 2>&1
  fi
  
  # 清理socket文件
  cd "$NCK_DIR" 2>/dev/null || true
  rm -f .socket/nockchain.sock 2>/dev/null || true
  
  sleep 2
  echo -e "${GREEN}[+] 节点已停止${RESET}"
  pause_and_return
}

# ========= 诊断和修复功能 =========
function diagnose_build_failure() {
  echo -e "[*] 构建失败诊断..."
  
  echo -e "${BLUE}[i] 系统信息:${RESET}"
  echo -e "  内存: $(free -h | grep Mem | awk '{print $3"/"$2}')"
  echo -e "  Swap: $(free -h | grep Swap | awk '{print $3"/"$2}')"
  echo -e "  磁盘: $(df -h $HOME | tail -1 | awk '{print $3"/"$2" ("$5" used)"}')"
  
  echo -e "${BLUE}[i] 构建工具:${RESET}"
  for tool in gcc g++ clang rustc cargo; do
    if command -v "$tool" >/dev/null 2>&1; then
      echo -e "  ✓ $tool: $(command -v $tool)"
    else
      echo -e "  ✗ $tool: 未找到"
    fi
  done
  
  echo -e "${BLUE}[i] 最新构建错误:${RESET}"
  if [ -f "$LOG_FILE" ]; then
    echo "查看完整日志: cat $LOG_FILE"
    echo ""
    echo "最新错误:"
    tail -20 "$LOG_FILE" | grep -i "error\|failed\|panic" | tail -5
  fi
  
  echo -e "${YELLOW}[!] 推荐解决方案:${RESET}"
  echo "1. 增加系统内存到16GB+"
  echo "2. 增加swap空间到16GB+"  
  echo "3. 检查磁盘空间是否充足"
  echo "4. 重新运行完整安装流程"
  
  pause_and_return
}

function cleanup_and_retry() {
  echo -e "[*] 清理环境并重试..."
  
  # 停止所有相关进程
  pkill -f cargo 2>/dev/null || true
  pkill -f rustc 2>/dev/null || true
  pkill -f nockchain 2>/dev/null || true
  sleep 3
  
  # 清理构建缓存
  cd "$NCK_DIR" 2>/dev/null || true
  cargo clean >/dev/null 2>&1 || true
  rm -rf target/ 2>/dev/null || true
  rm -rf ~/.cargo/registry/cache/ 2>/dev/null || true
  
  # 清理系统缓存
  sync
  sudo sysctl -w vm.drop_caches=3 >/dev/null 2>&1 || true
  
  echo -e "${GREEN}[+] 清理完成，准备重试${RESET}"
  sleep 2
  
  # 重新构建
  build_all_components
  pause_and_return
}

function pause_and_return() {
  echo ""
  read -n1 -r -p "按任意键返回主菜单..." key
  main_menu
}

# ========= 主菜单（完整版） =========
function main_menu() {
  show_banner
  echo "请选择操作:"
  echo ""
  echo "📦 安装和构建:"
  echo "  1) 🚀 完整安装 (从零开始安装所有组件)"
  echo "  2) 🔧 修复构建失败"
  echo "  3) 🧹 清理环境并重试"
  echo ""
  echo "🔑 钱包管理:"
  echo "  4) 🔑 生成钱包"
  echo "  5) 📝 设置挖矿公钥"
  echo "  6) 💾 导出密钥"
  echo "  7) 📂 导入密钥"
  echo ""
  echo "⚡ 节点操作:"
  echo "  8) ⚡ 启动节点（修复版）"
  echo "  9) 📊 查看日志"
  echo " 10) ⏹️  停止节点"
  echo ""
  echo "🔍 状态和诊断:"
  echo " 11) 🔍 检查完整状态"
  echo " 12) 📊 构建失败诊断"
  echo " 13) 📈 查看构建日志"
  echo ""
  echo "  0) 退出"
  echo ""
  echo -e "${CYAN}💡 完整功能: 安装 + 构建 + 钱包 + 节点 + 诊断${RESET}"
  echo -e "${CYAN}💡 智能修复: 资产文件 + 虚拟清单 + 内存优化 + 节点启动${RESET}"
  echo -e "${CYAN}💡 全面管理: 从安装到运行的完整解决方案${RESET}"
  echo ""
  read -p "请输入编号: " choice

  case "$choice" in
    1) complete_installation ;;
    2) build_all_components; pause_and_return ;;
    3) cleanup_and_retry ;;
    4) generate_wallet ;;
    5) set_pubkey_env ;;
    6) export_keys ;;
    7) import_keys ;;
    8) start_node_fixed ;;
    9) view_logs ;;
    10) stop_node ;;
    11) check_status ;;
    12) diagnose_build_failure ;;
    13) 
      echo -e "${BLUE}[i] 构建日志:${RESET}"
      if [ -f "$LOG_FILE" ]; then
        echo "=== 主构建日志 ==="
        tail -30 "$LOG_FILE"
      fi
      if [ -f "$HOONC_LOG" ]; then
        echo ""
        echo "=== hoonc构建日志 ==="
        tail -20 "$HOONC_LOG"
      fi
      if [ -f "$NODE_LOG" ]; then
        echo ""
        echo "=== 节点启动日志 ==="
        tail -15 "$NODE_LOG"
      fi
      pause_and_return
      ;;
    0) echo "退出脚本."; exit 0 ;;
    *) echo -e "${RED}[-] 无效选项${RESET}"; pause_and_return ;;
  esac
}

# 启动主菜单
main_menu
