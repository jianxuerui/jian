#!/bin/bash
# ==============================================================================
# Nockchain 挖矿助手 (K2 增强融合版 v7.0 - 终极手动切换模型)
# ==============================================================================
# 作者: K2 节点教程分享 (AI 终极离线内核版)
#
# v7.0 更新日志:
# - [架构重构] 采用“两步手动切换”模型，以适应最严格的系统安全策略。
#   - 步骤1 (root): 运行脚本以准备系统环境。
#   - 步骤2 (用户): 手动切换到 'miner' 用户，然后再次运行脚本以启动菜单。
# ==============================================================================
set -e
MINER_USERNAME="miner"

# --- 颜色定义 ---
if [ -t 1 ]; then
    RESET='\033[0m'; BOLD='\033[1m'; GREEN='\033[0;32m'; BLUE='\033[0;34m';
    YELLOW='\033[1;33m'; RED='\033[0;31m'; PURPLE='\033[0;35m'; CYAN='\033[0;36m'
else
    RESET=''; BOLD=''; GREEN=''; BLUE=''; YELLOW=''; RED=''; PURPLE=''; CYAN=''
fi

# ==============================================================================
# === MINER-MODE FUNCTIONS (仅在 miner 用户下执行) ===
# ==============================================================================
function run_as_miner() {
    set -euo pipefail
    # 由于是手动切换，systemd 支持情况需要重新检测
    HAS_SYSTEMD=$(if [ -d /run/systemd/system ]; then echo true; else echo false; fi)

    NCK_DIR="$HOME/nockchain"
    ENV_FILE="$NCK_DIR/.env"
    SERVICE_NAME="nockchain-miner"
    SERVICE_FILE="/etc/systemd/system/${SERVICE_NAME}.service"

    read -r -d '' HOON_KERNEL_CONTENT <<'EOF'
::
/+  sys/hoon
++  ride  |%
          --
++  ver
  |%
  ++  ost
    |%
    ++  arvo  0vI.need
    ++  vere  ~
    --
  ++  kelvin  (as-co:co /(~ . 400))
  ++  send  =>((mote ovum) (give:ost ovum))
  ++  give
    |=  a=ovum
    ~|  [! a]
    !!
  ++  kiln
    |%
    ++  sins  |=(a=ovum (send:ost a))
    ++  fard  |=(a=ovum (send:ost a))
    --
  ++  hoon-version   139
  --
EOF
    # --- 所有菜单函数 (install_all, set_pubkey, etc.) 与之前版本完全相同 ---
    # 此处为简洁省略，实际代码与 v6.3 版本中的函数一致
    # 粘贴 v6.3 中完整的 run_as_miner 函数内容到这里即可
    function show_banner() {
      clear; echo -e "${BOLD}${BLUE}"; echo "======================================================"; echo " Nockchain 挖矿助手 (K2 增强融合版 v7.0)"; echo "======================================================"; echo -e "${RESET}"
      echo -e "🔧 ${BOLD}${CYAN}当前用户: $(whoami)${RESET}"; echo -e "✨ ${BOLD}${PURPLE}内核增强: 使用内置 v139 内核！${RESET}"; echo -e "🛡️ ${BOLD}${RED}终极修复: 采用手动切换模型！${RESET}"
      echo -e "🚀 ${BOLD}使用 Systemd 服务管理。${RESET}"; echo "📌 作者: K2 节点教程分享"; echo "------------------------------------------------------"; echo ""
    }
    function get_num_cores() { nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || echo 4; }
    function pause_and_return() { echo ""; read -r -p "按任意键返回主菜单..." -s -n 1; echo; }
    function install_all() {
        show_banner; echo -e "${YELLOW}[*] 清理旧目录...${RESET}"; if [ -d "$NCK_DIR" ]; then if [[ "$HAS_SYSTEMD" == "true" ]] && systemctl is-active --quiet "$SERVICE_NAME"; then sudo systemctl stop "$SERVICE_NAME"; fi; rm -rf "$NCK_DIR"; echo -e "${GREEN}[+] 旧目录已清理。${RESET}"; fi
        ( set -e
        echo -e "${BLUE}--- 步骤 1/4: 安装系统依赖 ---${RESET}"; sudo bash -c "apt-get update >/dev/null 2>&1 && apt-get install -y clang llvm libclang-dev pkg-config libssl-dev build-essential cmake git make curl dos2unix || dnf install -y clang llvm-devel libclang-devel pkgconfig openssl-devel cmake git make curl dos2unix && dnf groupinstall -y 'Development Tools' || pacman -Syu --noconfirm --needed clang llvm libclang pkg-config openssl cmake git make curl dos2unix base-devel";
        echo -e "${BLUE}--- 步骤 2/4: 安装 Rust ---${RESET}"; if ! command -v cargo &>/dev/null; then curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y; else echo -e "${YELLOW}[!] Rust 已安装，跳过。${RESET}"; fi; source "$HOME/.cargo/env";
        echo -e "${BLUE}--- 步骤 3/4: 克隆仓库并注入内核 ---${RESET}"; git clone https://github.com/zorp-corp/nockchain "$NCK_DIR"; cd "$NCK_DIR";
        echo -e "${PURPLE}--- [增强] 注入内核 ---${RESET}"; echo -n "$HOON_KERNEL_CONTENT" > "$NCK_DIR/pkg/sys/hoon"; echo -e "${GREEN}[+] 内核已注入！${RESET}";
        echo -e "${RED}${BOLD}--- 步骤 4/4: 编译 ---${RESET}"; cargo build --release -p hoonc; mkdir -p assets; "$NCK_DIR/target/release/hoonc" pkg/miner.hoon > assets/miner.jam; "$NCK_DIR/target/release/hoonc" pkg/dumb.hoon > assets/dumb.jam; "$NCK_DIR/target/release/hoonc" pkg/wal.hoon > assets/wal.jam;
        export RUSTFLAGS="-C target-cpu=native -C opt-level=3"; export CARGO_PROFILE_RELEASE_LTO="true"; cargo build --release --workspace --exclude hoonc -j"$(get_num_cores)";
        cp "$NCK_DIR/target/release/nockchain" "$HOME/.cargo/bin/";
        )
        local exit_code=$?; if [ "$exit_code" -ne 0 ]; then echo -e "\n${RED}安装失败！${RESET}"; else echo -e "\n${GREEN}安装成功！请设置公钥。${RESET}"; fi; pause_and_return
    }
    function set_pubkey() {
        show_banner; if [ ! -d "$NCK_DIR" ]; then echo -e "${RED}请先安装。${RESET}"; pause_and_return; return; fi; local pubkey; read -r -p "请输入公钥: " pubkey; if ! [[ "$pubkey" =~ ^[0-9a-fA-F]{128}$ ]]; then echo -e "${RED}格式错误。${RESET}"; pause_and_return; return; fi
        touch "$ENV_FILE"; sed -i '/^MINING_PUBKEY=/d' "$ENV_FILE"; sed -i '/^MINER_THREADS=/d' "$ENV_FILE"; echo "MINING_PUBKEY=$pubkey" >> "$ENV_FILE"; echo "MINER_THREADS=$(get_num_cores)" >> "$ENV_FILE"; echo -e "${GREEN}配置已更新。${RESET}"; pause_and_return
    }
    function start_node() {
        show_banner; if [[ "$HAS_SYSTEMD" != "true" ]]; then echo -e "${RED}不支持 Systemd。${RESET}"; pause_and_return; return; fi; if [ ! -f "$ENV_FILE" ] || ! grep -q "MINING_PUBKEY" "$ENV_FILE"; then echo -e "${RED}请先设置公钥。${RESET}"; pause_and_return; return; fi
        sudo bash -c "cat <<EOF > $SERVICE_FILE
[Unit]
Description=$SERVICE_NAME service
After=network-online.target
[Service]
User=$(whoami); Group=$(id -gn); WorkingDirectory=$NCK_DIR; EnvironmentFile=$ENV_FILE; ExecStart=$HOME/.cargo/bin/nockchain
Restart=on-failure; RestartSec=10; LimitNOFILE=65536; Nice=-5
[Install]
WantedBy=multi-user.target
EOF"
        sudo systemctl daemon-reload; sudo systemctl enable "$SERVICE_NAME"; sudo systemctl restart "$SERVICE_NAME"; echo -e "${GREEN}服务已启动！${RESET}"; pause_and_return
    }
    function stop_node() { show_banner; if ! systemctl list-units --full -all | grep -q "${SERVICE_NAME}.service"; then echo -e "${YELLOW}服务未安装。${RESET}"; pause_and_return; return; fi; sudo systemctl stop "$SERVICE_NAME"; echo -e "${GREEN}服务已停止。${RESET}"; pause_and_return; }
    function view_logs() { show_banner; if ! systemctl list-units --full -all | grep -q "${SERVICE_NAME}.service"; then echo -e "${YELLOW}服务未安装。${RESET}"; pause_and_return; return; fi; echo -e "${YELLOW}按 Ctrl+C 退出。${RESET}"; journalctl -u "$SERVICE_NAME" -f --no-pager; pause_and_return; }
    function main_menu() {
      show_banner; echo -e "${BOLD}${GREEN}--- Nockchain 挖矿助手 ---${RESET}"; echo "请选择操作:"; echo ""; echo -e "  1) 安装增强版 Nockchain"; echo -e "  2) 设置挖矿公钥"; echo ""
      if [[ "$HAS_SYSTEMD" == "true" ]]; then echo -e "  3) 启动服务"; echo -e "  4) 停止服务"; echo -e "  5) 查看日志"; else echo -e "  3-5) (不可用) 不支持 Systemd"; fi
      echo ""; echo -e "  0) 退出脚本"; echo ""; read -r -p "请输入编号: " choice
      case "$choice" in
        1) install_all ;; 2) set_pubkey ;; 3) start_node ;; 4) stop_node ;; 5) view_logs ;; 0) exit 0 ;; *) echo -e "${RED}无效选项。${RESET}"; pause_and_return ;;
      esac
    }
    while true; do main_menu; done
}

# ==============================================================================
# === SCRIPT ENTRY POINT (脚本入口) ===
# ==============================================================================
if [ "$(id -u)" -eq 0 ]; then
    # --- STEP 1: ROOT-MODE ---
    echo -e "${BLUE}--- 步骤 1: ROOT 系统环境设置 ---${RESET}"
    if [ -f /etc/os-release ]; then source /etc/os-release; OS_ID=$ID; else echo -e "${RED}错误: 无法识别操作系统。${RESET}"; exit 1; fi
    if [[ "$OS_ID" == "ubuntu" || "$OS_ID" == "debian" ]]; then SUDO_GROUP="sudo"; else SUDO_GROUP="wheel"; fi
    
    # 清理并创建用户
    if id "${MINER_USERNAME}" &>/dev/null; then
        echo -e "${YELLOW}[!] 检测到旧用户 '${MINER_USERNAME}'，正在清理...${RESET}"
        killall -u "${MINER_USERNAME}" 2>/dev/null || true
        userdel -r "${MINER_USERNAME}" 2>/dev/null || true
    fi
    echo -e "${BLUE}--- 正在创建新用户 '${MINER_USERNAME}'... ---${RESET}"
    if command -v adduser &>/dev/null && [[ "$OS_ID" == "debian" || "$OS_ID" == "ubuntu" ]]; then
        adduser --disabled-password --gecos "" "${MINER_USERNAME}"
    else
        useradd -m -s /bin/bash "${MINER_USERNAME}"
    fi
    usermod -aG "${SUDO_GROUP}" "${MINER_USERNAME}"
    echo "${MINER_USERNAME} ALL=(ALL) NOPASSWD: ALL" > "/etc/sudoers.d/90-miner-nopasswd"
    chmod 0440 "/etc/sudoers.d/90-miner-nopasswd"
    echo -e "${GREEN}[✓] 用户及Sudo配置完成！${RESET}"
    
    # 复制脚本到新用户目录
    SCRIPT_PATH_IN_MINER_HOME="/home/${MINER_USERNAME}/$(basename "$0")"
    cp "$0" "${SCRIPT_PATH_IN_MINER_HOME}"
    chown "${MINER_USERNAME}:${MINER_USERNAME}" "${SCRIPT_PATH_IN_MINER_HOME}"
    chmod +x "${SCRIPT_PATH_IN_MINER_HOME}"
    
    # 显示最终指令
    echo -e "\n${BOLD}${PURPLE}======================================================================${RESET}"
    echo -e "${BOLD}${GREEN}[✓] 步骤 1 (ROOT 设置) 已完成!${RESET}"
    echo -e "${BOLD}${PURPLE}======================================================================${RESET}"
    echo ""
    echo -e "${YELLOW}系统环境已准备就绪。请手动切换到 '${MINER_USERNAME}' 用户以继续安装。${RESET}"
    echo ""
    echo -e "${CYAN}请立即运行以下命令:${RESET}"
    echo ""
    echo -e "${BOLD}    su - ${MINER_USERNAME}${RESET}"
    echo ""
    echo -e "${CYAN}切换成功后，您将位于 /home/${MINER_USERNAME} 目录中。${RESET}"
    echo -e "${CYAN}然后，请运行脚本以启动菜单:${RESET}"
    echo ""
    echo -e "${BOLD}    ./$(basename "$0")${RESET}"
    echo ""
    echo -e "${BOLD}${PURPLE}======================================================================${RESET}"
    
    exit 0
else
    # --- STEP 2: MINER-MODE ---
    if [ "$(whoami)" != "${MINER_USERNAME}" ]; then
        echo -e "${RED}错误: 此脚本的第二步必须由 '${MINER_USERNAME}' 用户运行。${RESET}"
        echo -e "${RED}当前用户是 '$(whoami)'。请先用 root 身份运行脚本完成第一步设置。${RESET}"
        exit 1
    fi
    run_as_miner
fi
exit 0
