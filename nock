#!/usr/bin/env bash

# ========= 容器化部署方案 =========
NCK_DIR="$HOME/nockchain"
DOCKER_IMAGE="nockchain/miner:1.2.0"  # 指定明确版本号
VOLUME_MAP="-v $NCK_DIR:/nockchain"

# ========= 色彩定义 =========
RESET='\033[0m'
BOLD='\033[1m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
CYAN='\033[0;36m'

# ========= 增强型Docker检测 =========
function check_docker() {
  if ! command -v docker &>/dev/null; then
    echo -e "${RED}✗ Docker未安装，开始自动安装...${RESET}"
    install_docker
    # 安装后二次验证
    if ! command -v docker &>/dev/null; then
      echo -e "${RED}✗ Docker安装失败，请手动安装后重试${RESET}"
      exit 1
    fi
  fi
}

# ========= 智能GPU检测 =========
function detect_gpu() {
  if lspci | grep -qi "nvidia"; then
    echo "nvidia"
  elif lspci | grep -qi "amd"; then
    echo "amd"
  else
    echo "none"
  fi
}

# ========= 容器部署引擎 =========
function deploy_container() {
  echo -e "${CYAN}[*] 启动Nockchain容器...${RESET}"
  
  # 动态生成GPU参数
  local gpu_type=$(detect_gpu)
  case $gpu_type in
    nvidia)
      GPU_OPT="--gpus all"
      # 验证NVIDIA容器工具包
      if ! dpkg -l | grep -q nvidia-container-toolkit; then
        echo -e "${YELLOW}! 请先安装NVIDIA容器工具包${RESET}"
        exit 2
      fi
      ;;
    amd)
      GPU_OPT="--device=/dev/kfd --device=/dev/dri"
      ;;
    *)
      GPU_OPT=""
      ;;
  esac

  # 带日志调试的启动命令
  docker run -itd --restart always \
    --name nck-miner \
    $VOLUME_MAP \
    $GPU_OPT \
    --network host \
    $DOCKER_IMAGE \
    --config /nockchain/.env 2>>$NCK_DIR/container.log

  # 启动状态验证
  sleep 3
  if ! docker ps | grep -q nck-miner; then
    echo -e "${RED}✗ 容器启动失败，查看日志：$NCK_DIR/container.log${RESET}"
    exit 3
  fi
}

# ========= 增强版公钥验证 =========
function config_wizard() {
  echo -e "${CYAN}>>> 容器配置向导 <<<${RESET}"
  
  while :; do
    read -p "输入矿工公钥（128位十六进制）: " PUBKEY
    # 支持带0x前缀的验证
    PUBKEY=${PUBKEY#0x}
    
    if [[ "$PUBKEY" =~ ^[0-9a-fA-F]{128}$ ]]; then
      # 标准化存储格式
      PUBKEY=$(echo "$PUBKEY" | tr '[:upper:]' '[:lower:]')
      break
    else
      echo -e "${RED}✗ 格式错误，示例：d24c0c53d1162325eba695f32b7194f4c9b2943441a3162837922d36f3325c341ce049e7b3992080a9603e91147e4529f79261a355e16570c975a6c0e81716e3${RESET}"
    fi
  done

  # 生成带校验码的配置文件
  cat > $NCK_DIR/.env <<EOF
MINER_PUBKEY=$PUBKEY
THREADS=$(($(nproc) * 9 / 10))  # 保留10%CPU资源
EOF

  echo -e "${GREEN}✓ 配置文件已生成: $NCK_DIR/.env${RESET}"
}

# ========= 主控界面 =========
function main_menu() {
  clear
  echo -e "${BOLD}${CYAN}"
  echo "=== Nockchain矿工管理系统 v2.1 ==="
  echo -e "${RESET}"
  echo "1) 完整部署矿工"
  echo "2) 启动矿工容器"
  echo "3) 停止矿工容器"
  echo "4) 实时监控面板"
  echo "5) 查看运行日志"
  echo "6) 修改矿工公钥"
  echo "0) 退出系统"
  echo ""
  
  read -p "请选择操作: " choice
  case $choice in
    1) 
      check_docker
      config_wizard
      deploy_container
      echo -e "${GREEN}✓ 部署完成，等待30秒初始化..."
      sleep 30
      docker logs nck-miner | grep -i "ready" || echo -e "${YELLOW}! 初始化超时，检查日志: $NCK_DIR/container.log${RESET}"
      ;;
    2) docker start nck-miner ;;
    3) docker stop nck-miner ;;
    4) watch -n1 "docker stats --no-stream nck-miner && echo && docker exec nck-miner nck-top" ;;
    5) docker logs -f --tail 100 nck-miner ;;
    6) config_wizard && docker restart nck-miner ;;
    0) exit 0 ;;
    *) echo -e "${RED}无效选择${RESET}"; sleep 1 ;;
  esac
}

# ========= 初始化执行 =========
mkdir -p "$NCK_DIR"
touch "$NCK_DIR/container.log"
chmod 644 "$NCK_DIR/container.log"

trap "echo -e '${RED}强制退出!${RESET}'; exit 130" SIGINT

while true; do
  main_menu
done
