#!/bin/bash

# ==============================================================================
# Nockchain 安装与挖矿助手
# ------------------------------------------------------------------------------
# 作者: K2 节点教程分享
# Telegram: https://t.me/+EaCiFDOghoM3Yzll
# Twitter:  https://x.com/BtcK241918
# ==============================================================================

# 设置脚本健壮性选项
# -u: 遇到未设置的变量时报错
# -o pipefail: 管道命令中任何一个命令失败，整个管道就失败
set -uo pipefail

# 如果你在非交互式会话中运行，或者希望防止 shell 自身超时，可以设置 TMOUT。
# 但对于 SSH 会话，下面的 keep-alive 机制更直接。
# export TMOUT=0 # 设置为0表示永不超时，需要时取消注释

# ========= 色彩定义 =========
RESET='\033[0m'
BOLD='\033[1m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'

# ========= 项目路径 =========
NCK_DIR="$HOME/nockchain"
ENV_FILE="$NCK_DIR/.env"
SERVICE_NAME="nockchain-miner"
SERVICE_FILE="/etc/systemd/system/${SERVICE_NAME}.service"

# ========= SSH 连接保持活跃变量 =========
SSH_KEEP_ALIVE_PID=""

# ========= 横幅 =========
function show_banner() {
  clear
  echo -e "${BOLD}${BLUE}"
  echo "==============================================="
  echo "         Nockchain 安装与挖矿助手"
  echo "==============================================="
  echo -e "${RESET}"
  echo "🔧 增强编译并行度，配置挖矿线程数"
  echo "🚀 ${BOLD}更强大的挖矿锄头：采用 Systemd 服务管理，提升稳定性与性能！${RESET}"
  echo "📌 作者: K2 节点教程分享"
  echo "🔗 Telegram: https://t.me/+EaCiFDOghoM3Yzll"
  echo "🐦 Twitter:  https://x.com/BtcK241918"
  echo "-----------------------------------------------"
  echo ""
}

# ========= 常用函数 =========

# 检查命令是否存在
function check_command() {
    local cmd="$1"
    if ! command -v "$cmd" &>/dev/null; then
        echo -e "${RED}[-] 错误: 命令 '$cmd' 未找到。请确保已安装或在 PATH 中。${RESET}"
        return 1
    fi
    return 0
}

# 获取CPU核心数（兼容不同系统）
function get_num_cores() {
    local cores
    if check_command nproc; then
        cores=$(nproc)
    elif check_command sysctl; then # macOS/BSD
        cores=$(sysctl -n hw.ncpu)
    else
        echo -e "${YELLOW}[!] 警告: 无法自动检测CPU核心数，默认为 2。${RESET}"
        cores=2 # 默认值
    fi
    echo "$cores"
}

# 切换到项目目录
function cd_nck_dir() {
  if [ -d "$NCK_DIR" ]; then
    cd "$NCK_DIR" || { echo -e "${RED}[-] 无法进入项目目录: $NCK_DIR${RESET}"; return 1; }
  else
    echo -e "${RED}[-] 项目目录不存在: $NCK_DIR${RESET}"
    return 1
  fi
  return 0
}

# 暂停并返回主菜单
function pause_and_return() {
  echo ""
  read -r -p "按任意键返回主菜单..." -s -n 1 # -s 隐藏输入，-n 1 只读取一个字符
  echo # 换行，因为 -s 不会换行
  main_menu
}

# 检查最低磁盘空间 (例如，5GB)
function check_disk_space() {
    local required_gb=5
    local available_kb

    # 尝试使用 df -k 并解析，兼容性更好
    # awk '{print $4}' 获取第四列 (Available)
    # tail -n 1 确保只取最后一行 (通常是磁盘挂载点信息)
    available_kb=$(df -k "$HOME" 2>/dev/null | awk 'NR==2 {print $4}')

    if [ -z "$available_kb" ]; then
        echo -e "${YELLOW}[!] 警告: 无法检查磁盘空间，请手动确认您的磁盘空间是否充足。${RESET}"
        return 0 # 不阻止执行
    fi

    local available_gb=$((available_kb / 1024 / 1024))

    if [ "$available_gb" -lt "$required_gb" ]; then
        echo -e "${RED}[-] 错误: 磁盘空间不足! 至少需要 ${required_gb}GB，当前可用 ${available_gb}GB。${RESET}"
        echo -e "${RED}    请清理磁盘空间后再运行。${RESET}"
        return 1 # 阻止执行
    else
        echo -e "${GREEN}[+] 磁盘空间检查通过，可用 ${available_gb}GB。${RESET}"
        return 0 # 允许执行
    fi
}

# 查找并执行 Nockchain 二进制文件
# 参数: binary_name (例如: nockchain-wallet), ...args
function run_nockchain_binary() {
    local binary_name="$1"
    shift # 移除第一个参数 (binary_name)
    local args="$@"

    local binary_path=""

    echo -e "${BLUE}[*] 尝试查找并运行 Nockchain 二进制文件: '$binary_name' ${args}${RESET}"

    # 1. 尝试从 PATH 中查找 (make install 后的理想路径)
    if command -v "$binary_name" &>/dev/null; then
        binary_path=$(command -v "$binary_name")
        echo -e "${BLUE}[*] 正在使用 PATH 中的 '$binary_path'${RESET}"
    # 2. 尝试从 NCK_DIR/target/release 中查找 (直接编译后的路径)
    elif [ -x "$NCK_DIR/target/release/$binary_name" ]; then
        binary_path="$NCK_DIR/target/release/$binary_name"
        echo -e "${BLUE}[*] 正在使用项目目录中的 '$binary_path'${RESET}"
    else
        echo -e "${RED}[-] 错误: 找不到可执行文件 '$binary_name'。请确保已编译并安装 (运行选项 1)。${RESET}"
        return 1
    fi

    # 执行命令
    echo -e "${BLUE}[*] 执行: \"$binary_path\" ${args}${RESET}"
    "$binary_path" $args || {
        echo -e "${RED}[-] 命令 '$binary_name $args' 执行失败${RESET}"
        return 1
    }
    return 0
}

# ========= SSH 连接保持活跃函数 =========
# 在后台启动一个进程，周期性地发送空字符到标准输出，以防止 SSH 会话因不活动而断开。
function start_ssh_keep_alive() {
    echo -e "${BLUE}[*] 启动 SSH 连接保持活动进程...${RESET}"
    # 每 30 秒发送一个空行，抑制其输出，并在后台运行
    while true; do
        echo -n ""
        sleep 30
    done > /dev/null 2>&1 &
    SSH_KEEP_ALIVE_PID=$! # 存储后台进程的 PID
    echo -e "${GREEN}[+] SSH 连接保持活动进程已启动 (PID: $SSH_KEEP_ALIVE_PID)${RESET}"
}

# 停止 SSH 连接保持活动进程
function stop_ssh_keep_alive() {
    if [ -n "$SSH_KEEP_ALIVE_PID" ] && kill -0 "$SSH_KEEP_ALIVE_PID" 2>/dev/null; then
        echo -e "${BLUE}[*] 停止 SSH 连接保持活动进程 (PID: $SSH_KEEP_ALIVE_PID)...${RESET}"
        kill "$SSH_KEEP_ALIVE_PID" > /dev/null 2>&1 # 杀死进程并抑制错误输出
        wait "$SSH_KEEP_ALIVE_PID" 2>/dev/null || true # 等待进程终止，忽略错误
        echo -e "${GREEN}[+] SSH 连接保持活动进程已停止${RESET}"
    fi
    SSH_KEEP_ALIVE_PID="" # 清空 PID 变量
}

# 捕获脚本退出或中断信号，确保停止 SSH keep-alive 进程
trap 'stop_ssh_keep_alive' EXIT SIGINT SIGTERM

# ========= 配置函数 =========

# 确保 .env 文件存在并包含必要的变量
function configure_mining_env() {
  echo -e "${BLUE}[*] 检查并设置 .env 文件中的挖矿相关配置...${RESET}"
  local env_file="$1"
  local num_cores=$(get_num_cores)

  # 复制示例文件如果 .env 不存在
  if [ ! -f "$env_file" ]; then
    echo -e "${BLUE}[*] .env 文件不存在，尝试从 .env_example 创建...${RESET}"
    if [ -f "$NCK_DIR/.env_example" ]; then
      cp -n "$NCK_DIR/.env_example" "$env_file"
      echo -e "${GREEN}[+] 已从 .env_example 创建 $env_file${RESET}"
    else
      echo -e "${RED}[-] 错误: 找不到 .env_example 文件，无法创建 .env。请确保仓库完整。${RESET}"
      return 1
    fi
  else
    echo -e "${BLUE}[*] .env 文件已存在，将检查内容。${RESET}"
  fi

  # 确保 MINING_PUBKEY 存在 (仅检查，不自动设置，需要用户手动或通过菜单设置)
  if ! grep -q '^MINING_PUBKEY=' "$env_file"; then
    echo -e "${YELLOW}[!] 温馨提示: .env 文件中缺少 MINING_PUBKEY。请运行选项 2/3 生成/设置您的公钥!${RESET}"
  fi

  # 确保 MINER_THREADS 存在，如果不存在则添加，默认为核心数
  if ! grep -q '^MINER_THREADS=' "$env_file"; then
    echo -e "${YELLOW}[!] .env 文件中缺少 MINER_THREADS，将添加默认值 (CPU核心数: $num_cores)${RESET}"
    # 使用 sed 添加，确保不重复添加
    if ! grep -q '^# 挖矿线程数' "$env_file"; then
        echo "" >> "$env_file" # 添加一个空行确保格式
        echo "# 挖矿线程数，建议设置为您的CPU核心数" >> "$env_file"
    fi
    echo "MINER_THREADS=$num_cores" >> "$env_file"
    echo -e "${GREEN}[+] 已添加 MINER_THREADS=$num_cores 到 $env_file${RESET}"
  else
    local current_threads=$(grep '^MINER_THREADS=' "$env_file" | cut -d'=' -f2)
    echo -e "${BLUE}[*] .env 文件中已存在 MINER_THREADS=$current_threads${RESET}"
  fi

  return 0
}

function set_pubkey_env() {
  echo -e "${BLUE}[*] 设置 MINING_PUBKEY 到 .env...${RESET}"
  if ! cd_nck_dir; then pause_and_return; return; fi

  read -r -p "请输入公钥 (MINING_PUBKEY): " pubkey
  if [ -z "$pubkey" ]; then
    echo -e "${RED}[-] 公钥不能为空${RESET}"
    pause_and_return
    return
  fi

  # 使用 sed 删除旧行并添加新行 (兼容 GNU/BSD sed)
  if grep -q '^MINING_PUBKEY=' "$ENV_FILE"; then
    echo -e "${BLUE}[*] 更新 .env 文件中的 MINING_PUBKEY...${RESET}"
    if ! sed -i "/^MINING_PUBKEY=/c\MINING_PUBKEY=$pubkey" "$ENV_FILE" 2>/dev/null && \
       ! sed -i "" "/^MINING_PUBKEY=/c\MINING_PUBKEY=$pubkey" "$ENV_FILE" 2>/dev/null; then
      echo -e "${RED}[-] 警告: 无法更新 MINING_PUBKEY 到 $ENV_FILE，请手动编辑。${RESET}"
      pause_and_return
      return
    fi
  else
    echo -e "${BLUE}[*] 添加 MINING_PUBKEY 到 .env 文件...${RESET}"
    echo "" >> "$ENV_FILE" # 确保在末尾添加时格式正确
    echo "MINING_PUBKEY=$pubkey" >> "$ENV_FILE"
  fi

  if grep -q "MINING_PUBKEY=$pubkey" "$ENV_FILE"; then
      echo -e "${GREEN}[+] MINING_PUBKEY=$pubkey 已成功写入/更新到 .env${RESET}"
      # 重新加载 .env 使配置生效 for this script run
      . "$ENV_FILE" # POSIX `.` 命令替代 `source`
  else
      echo -e "${RED}[-] 写入 MINING_PUBKEY 到 .env 失败${RESET}"
  fi

  pause_and_return
}

function set_miner_threads_env() {
  echo -e "${BLUE}[*] 设置 MINER_THREADS 到 .env...${RESET}"
  if ! cd_nck_dir; then pause_and_return; return; fi

  local max_cores=$(get_num_cores)
  echo "您的系统检测到有 ${max_cores} 个 CPU 核心。"
  read -r -p "请输入挖矿线程数 (MINER_THREADS，建议不超过核心数 $max_cores): " threads
  if [ -z "$threads" ]; then
    echo -e "${RED}[-] 线程数不能为空${RESET}"
    pause_and_return
    return
  fi

  # 验证输入是否为非负数字
  if ! echo "$threads" | grep -q '^[0-9]\+$'; then # POSIX 兼容的数字检查
    echo -e "${RED}[-] 输入无效，请输入一个非负数字${RESET}"
    pause_and_return
    return
  fi

   # 使用 sed 删除旧行并添加新行 (兼容 GNU/BSD sed)
  if grep -q '^MINER_THREADS=' "$ENV_FILE"; then
    echo -e "${BLUE}[*] 更新 .env 文件中的 MINER_THREADS...${RESET}"
    if ! sed -i "/^MINER_THREADS=/c\MINER_THREADS=$threads" "$ENV_FILE" 2>/dev/null && \
       ! sed -i "" "/^MINER_THREADS=/c\MINER_THREADS=$threads" "$ENV_FILE" 2>/dev/null; then
      echo -e "${RED}[-] 警告: 无法更新 MINER_THREADS 到 $ENV_FILE，请手动编辑。${RESET}"
      pause_and_return
      return
    fi
  else
    echo -e "${BLUE}[*] 添加 MINER_THREADS 到 .env 文件...${RESET}"
     if ! grep -q '^# 挖矿线程数' "$ENV_FILE"; then
        echo "" >> "$ENV_FILE" # 确保在末尾添加时格式正确
        echo "# 挖矿线程数，建议设置为您的CPU核心数" >> "$ENV_FILE"
    fi
    echo "MINER_THREADS=$threads" >> "$ENV_FILE"
  fi

  if grep -q "MINER_THREADS=$threads" "$ENV_FILE"; then
      echo -e "${GREEN}[+] MINER_THREADS=$threads 已成功写入/更新到 .env${RESET}"
      echo -e "${YELLOW}[!] 注意: 启动节点脚本 (run_nockchain_miner.sh) 需要读取并使用这个变量才能生效。${RESET}"
      # 重新加载 .env 使配置生效 for this script run
      . "$ENV_FILE" # POSIX `.` 命令替代 `source`
  else
      echo -e "${RED}[-] 写入 MINER_THREADS 到 .env 失败${RESET}"
  fi

  pause_and_return
}


# ========= 安装构建函数 =========
function setup_all() {
  show_banner # 在安装前再次显示横幅

  # 在长时间操作前启动 SSH keep-alive
  start_ssh_keep_alive

  local exit_code=0 # 用于捕获安装子进程的退出码

  # 将所有安装步骤放入一个子 shell，并在其中启用 `set -e`，以便任何命令失败都能立即退出子 shell
  (
    set -e # 任何命令失败都立即退出子 shell

    echo -e "${BLUE}--- 步骤 1/8: 检查系统依赖命令 ---${RESET}"
    if ! check_command sudo || ! check_command git || ! check_command curl; then
        echo -e "${RED}[-] 错误: 缺少必要的系统命令 (sudo, git, curl)。请先手动安装。${RESET}"
        exit 1 # 退出子 shell
    fi
    echo -e "${GREEN}[+] 核心系统命令检查通过。${RESET}"

    echo -e "${BLUE}--- 步骤 2/8: 检查磁盘空间 ---${RESET}"
    check_disk_space || exit 1 # 如果磁盘空间不足，退出子 shell

    echo -e "${BLUE}--- 步骤 3/8: 安装系统依赖 (build-essential, clang, llvm-dev, libclang-dev, pkg-config, libssl-dev, cmake, make, systemd) ---${RESET}"
    echo -e "${BLUE}[*] 正在更新 apt 缓存...${RESET}"
    sudo apt update || { echo -e "${RED}[-] 错误: apt update 失败。请检查网络连接或源配置。${RESET}"; exit 1; }

    echo -e "${BLUE}[*] 正在安装编译和运行所需的系统包...${RESET}"
    if check_command systemctl; then
        sudo apt install -y clang llvm-dev libclang-dev pkg-config libssl-dev build-essential cmake git make || { echo -e "${RED}[-] 错误: 系统依赖安装失败。请检查错误信息。${RESET}"; exit 1; }
    else
        echo -e "${RED}[-] 错误: 您的系统不支持 systemd。此脚本主要依赖 systemd 进行节点管理。${RESET}"
        echo -e "${RED}    建议在支持 systemd 的 Linux 系统上运行此脚本。${RESET}"
        exit 1
    fi
    echo -e "${GREEN}[+] 系统依赖安装完成${RESET}"

    echo -e "${BLUE}--- 步骤 4/8: 安装 Rust ---${RESET}"
    if ! check_command cargo; then
      echo -e "${BLUE}[*] Rust 未安装，正在通过 rustup.rs 进行安装...${RESET}"
      curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y || { echo -e "${RED}[-] 错误: Rust 安装失败。请检查网络连接。${RESET}"; exit 1; }
      # 立即使 cargo 在当前 shell session 可用 (用于后续 make 命令)
      export PATH="$HOME/.cargo/bin:$PATH"
      echo -e "${GREEN}[+] Rust 安装完成${RESET}"
    else
      echo -e "${YELLOW}[!] Rust 已安装，跳过安装步骤${RESET}"
      # 确保当前 shell session 有 cargo，即使已经安装
      export PATH="$HOME/.cargo/bin:$PATH"
    fi

    # 确保 cargo bin 目录在 PATH 中 (持久化)
    local rc_file=""
    case "$(basename "$SHELL")" in
        "bash") rc_file="$HOME/.bashrc" ;;
        "zsh") rc_file="$HOME/.zshrc" ;;
        *) rc_file="$HOME/.profile" # Fallback for other shells or non-interactive sessions
    esac

    if [ -f "$rc_file" ] && ! grep -q 'export PATH=.*\$HOME/\.cargo/bin:\$PATH' "$rc_file" 2>/dev/null; then
      echo '# Add Rust cargo bin to PATH' >> "$rc_file"
      echo 'export PATH="$HOME/.cargo/bin:$PATH"' >> "$rc_file"
      echo -e "${GREEN}[+] 已将 Cargo 添加到 ${rc_file} 的 PATH (可能需要重新登录或 '. ${rc_file}' 生效)${RESET}"
    elif [ -f "$rc_file" ]; then
       echo -e "${YELLOW}[!] Cargo 已在 ${rc_file} 的 PATH 中${RESET}"
    else
       echo -e "${YELLOW}[!] 警告: 未找到常见的 Shell 配置文件 (${rc_file})，请手动将 Rust Cargo Bin 添加到 PATH。${RESET}"
    fi

    echo -e "${BLUE}--- 步骤 5/8: 获取或更新 Nockchain 仓库 ---${RESET}"
    if [ -d "$NCK_DIR" ]; then
      echo -e "${BLUE}[*] 项目目录 '$NCK_DIR' 已存在，尝试拉取最新代码...${RESET}"
      cd_nck_dir || exit 1 # 切换到目录，如果失败则会通过 set -e 退出
      git pull || { echo -e "${RED}[-] 错误: Git pull 失败。请检查网络或仓库状态。${RESET}"; exit 1; }
      echo -e "${GREEN}[+] 仓库已更新${RESET}"
    else
      echo -e "${BLUE}[*] 克隆 Nockchain 仓库到 $NCK_DIR...${RESET}"
      git clone https://github.com/zorp-corp/nockchain "$NCK_DIR" || { echo -e "${RED}[-] 错误: Git clone 失败。请检查网络或仓库URL。${RESET}"; exit 1; }
      echo -e "${GREEN}[+] 仓库克隆完成${RESET}"
      cd_nck_dir || exit 1 # 切换到目录，如果失败则会通过 set -e 退出
    fi

    echo -e "${BLUE}--- 步骤 6/8: 配置 .env 文件并清理旧的构建文件 ---${RESET}"
    configure_mining_env "$ENV_FILE" || exit 1 # 配置 .env，如果失败则退出

    echo -e "${BLUE}[*] 清理旧的构建文件 (如果存在)...${RESET}"
    # 确保 make 命令存在，并允许 make clean 失败，因为有些 Makefiles 可能没有这个目标
    if check_command make; then make clean || echo -e "${YELLOW}[!] make clean 警告: 如果首次构建或 Makefile 无此目标请忽略此警告。${RESET}"; fi
    if check_command cargo; then cargo clean || echo -e "${YELLOW}[!] cargo clean 警告: 如果首次构建请忽略此警告。${RESET}"; fi
    echo -e "${GREEN}[+] 清理完成 (或已跳过)${RESET}"

    echo -e "${BLUE}--- 步骤 7/8: 设置 Rust 编译优化标志 ---${RESET}"
    export RUSTFLAGS="-C target-cpu=native -C opt-level=3"
    export CARGO_PROFILE_RELEASE_LTO="true"
    echo -e "${GREEN}[+] 已设置 Rust 编译优化标志: RUSTFLAGS='$RUSTFLAGS', CARGO_PROFILE_RELEASE_LTO='$CARGO_PROFILE_RELEASE_LTO'${RESET}"

    local num_j_cores=$(get_num_cores) # 使用兼容性函数获取核心数
    if [ "$num_j_cores" -eq 0 ]; then num_j_cores=1; fi # 避免 -j 0 导致的问题

    echo -e "${BLUE}--- 步骤 8/8: 编译并安装 Nockchain 组件 (使用多线程编译: -j$num_j_cores) ---${RESET}"
    cd_nck_dir # 再次确认在正确目录

    echo -e "${BLUE}[*] 正在编译并安装 hoonc...${RESET}"
    make -j"$num_j_cores" install-hoonc || { echo -e "${RED}[-] 错误: hoonc 编译或安装失败。${RESET}"; exit 1; }
    echo -e "${GREEN}[+] hoonc 安装完成${RESET}"

    # === 关键修改从这里开始 ===
    echo -e "${BLUE}[*] 正在编译 Nockchain Hoon 内核文件 (.jam)... (生成 wal.jam, dumb.jam, miner.jam等)${RESET}"
    # Nockchain 的 Makefile 中，build-hoon 目标负责生成这些 .jam 文件
    make -j"$num_j_cores" build-hoon || { echo -e "${RED}[-] 错误: Nockchain Hoon 内核文件编译失败。请检查 hoonc 是否正常工作。${RESET}"; exit 1; }
    echo -e "${GREEN}[+] Nockchain Hoon 内核文件 (.jam) 编译完成${RESET}"

    echo -e "${BLUE}[*] 正在编译 Nockchain Rust 主程序... (依赖已生成的 .jam 文件)${RESET}"
    # Nockchain 的 Makefile 中，build-rust 目标负责编译 Rust 代码
    make -j"$num_j_cores" build-rust || { echo -e "${RED}[-] 错误: Nockchain Rust 主程序编译失败。${RESET}"; exit 1; }
    echo -e "${GREEN}[+] Nockchain Rust 主程序编译完成${RESET}"
    # === 关键修改到此结束 ===

    echo -e "${BLUE}[*] 正在编译并安装 Nockchain 钱包...${RESET}"
    make -j"$num_j_cores" install-nockchain-wallet || { echo -e "${RED}[-] 错误: Nockchain 钱包编译或安装失败。${RESET}"; exit 1; }
    echo -e "${GREEN}[+] 钱包安装完成${RESET}"

    echo -e "${BLUE}[*] 正在编译并安装 Nockchain 节点程序...${RESET}"
    make -j"$num_j_cores" install-nockchain || { echo -e "${RED}[-] 错误: Nockchain 节点程序编译或安装失败。${RESET}"; exit 1; }
    echo -e "${GREEN}[+] 节点程序安装完成${RESET}"

    # 如果所有命令都成功，则子 shell 以 0 退出码结束
  )
  exit_code=$? # 捕获子 shell 的退出码

  # 停止 SSH keep-alive，无论安装成功与否
  stop_ssh_keep_alive

  if [ "$exit_code" -ne 0 ]; then
    echo -e "${RED}===============================================${RESET}"
    echo -e "${RED}[-] Nockchain 安装或构建过程中发生错误！请检查上述日志，查找 '错误:' 或 'Error' 关键字。${RESET}"
    echo -e "${RED}    如果某个 'make' 命令失败，您可以尝试进入 '$NCK_DIR' 目录，手动执行失败的 'make' 命令以查看详细错误。${RESET}"
    echo -e "${RED}    例如: cd $NCK_DIR && make build-hoon (或 make build-rust)${RESET}"
    echo -e "${RED}===============================================${RESET}"
  else
    echo -e "${GREEN}===============================================${RESET}"
    echo -e "${GREEN}[+] Nockchain 安装和构建已成功完成！${RESET}"
    echo -e "${GREEN}===============================================${RESET}"
    echo ""
    echo -e "${YELLOW}[!] 下一步重要事项: ${RESET}"
    echo -e "${YELLOW}  1. 生成您的钱包密钥对 (菜单选项 2)。${RESET}"
    echo -e "${YELLOW}  2. 将生成的公钥配置到 .env 文件中 (菜单选项 3)。${RESET}"
    echo -e "${YELLOW}  3. 检查 .env 中的 MINER_THREADS 配置 (菜单选项 11 可设置)。${RESET}"
    echo -e "${YELLOW}  4. 启动节点进行挖矿 (菜单选项 6) - 推荐使用 systemd 服务。${RESET}"
    echo ""
  fi

  pause_and_return
}

# ========= 钱包操作函数 =========
function generate_wallet() {
  echo -e "${BLUE}[*] 生成钱包密钥对...${RESET}"
  if ! cd_nck_dir; then pause_and_return; return; fi

  # 检查目标目录是否有写入权限
  if [ ! -w "$NCK_DIR" ]; then
      echo -e "${RED}[-] 错误: 无法在 $NCK_DIR 目录写入文件，请检查权限。${RESET}"
      pause_and_return
      return
  fi

  echo -e "${YELLOW}[!] 生成密钥对的输出会包含您的私钥和公钥，请务必保存好！${RESET}"
  echo -e "${YELLOW}    特别是公钥，稍后需要配置到 .env 文件中 (MINING_PUBKEY)。${RESET}"
  echo -e "${YELLOW}    私钥保存在您运行命令的当前目录下的 wallet.keys 文件中。${RESET}"
  echo "-----------------------------------------------"

  # 在当前目录下生成 wallet.keys
  run_nockchain_binary "nockchain-wallet" keygen || {
    echo -e "${RED}[-] 钱包生成失败${RESET}"
    pause_and_return
    return
  }

  echo "-----------------------------------------------"
  echo -e "${GREEN}[+] 钱包密钥对生成完成${RESET}"
  echo -e "${YELLOW}[!] 再次提醒：请记录显示的公钥，并使用菜单选项 3 将其写入 .env 文件中的 MINING_PUBKEY。${RESET}"
  echo -e "${YELLOW}[!] 私钥已保存到 $NCK_DIR/wallet.keys (请妥善保管此文件！)。${RESET}"

  pause_and_return
}

function export_keys() {
  echo -e "${BLUE}[*] 导出钱包密钥到文件...${RESET}"
  if ! cd_nck_dir; then pause_and_return; return; fi

  echo -e "${YELLOW}[!] 密钥文件包含您的私钥，请妥善保管导出文件！${RESET}"
  echo -e "${YELLOW}    默认导出到 $NCK_DIR/keys.export${RESET}"

  run_nockchain_binary "nockchain-wallet" export-keys || {
    echo -e "${RED}[-] 导出密钥失败${RESET}"
    pause_and_return
    return
  }

  echo -e "${GREEN}[+] 密钥已导出到 $NCK_DIR/keys.export${RESET}"
  pause_and_return
}

function import_keys() {
  echo -e "${BLUE}[*] 导入钱包密钥文件...${RESET}"
  if ! cd_nck_dir; then pause_and_return; return; fi

  read -r -p "[?] 请输入要导入的密钥文件路径 (默认: $NCK_DIR/keys.export): " keyfile_input
  keyfile=${keyfile_input:-"$NCK_DIR/keys.export"}

  if [ ! -f "$keyfile" ]; then
    echo -e "${RED}[-] 错误: 密钥文件 '$keyfile' 不存在${RESET}"
    pause_and_return
    return
  fi

  echo -e "${BLUE}[*] 尝试导入 '$keyfile' 时...${RESET}"
  run_nockchain_binary "nockchain-wallet" import-keys --input "$keyfile" || {
    echo -e "${RED}[-] 导入密钥失败${RESET}"
    pause_and_return
    return
  }

  echo -e "${GREEN}[+] 密钥已成功导入${RESET}"
  pause_and_return
}

# ========= 节点操作函数 (Systemd) =========

function install_systemd_service() {
    echo -e "${BLUE}[*] 检查是否支持 systemd...${RESET}"
    if ! check_command systemctl; then
        echo -e "${RED}[-] 您的系统不支持 systemd。${RESET}"
        echo -e "${RED}    此脚本主要依赖 systemd 进行节点管理，建议在支持 systemd 的 Linux 系统上运行。${RESET}"
        pause_and_return
        return 1
    fi

    echo -e "${BLUE}[*] 准备创建 systemd 服务文件: $SERVICE_FILE...${RESET}"
    if ! cd_nck_dir; then pause_and_return; return 1; fi

    # 检查启动脚本是否存在并赋予执行权限
    local run_script="./scripts/run_nockchain_miner.sh"
    if [ ! -f "$run_script" ]; then
        echo -e "${RED}[-] 错误: 找不到启动脚本 $run_script。请先运行选项 1 完成安装构建。${RESET}"
        pause_and_return
        return 1
    fi
    chmod +x "$run_script"
    echo -e "${GREEN}[+] 启动脚本 '$run_script' 已检查并赋予执行权限。${RESET}"

    # 重新加载 .env 确保最新的配置被读取
    echo -e "${BLUE}[*] 尝试加载 .env 配置文件...${RESET}"
    if [ -f "$ENV_FILE" ]; then
        . "$ENV_FILE" # POSIX `.` 命令替代 `source`
        echo -e "${GREEN}[+] 已加载 .env 配置文件${RESET}"
    else
        echo -e "${RED}[-] 警告: .env 文件不存在，部分配置可能缺失。请先运行选项 1 或手动创建 .env${RESET}"
        pause_and_return # 如果 .env 都不存在，大概率无法启动
        return 1
    fi

    # 检查 MINING_PUBKEY 是否已设置 (非空)
    if [ -z "${MINING_PUBKEY:-}" ]; then # 使用 :- 防止未设置变量报错 (set -u)
        echo -e "${RED}[-] 错误: MINING_PUBKEY 未在 .env 文件中设置!${RESET}"
        echo "请先运行菜单选项 2 (生成钱包) 和 3 (设置公钥) 完成配置。"
        pause_and_return
        return 1
    fi
    echo -e "${GREEN}[*] MINING_PUBKEY 已配置: ${MINING_PUBKEY}${RESET}"

    # 检查 MINER_THREADS 是否已设置 (非空)，并提示
    if [ -z "${MINER_THREADS:-}" ]; then # 使用 :- 防止未设置变量报错 (set -u)
        echo -e "${YELLOW}[!] 警告: MINER_THREADS 未在 .env 文件中设置。${RESET}"
        echo "    矿工可能会以默认线程数运行 (通常为单线程)。建议通过选项 11 设置。"
    else
        echo -e "${GREEN}[*] MINER_THREADS 已配置: ${MINER_THREADS}${RESET}"
    fi

    echo -e "${BLUE}[*] 正在写入 systemd 服务文件内容到 $SERVICE_FILE...${RESET}"
    # 创建 systemd 服务文件
    sudo bash -c "cat <<EOF > $SERVICE_FILE
[Unit]
Description=$SERVICE_NAME service
After=network.target

[Service]
User=$USER
Group=$USER
WorkingDirectory=$NCK_DIR
EnvironmentFile=$ENV_FILE
ExecStart=/bin/bash -c \"$NCK_DIR/scripts/run_nockchain_miner.sh\"
Restart=on-failure
RestartSec=5s
LimitNOFILE=65536 # Increase file descriptor limit for potential network connections

StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target
EOF"

    if [ $? -ne 0 ]; then
        echo -e "${RED}[-] 错误: 创建 systemd 服务文件失败。请检查权限或尝试手动创建。${RESET}"
        pause_and_return
        return 1
    fi

    echo -e "${GREEN}[+] Systemd 服务文件已创建: $SERVICE_FILE${RESET}"

    echo -e "${BLUE}[*] 重载 systemd daemon (使服务文件生效)...${RESET}"
    sudo systemctl daemon-reload || { echo -e "${RED}[-] 错误: systemctl daemon-reload 失败${RESET}"; pause_and_return; return 1; }
    echo -e "${GREEN}[+] Systemd daemon 已重载${RESET}"

    echo -e "${BLUE}[*] 启用 $SERVICE_NAME 服务 (设置开机自启)...${RESET}"
    sudo systemctl enable "$SERVICE_NAME" || { echo -e "${RED}[-] 错误: systemctl enable 失败${RESET}"; pause_and_return; return 1; }
    echo -e "${GREEN}[+] $SERVICE_NAME 服务已启用${RESET}"

    echo -e "${GREEN}===============================================${RESET}"
    echo -e "${GREEN}[+] Nockchain 挖矿服务已成功安装为 systemd 服务！${RESET}"
    echo -e "${GREEN}    现在可以通过选项 6 来启动它。${RESET}"
    echo -e "${GREEN}===============================================${RESET}"

    pause_and_return
}

function start_node_systemd() {
  echo -e "${BLUE}[*] 启动节点 (systemd 服务: $SERVICE_NAME)...${RESET}"
  if ! check_command systemctl; then
      echo -e "${RED}[-] 您的系统不支持 systemd。此功能不可用。${RESET}"
      pause_and_return
      return
  fi

  if [ ! -f "$SERVICE_FILE" ]; then
      echo -e "${RED}[-] 错误: systemd 服务文件 '$SERVICE_FILE' 不存在。请先运行选项 6 (安装 Systemd 服务)。${RESET}"
      pause_and_return
      return
  fi

  # 检查并停止旧的 screen 会话 (以防万一用户从 screen 切换到 systemd)
  if screen -list | grep -q "nockchain"; then
    echo "[*] 检测到旧的 'nockchain' screen 会话，尝试关闭...${RESET}"
    screen -S nockchain -X quit || {
      echo -e "${YELLOW}[!] 警告: 无法关闭旧的 screen 会话，可能需要手动操作: screen -S nockchain -X quit${RESET}"
    }
    sleep 2
  fi

  sudo systemctl start "$SERVICE_NAME" || {
    echo -e "${RED}===============================================${RESET}"
    echo -e "${RED}[-] 节点启动失败!${RESET}"
    echo -e "${RED}    请检查日志: journalctl -u $SERVICE_NAME --no-pager${RESET}"
    echo -e "${RED}===============================================${RESET}"
    pause_and_return
    return
  }

  echo -e "${GREEN}===============================================${RESET}"
  echo -e "${GREEN}[+] 节点已成功启动为 systemd 服务 '$SERVICE_NAME'${RESET}"
  echo -e "${YELLOW}[!] 使用 'systemctl status $SERVICE_NAME' 查看状态。${RESET}"
  echo -e "${YELLOW}[!] 使用 'journalctl -u $SERVICE_NAME -f' 查看实时日志。${RESET}"
  echo -e "${GREEN}===============================================${RESET}"

  pause_and_return
}

function view_node_status_systemd() {
  echo -e "${BLUE}[*] 查看节点状态 (systemd 服务: $SERVICE_NAME)...${RESET}"
  if ! check_command systemctl; then
      echo -e "${RED}[-] 您的系统不支持 systemd。此功能不可用。${RESET}"
      pause_and_return
      return
  fi
  sudo systemctl status "$SERVICE_NAME" || {
    echo -e "${RED}[-] 无法获取服务状态，可能服务未安装或已停止。${RESET}"
  }
  pause_and_return
}

function view_logs_systemd() {
  echo -e "${BLUE}[*] 查看节点日志 (systemd 服务: $SERVICE_NAME)...${RESET}"
  if ! check_command journalctl; then
      echo -e "${RED}[-] 您的系统不支持 journalctl 或 systemd 日志。${RESET}"
      pause_and_return
      return
  fi
  echo -e "${YELLOW}[!] 按 Ctrl+C 退出日志查看。${RESET}"
  echo "-----------------------------------------------"
  journalctl -u "$SERVICE_NAME" -f --no-pager || {
    echo -e "${RED}[-] 无法查看日志，可能服务未运行或日志文件不存在。${RESET}"
  }
  pause_and_return
}

function stop_node_systemd() {
    echo -e "${BLUE}[*] 停止节点 (systemd 服务: $SERVICE_NAME)...${RESET}"
    if ! check_command systemctl; then
        echo -e "${RED}[-] 您的系统不支持 systemd。此功能不可用。${RESET}"
        pause_and_return
        return
    fi

    if sudo systemctl is-active --quiet "$SERVICE_NAME"; then
        sudo systemctl stop "$SERVICE_NAME" || {
            echo -e "${RED}[-] 无法停止服务，可能需要手动操作。${RESET}"
            pause_and_return
            return
        }
        echo -e "${GREEN}[+] 节点服务 '$SERVICE_NAME' 已停止${RESET}"
    else
        echo -e "${YELLOW}[!] 节点服务 '$SERVICE_NAME' 未运行，无需停止。${RESET}"
    fi
    pause_and_return
}

function uninstall_systemd_service() {
    echo -e "${BLUE}[*] 卸载节点 systemd 服务 ($SERVICE_NAME)...${RESET}"
    if ! check_command systemctl; then
        echo -e "${RED}[-] 您的系统不支持 systemd。此功能不可用。${RESET}"
        pause_and_return
        return
    fi

    if [ -f "$SERVICE_FILE" ]; then
        echo -e "${BLUE}[*] 禁用并停止服务...${RESET}"
        sudo systemctl disable --now "$SERVICE_NAME" &>/dev/null
        echo -e "${BLUE}[*] 删除服务文件 '$SERVICE_FILE'...${RESET}"
        sudo rm "$SERVICE_FILE" || {
            echo -e "${RED}[-] 错误: 无法删除服务文件 '$SERVICE_FILE'。请手动删除。${RESET}"
            pause_and_return
            return
        }
        echo -e "${BLUE}[*] 重载 systemd daemon...${RESET}"
        sudo systemctl daemon-reload || {
            echo -e "${RED}[-] 错误: systemctl daemon-reload 失败。${RESET}"
        }
        echo -e "${GREEN}[+] 节点 systemd 服务 '$SERVICE_NAME' 已成功卸载。${RESET}"
    else
        echo -e "${YELLOW}[!] 服务文件 '$SERVICE_FILE' 不存在，无需卸载。${RESET}"
    fi
    pause_and_return
}


# ========= 主菜单 =========
function main_menu() {
  show_banner
  echo "请选择操作:"
  echo "  ${GREEN}1) 一键安装、构建并初始化 .env (推荐首次运行)${RESET}"
  echo "  ${BLUE}--- 钱包操作 ---${RESET}"
  echo "  2) 生成钱包密钥对 (显示公钥，私钥保存到 wallet.keys)"
  echo "  3) 设置 MINING_PUBKEY 到 .env (根据公钥设置挖矿地址)"
  echo "  4) 导出钱包密钥到文件 (keys.export)"
  echo "  5) 导入钱包密钥文件"
  echo "  ${BLUE}--- 节点操作 (Systemd 管理) ---${RESET}"
  echo "  6) 安装并启动节点服务 (Systemd 自动管理)"
  echo "  7) 查看节点状态 (Systemd)"
  echo "  8) 查看节点日志 (Systemd)"
  echo "  9) 停止节点服务 (Systemd)"
  echo "  10) 卸载节点服务 (Systemd)"
  echo "  ${YELLOW}--- 节点配置 ---${RESET}"
  echo "  11) 设置挖矿线程数 (MINER_THREADS) 到 .env"
  echo "  ${RED}0) 退出${RESET}"
  echo ""
  read -r -p "请输入编号: " choice

  case "$choice" in
    1) setup_all ;;
    2) generate_wallet ;;
    3) set_pubkey_env ;;
    4) export_keys ;;
    5) import_keys ;;
    # Systemd 选项
    6) install_systemd_service && start_node_systemd ;; # 先安装服务再启动
    7) view_node_status_systemd ;;
    8) view_logs_systemd ;;
    9) stop_node_systemd ;;
    10) uninstall_systemd_service ;;
    # 配置选项
    11) set_miner_threads_env ;;
    0) echo "退出脚本."; exit 0 ;;
    *) echo -e "${RED}[-] 无效选项${RESET}"; pause_and_return ;;
  esac
}

# ========= 脚本入口 =========
# 确保在脚本开始时就加载 .env，以便后续函数可以使用其中的变量（如果文件已存在）
if [ -f "$ENV_FILE" ]; then
    . "$ENV_FILE"
fi

# 启动主菜单循环
while true; do
    main_menu
done

exit 0 # 正常退出
