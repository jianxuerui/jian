#!/usr/bin/env bash
# nockchain_toolbox.sh
# 版本: 2.1.0  (交互菜单 + 编译修复)

set -euo pipefail
IFS=$'\n\t'

########################################
# 全局变量
########################################
SRC_DIR="${HOME}/build/ethminer"
INSTALL_PREFIX="/usr/local"
JOBS="$(nproc)"
LOG_FILE="${HOME}/nockchain.log"

########################################
# 辅助输出
########################################
c_info()  { printf "\033[32m[INFO]\033[0m %s\n" "$*"; }
c_warn()  { printf "\033[33m[WARN]\033[0m %s\n" "$*"; }
c_err()   { printf "\033[31m[ERR ]\033[0m %s\n" "$*"; }

########################################
# 平台检测与依赖安装
########################################
detect_pkg_mgr() {
    command -v apt-get >/dev/null 2>&1 && { echo apt; return; }
    command -v dnf      >/dev/null 2>&1 && { echo dnf; return; }
    command -v yum      >/dev/null 2>&1 && { echo yum; return; }
    command -v apk      >/dev/null 2>&1 && { echo apk; return; }
    c_err "未识别的 Linux 发行版，请手动安装依赖"; exit 1
}

install_deps() {
    local pm; pm="$(detect_pkg_mgr)"
    c_info "使用包管理器 ${pm} 安装/更新依赖"

    case "${pm}" in
        apt)
            sudo apt-get update
            sudo apt-get install -y build-essential cmake git \
                 libstdc++-dev libssl-dev pkg-config
            ;;
        dnf)
            sudo dnf -y install gcc gcc-c++ cmake git \
                 libstdc++-devel openssl-devel pkgconfig
            ;;
        yum)
            sudo yum -y install gcc gcc-c++ cmake git \
                 libstdc++-devel openssl-devel pkgconfig
            ;;
        apk)
            sudo apk add --no-cache build-base cmake git \
                 libstdc++ libstdc++-dev openssl-dev
            ;;
    esac
}

########################################
# 克隆 / 更新 ethminer 源码
########################################
fetch_source() {
    mkdir -p "$(dirname "${SRC_DIR}")"
    if [[ -d "${SRC_DIR}/.git" ]]; then
        c_info "ethminer 源码已存在，执行 git pull"
        git -C "${SRC_DIR}" pull --rebase
    else
        c_info "克隆 ethminer 源码"
        git clone --recursive https://github.com/ethereum-mining/ethminer.git "${SRC_DIR}"
    fi
}

########################################
# 轻量补丁
########################################
apply_patches() {
    c_info "检查并注入 -Wno-deprecated-declarations 编译选项"
    local cmake_file="${SRC_DIR}/CMakeLists.txt"
    if ! grep -q "Wno-deprecated-declarations" "${cmake_file}"; then
        sed -i '/CMAKE_CXX_STANDARD/a add_compile_options(-Wno-deprecated-declarations)' "${cmake_file}"
    fi
}

########################################
# 编译安装 ethminer
########################################
build_ethminer() {
    c_info "开始编译 ethminer (g++)"
    cd "${SRC_DIR}"
    mkdir -p build && cd build
    cmake .. \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_CXX_COMPILER=g++ \
        -DCMAKE_INSTALL_PREFIX="${INSTALL_PREFIX}"
    make -j"${JOBS}"
    sudo make install
    c_info "ethminer 已安装到 ${INSTALL_PREFIX}/bin/ethminer"
}

########################################
# 业务逻辑：修改公钥、启动节点、查看日志
########################################
CONFIG_FILE="${HOME}/.nockchain.conf"

change_wallet() {
    read -rp "请输入新的挖矿钱包地址: " NEW_WALLET
    [[ -z "${NEW_WALLET}" ]] && { c_warn "钱包地址为空，已取消操作"; return; }
    echo "WALLET=${NEW_WALLET}" > "${CONFIG_FILE}"
    c_info "钱包地址已更新并写入 ${CONFIG_FILE}"
}

start_node() {
    WALLET_ADDR="$(grep -E "^WALLET=" "${CONFIG_FILE}" 2>/dev/null | cut -d= -f2 || true)"
    if [[ -z "${WALLET_ADDR}" ]]; then
        c_warn "未配置钱包地址，请先执行 2) 修改挖矿钱包"
        return
    fi
    nohup ethminer -P "stratum1+tcp://${WALLET_ADDR}@eth.pool.example:4444" \
          &>> "${LOG_FILE}" &
    c_info "挖矿节点已启动，日志写入 ${LOG_FILE}"
}

view_log() {
    [[ -f "${LOG_FILE}" ]] || { c_warn "日志文件不存在"; return; }
    tail -n 50 -F "${LOG_FILE}"
}

########################################
# 菜单系统  (保持之前的数字交互设计)
########################################
show_menu() {
cat <<EOF

=========== Nockchain 工具箱 ===========
1) 安装 / 更新 ethminer
2) 修改挖矿钱包
3) 启动挖矿节点
4) 查看运行日志
5) 退出

EOF
}

main_loop() {
    while true; do
        show_menu
        read -rp "请选择操作 [1-5]: " choice
        case "${choice}" in
            1)
                install_deps
                fetch_source
                apply_patches
                build_ethminer
                ;;
            2) change_wallet ;;
            3) start_node   ;;
            4) view_log     ;;
            5) c_info "Bye"; exit 0 ;;
            *) c_warn "无效输入，请重新选择" ;;
        esac
    done
}

########################################
# 入口
########################################
main_loop
