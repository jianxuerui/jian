#!/usr/bin/env bash
# nockchain_toolbox.sh 终极修复版 v9.0
# 特性：菜单交互 + 智能依赖修复 + 全发行版支持

set -euo pipefail
IFS=$'\n\t'

###############################
# 全局配置
###############################
SRC_DIR="${HOME}/build/ethminer"
INSTALL_PREFIX="/usr/local"
LOG_FILE="${HOME}/nockchain.log"
CONFIG_FILE="${HOME}/.nockchain.conf"

###############################
# 颜色输出函数
###############################
c_info() { printf "\033[32m[INFO]\033[0m %s\n" "$*"; }
c_warn() { printf "\033[33m[WARN]\033[0m %s\n" "$*"; }
c_err()  { printf "\033[31m[ERR]\033[0m %s\n" "$*"; exit 1; }

###############################
# 系统检测与修复
###############################
fix_system_deps() {
    # 检测系统类型
    if [[ -f /etc/redhat-release ]]; then
        c_info "检测到 RHEL/CentOS 系统"
        sudo yum install -y gcc-c++ libstdc++-devel libstdc++-static
        sudo ln -svf /usr/lib64/libstdc++.so.6 /usr/lib64/libstdc++.so
    elif [[ -f /etc/debian_version ]]; then
        c_info "检测到 Debian/Ubuntu 系统"
        sudo apt-get update
        sudo apt-get install -y g++ libstdc++-dev libstdc++-static
    else
        c_err "不支持的 Linux 发行版"
    fi

    # 更新动态库缓存
    sudo ldconfig
}

###############################
# 源码编译修复流程
###############################
rebuild_project() {
    local build_dir="${SRC_DIR}/build_release"
    
    # 清理旧构建
    c_info "清理构建环境..."
    rm -rf "${build_dir}"
    mkdir -p "${build_dir}"
    
    # 配置编译参数
    c_info "配置编译参数..."
    cd "${build_dir}"
    cmake .. \
        -DCMAKE_CXX_COMPILER=g++ \
        -DCMAKE_C_COMPILER=gcc \
        -DCMAKE_EXE_LINKER_FLAGS="-Wl,-rpath=/usr/lib64 -L/usr/lib64" \
        -DCMAKE_BUILD_TYPE=Release

    # 开始编译
    c_info "开始编译 (使用 $(nproc) 线程)..."
    make -j$(nproc)
    
    # 验证编译结果
    if [[ -x "./ethminer/ethminer" ]]; then
        c_info "编译成功，安装到系统目录..."
        sudo make install
    else
        c_err "编译失败，未找到可执行文件"
    fi
}

###############################
# 增强版菜单系统
###############################
show_menu() {
    clear
    echo -e "\n========== Nockchain 终极修复工具 =========="
    echo "1) 自动修复系统依赖"
    echo "2) 强制重新编译"
    echo "3) 配置钱包地址"
    echo "4) 启动挖矿节点"
    echo "5) 查看实时日志"
    echo "6) 系统信息"
    echo "7) 退出"
    echo -e "==========================================\n"
}

validate_environment() {
    echo -e "\n=== 环境验证报告 ==="
    echo "1. 编译器版本: $(g++ --version | head -n1)"
    echo "2. libstdc++ 路径: $(ldconfig -p | grep libstdc++.so)"
    echo "3. CUDA 状态: $(command -v nvcc >/dev/null && echo "已安装" || echo "未安装")"
    echo -e "===================\n"
}

###############################
# 钱包管理
###############################
manage_wallet() {
    read -rp "请输入新的挖矿钱包地址: " wallet
    [[ -z "$wallet" ]] && { c_warn "钱包地址为空，已取消操作"; return; }
    echo "WALLET=${wallet}" > "${CONFIG_FILE}"
    c_info "钱包地址已更新并写入 ${CONFIG_FILE}"
}

###############################
# 节点控制
###############################
start_mining() {
    if [[ ! -f "${CONFIG_FILE}" ]]; then
        c_warn "未配置钱包地址，请先执行选项3"
        return
    fi
    
    local wallet=$(grep -E "^WALLET=" "${CONFIG_FILE}" 2>/dev/null | cut -d= -f2)
    nohup ethminer -P "stratum1+tcp://${wallet}@eth.pool.example:4444" &>> "${LOG_FILE}" &
    c_info "挖矿节点已启动，日志写入 ${LOG_FILE}"
}

view_logs() {
    [[ -f "${LOG_FILE}" ]] || { c_warn "日志文件不存在"; return; }
    tail -n 50 -f "${LOG_FILE}"
}

###############################
# 主控制流程
###############################
main() {
    trap 'c_err "用户中断操作，退出脚本"' INT TERM
    
    while true; do
        show_menu
        read -rp "请输入选项 [1-7]: " choice
        case $choice in
            1) fix_system_deps ;;
            2) rebuild_project ;;
            3) manage_wallet ;;
            4) start_mining ;;
            5) view_logs ;;
            6) validate_environment ;;
            7) c_info "感谢使用！"; exit 0 ;;
            *) c_warn "无效输入，请重新选择" ;;
        esac
        read -rp "按回车返回主菜单..."
    done
}

# 脚本入口
main "$@"
