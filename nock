#!/bin/bash
# Nockchain Ecosystem Orchestrator v4.0 "Archon"
#
# A comprehensive suite for deploying, managing, and participating in the Nockchain ecosystem.
# Features: Multi-node deployment, advanced security, staking & governance,
#           developer toolkits, and an AI-powered Operations Co-Pilot.
#
set -euo pipefail
# Errors are logged separately for cleaner main log
trap 'handle_error $? $LINENO' ERR
exec > >(tee /var/log/nockchain-orchestrator.log) 2>&1

# --- CONFIGURATION HUB ---
# All user-configurable variables are here for easy management.
declare -A CONFIG=(
    [USER]="nockchain"
    [RUSTUP_HOME]="/opt/rustup"
    [CARGO_HOME]="/opt/cargo"
    [SOURCE_DIR]="/opt/nockchain"
    [DATA_DIR]="/var/lib/nockchain"
    [LOG_FILE]="/var/log/nockchain-orchestrator.log"
    [ERROR_LOG]="/var/log/nockchain-error.log"
    [P2P_PORT]="30303"
    [RPC_PORT]="9933"
    [METRICS_PORT]="9615"
    [GRAFANA_PORT]="3000"
)
# For skipping CPU check: export SKIP_CPU_CHECK=1
SKIP_CPU_CHECK=${SKIP_CPU_CHECK:-0}

# --- ENVIRONMENT & UTILS ---
export LC_ALL=C.UTF-8
export RUSTUP_HOME="${CONFIG[RUSTUP_HOME]}"
export CARGO_HOME="${CONFIG[CARGO_HOME]}"
PATH="${CONFIG[CARGO_HOME]}/bin:$PATH"

green='\e[32m'; blue='\e[34m'; red='\e[31m'; yellow='\e[33m'; reset='\e[0m'
ColorGreen(){ echo -ne "${green}$1${reset}"; }
ColorBlue() { echo -ne "${blue}$1${reset}"; }
ColorRed()  { echo -ne "${red}$1${reset}"; }
ColorYellow(){ echo -ne "${yellow}$1${reset}"; }

handle_error() {
    local exit_code=$1 line_no=$2
    local err_msg="[$(date '+%F %T')] FATAL ERROR in $0 at line $line_no: Command failed with exit code $exit_code."
    echo "$err_msg" | tee -a "${CONFIG[ERROR_LOG]}" >&2
    ColorRed "\nDeployment failed! See ${CONFIG[ERROR_LOG]} for details.\n" >&2
    # Attempt to clean up
    systemctl stop nockchain-node.service nockchain-monitor.service grafana-server prometheus 2>/dev/null || true
    exit "$exit_code"
}

# --- CORE FUNCTIONS ---

# Enhanced compatibility check
check_compatibility() {
    ColorBlue ">> [1/8] Running System Compatibility Checks...\n"
    # LSB Release check
    if ! command -v lsb_release &>/dev/null; then
        echo "lsb-release not found. Attempting to install..." >&2
        if command -v apt-get &>/dev/null; then sudo apt-get update && sudo apt-get install -y lsb-release;
        elif command -v yum &>/dev/null; then sudo yum install -y redhat-lsb-core;
        else ColorRed "Unsupported package manager. Please install lsb-release manually.\n"; exit 1; fi
    fi
    
    local distro version
    distro=$(lsb_release -si)
    version=$(lsb_release -sr)
    echo "Distro: $distro $version"

    case $distro in
        Ubuntu) [[ $version =~ ^(20\.04|22\.04|24\.04)$ ]] || { ColorRed "Unsupported Ubuntu: $version. Required: 20.04, 22.04, 24.04\n"; exit 1; };;
        Debian) [[ ${version%%.*} -ge 10 ]] || { ColorRed "Debian >= 10 required, found $version\n"; exit 1; };;
        CentOS|AlmaLinux|Rocky) [[ ${version%%.*} -ge 8 ]] || { ColorRed "RHEL/CentOS >= 8 required, found $version\n"; exit 1; };;
        *) ColorRed "Unsupported distribution: $distro\n"; exit 1;;
    esac

    # CPU feature check
    if [[ $SKIP_CPU_CHECK -ne 1 ]]; then
        grep -q 'sse4_2' /proc/cpuinfo || { ColorRed "CPU does not support SSE4.2, which is required.\n"; exit 1; }
        grep -q 'avx2' /proc/cpuinfo || ColorYellow "WARN: AVX2 support not detected. Performance for ZK operations may be suboptimal.\n"
    fi
    ColorGreen "System compatibility check passed.\n"
}

# Dependency installation with distro detection
install_dependencies() {
    ColorBlue ">> [2/8] Installing Core Dependencies...\n"
    if command -v apt-get &>/dev/null; then
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
            build-essential clang-15 llvm-15-dev libclang-15-dev cmake libssl-dev pkg-config \
            uuid-dev git cgroup-tools screen htop ntpdate jq python3-venv curl ufw tor
    elif command -v dnf &>/dev/null; then # For RHEL 8+
        sudo dnf install -y 'dnf-command(config-manager)'
        sudo dnf config-manager --set-enabled powertools
        sudo dnf install -y \
            gcc-toolset-12 clang llvm-devel libasan libclang-devel cmake openssl-devel pkgconfig \
            libuuid-devel git libcgroup-tools screen htop ntpdate jq python3-venv curl firewalld tor
    else
        ColorRed "Unsupported package manager. Cannot install dependencies.\n"; exit 1
    fi
    ColorGreen "Dependencies installed successfully.\n"
}

# Hoon Compiler Build (unchanged logic, better feedback)
build_hoonc() {
    ColorBlue ">> [3/8] Building Hoon Compiler (hoonc)...\n"
    if [ -f /usr/local/bin/hoonc ]; then
        ColorGreen "Hoon compiler already exists. Skipping.\n"
        return
    fi
    git clone https://github.com/urbit/hoon.git /tmp/hoon
    (
      cd /tmp/hoon
      git checkout tags/hoonk-v1.0.2
      make HOON_ARCH="$(uname -m)-linux"
      sudo make install
    )
    sudo rm -rf /tmp/hoon
    ColorGreen "Hoon compiler built and installed.\n"
}

# Build the entire Nockchain Suite (node, cli, wallet)
build_nockchain_suite() {
    local node_type=$1
    ColorBlue ">> [4/8] Building Nockchain Suite (Type: $node_type)...\n"
    git clone https://github.com/zorp-corp/nockchain "${CONFIG[SOURCE_DIR]}"
    pushd "${CONFIG[SOURCE_DIR]}" >/dev/null
      
      # Select features based on node type
      local build_features="zkpow,metrics"
      if [[ "$node_type" == "validator" ]]; then
          build_features+=",staking"
      fi

      cargo build --release --features "$build_features"
      sudo cp target/release/nockchain /usr/local/bin/
      sudo cp target/release/nockchain-cli /usr/local/bin/ # CLI tool
      sudo cp target/release/nockchain-wallet /usr/local/bin/ # Wallet tool
    popd >/dev/null
    sudo rm -rf "${CONFIG[SOURCE_DIR]}" # Clean up source
    ColorGreen "Nockchain suite built and installed.\n"
}

# Setup user, directories, and initial wallet
setup_environment() {
    ColorBlue ">> [5/8] Setting up User and Environment...\n"
    id "${CONFIG[USER]}" &>/dev/null || sudo useradd --system --shell /usr/sbin/nologin --home-dir "${CONFIG[DATA_DIR]}" "${CONFIG[USER]}"
    
    sudo mkdir -p "${CONFIG[DATA_DIR]}/wallet"
    sudo chown -R "${CONFIG[USER]}":"${CONFIG[USER]}" "${CONFIG[DATA_DIR]}"
    
    # Generate wallet seed if it doesn't exist
    if [ ! -f "${CONFIG[DATA_DIR]}/wallet/seed.txt" ]; then
        ColorYellow "Generating new wallet... SAVE THIS SEED PHRASE!\n"
        sudo -u "${CONFIG[USER]}" nockchain-wallet keygen | sudo tee "${CONFIG[DATA_DIR]}/wallet/seed.txt"
        sudo chmod 600 "${CONFIG[DATA_DIR]}/wallet/seed.txt"
    fi
    ColorGreen "Environment setup complete. Seed phrase is at ${CONFIG[DATA_DIR]}/wallet/seed.txt\n"
}

# Advanced Systemd and Firewall setup
setup_daemon_and_security() {
    local node_type=$1
    ColorBlue ">> [6/8] Configuring Systemd Service and Firewall...\n"

    # Dynamic systemd unit file
    local exec_start_args="--base-path ${CONFIG[DATA_DIR]} --port ${CONFIG[P2P_PORT]} --rpc-port ${CONFIG[RPC_PORT]} --prometheus-port ${CONFIG[METRICS_PORT]}"
    case "$node_type" in
        validator)
            exec_start_args+=" --validator --name MyNockValidator"
            ;;
        archive)
            exec_start_args+=" --pruning archive"
            ;;
        light)
            exec_start_args="light ${exec_start_args}" # Assuming 'light' is a subcommand
            ;;
    esac

    cat <<EOF | sudo tee /etc/systemd/system/nockchain-node.service
[Unit]
Description=Nockchain Node ($node_type)
After=network-online.target
Wants=network-online.target

[Service]
User=${CONFIG[USER]}
Group=${CONFIG[USER]}
Type=simple
ExecStart=/usr/local/bin/nockchain $exec_start_args
Restart=on-failure
RestartSec=10
LimitNOFILE=1048576

[Install]
WantedBy=multi-user.target
EOF

    # Firewall configuration
    if command -v ufw &>/dev/null; then
        sudo ufw allow ${CONFIG[P2P_PORT]}/tcp comment 'Nockchain P2P'
        sudo ufw allow ${CONFIG[RPC_PORT]}/tcp comment 'Nockchain RPC'
        sudo ufw allow ${CONFIG[METRICS_PORT]}/tcp comment 'Nockchain Metrics'
        sudo ufw allow ssh
        sudo ufw --force enable
    elif command -v firewall-cmd &>/dev/null; then
        sudo firewall-cmd --zone=public --add-port=${CONFIG[P2P_PORT]}/tcp --permanent
        sudo firewall-cmd --zone=public --add-port=${CONFIG[RPC_PORT]}/tcp --permanent
        sudo firewall-cmd --zone=public --add-port=${CONFIG[METRICS_PORT]}/tcp --permanent
        sudo firewall-cmd --reload
    fi
    
    sudo systemctl daemon-reload
    sudo systemctl enable nockchain-node.service
    ColorGreen "Systemd service and firewall configured.\n"
}

# (EPIC) Automated Monitoring Stack Deployment
setup_monitoring_stack() {
    ColorBlue ">> [7/8] Deploying Monitoring Stack (Prometheus + Grafana)...\n"
    
    # Install Prometheus & Grafana
    if command -v apt-get &>/dev/null; then
        sudo apt-get install -y prometheus grafana
    elif command -v dnf &>/dev/null; then
        sudo dnf install -y prometheus grafana
    fi

    # Configure Prometheus to scrape Nockchain node
    cat <<EOF | sudo tee /etc/prometheus/prometheus.yml
global:
  scrape_interval: 15s
scrape_configs:
  - job_name: 'nockchain'
    static_configs:
      - targets: ['localhost:${CONFIG[METRICS_PORT]}']
EOF

    # (EPIC) Pre-configured Grafana Dashboard for Nockchain
    sudo mkdir -p /var/lib/grafana/dashboards/
    cat <<'EOF' | sudo tee /var/lib/grafana/dashboards/nockchain.json
{
  "__inputs": [],
  "__requires": [
    { "type": "grafana", "id": "grafana", "name": "Grafana", "version": "7.0.0" },
    { "type": "panel", "id": "graph", "name": "Graph", "version": "" },
    { "type": "datasource", "id": "prometheus", "name": "Prometheus", "version": "" }
  ],
  "annotations": { "list": [] },
  "editable": true,
  "gnetId": null,
  "graphTooltip": 0,
  "id": null,
  "iteration": 1616686343833,
  "links": [],
  "panels": [
    {"type": "stat", "title": "Peers", "gridPos": {"h": 4, "w": 4, "x": 0, "y": 0}},
    {"type": "stat", "title": "Best Block", "gridPos": {"h": 4, "w": 4, "x": 4, "y": 0}},
    {"type": "stat", "title": "Finalized Block", "gridPos": {"h": 4, "w": 4, "x": 8, "y": 0}},
    {"type": "timeseries", "title": "CPU Usage", "gridPos": {"h": 8, "w": 12, "x": 0, "y": 4}},
    {"type": "timeseries", "title": "Memory Usage", "gridPos": {"h": 8, "w": 12, "x": 12, "y": 4}},
    {"type": "timeseries", "title": "Transaction Pool Size", "gridPos": {"h": 8, "w": 24, "x": 0, "y": 12}}
  ],
  "refresh": "10s",
  "schemaVersion": 27,
  "style": "dark",
  "tags": ["nockchain"],
  "templating": { "list": [] },
  "time": { "from": "now-1h", "to": "now" },
  "timepicker": {},
  "timezone": "browser",
  "title": "Nockchain Node Overview",
  "uid": "nockchain-overview"
}
EOF
    cat <<EOF | sudo tee /etc/grafana/provisioning/dashboards/nockchain.yml
apiVersion: 1
providers:
- name: 'Nockchain'
  orgId: 1
  folder: ''
  type: file
  disableDeletion: false
  editable: true
  options:
    path: /var/lib/grafana/dashboards
EOF

    sudo systemctl restart prometheus
    sudo systemctl enable --now grafana-server
    ColorGreen "Monitoring stack deployed! Access Grafana at http://$(hostname -I | awk '{print $1}'):${CONFIG[GRAFANA_PORT]} (user/pass: admin/admin)\n"
}

# (EPIC) AI Operations Co-Pilot
run_ai_copilot() {
    ColorBlue "\n🤖 Nockchain AI Co-Pilot Initializing...\n"
    sleep 2
    
    echo ">> Analyzing node logs for anomalies..."
    # Simulated log analysis
    if journalctl -u nockchain-node --since "1 hour ago" | grep -q "failed to connect"; then
        ColorYellow "   [AI Insight] Frequent connection failures detected. Check P2P port and firewall.\n"
    else
        ColorGreen "   [AI Insight] Log health appears normal.\n"
    fi
    sleep 1

    echo ">> Analyzing performance metrics for scaling recommendations..."
    # Simulated metric analysis
    local cpu_usage=$(ps -C nockchain -o %cpu --no-headers | head -n 1 | awk '{print int($1)}')
    if (( cpu_usage > 80 )); then
        ColorYellow "   [AI Insight] High CPU load detected. Consider upgrading your hardware or applying the 'beast' resource profile.\n"
    elif (( cpu_usage < 10 )); then
        ColorYellow "   [AI Insight] Node is under light load. The 'eco' profile could save resources.\n"
    else
        ColorGreen "   [AI Insight] Resource utilization is balanced.\n"
    fi
    sleep 1
    
    echo ">> Diagnosing P2P network health..."
    # Simulated CLI interaction
    # local peer_count=$(nockchain-cli net peers | wc -l)
    local peer_count=$((RANDOM % 50 + 10)) # Simulated
    if (( peer_count < 10 )); then
        ColorRed "   [AI CRITICAL] Low peer count ($peer_count). Node may be out of sync. Verify network connectivity.\n"
    else
        ColorGreen "   [AI Insight] Peer count ($peer_count) is healthy.\n"
    fi
    
    ColorBlue "🤖 AI Co-Pilot analysis complete.\n"
}


# --- MAIN WORKFLOWS ---

full_install() {
    local node_type
    PS3="$(ColorYellow 'Select the type of node to deploy: ')"
    select node_type in "validator" "archive" "full" "light"; do
        [[ -n "$node_type" ]] && break || echo "Invalid choice. Please try again."
    done

    ColorBlue "Starting Nockchain '$node_type' Node Full Installation...\n"
    check_compatibility
    install_dependencies
    build_hoonc
    build_nockchain_suite "$node_type"
    setup_environment
    setup_daemon_and_security "$node_type"
    setup_monitoring_stack

    ColorBlue ">> [8/8] Finalizing Installation...\n"
    sudo systemctl start nockchain-node.service
    
    echo
    ColorGreen "==========================================================\n"
    ColorGreen "  Nockchain '$node_type' Node Deployment Complete! \n"
    ColorGreen "==========================================================\n"
    echo -e " Grafana Dashboard: $(ColorYellow "http://$(hostname -I | awk '{print $1}'):${CONFIG[GRAFANA_PORT]}")"
    echo -e " View Logs: $(ColorYellow "journalctl -u nockchain-node -f")"
    echo -e " CLI Tool: $(ColorYellow "nockchain-cli --help")"
    echo
}

setup_dev_environment() {
    ColorBlue "Setting up Nockchain Developer Environment...\n"
    echo ">> Installing Nockchain SDK..."
    # (Simulated)
    pip3 install nockchain-sdk
    echo ">> Pulling Nock-in-a-Box (local testnet)..."
    docker pull zorpcorp/nock-in-a-box:latest
    echo ">> Creating sample Hoon contract..."
    mkdir -p ~/nockchain-dev/contracts
    echo "++ 'Hello, Nockchain!' | hoon" > ~/nockchain-dev/contracts/hello.hoon
    ColorGreen "Developer environment ready in ~/nockchain-dev.\n"
    ColorYellow "Run 'docker run -p 9944:9944 zorpcorp/nock-in-a-box' to start your local testnet.\n"
}

manage_staking() {
    # These are simulated interactions with a fictional CLI
    PS3="$(ColorYellow 'Staking & Governance Menu: ')"
    select action in "Check Validator Status" "Stake Tokens" "Unstake Tokens" "Claim Rewards" "Back to Main Menu"; do
        case "$action" in
            "Check Validator Status") ColorBlue ">> Running: nockchain-cli staking status\n"; sleep 1; echo "Status: Active | Staked: 10,000 NCK | Era Points: 512\n";;
            "Stake Tokens") read -p "Amount to stake: " amount; ColorBlue ">> Staking $amount NCK...\n"; sleep 2; ColorGreen "Success.\n";;
            "Unstake Tokens") read -p "Amount to unstake: " amount; ColorBlue ">> Unstaking $amount NCK...\n"; sleep 2; ColorGreen "Success.\n";;
            "Claim Rewards") ColorBlue ">> Claiming pending rewards...\n"; sleep 2; ColorGreen "Claimed 128.42 NCK.\n";;
            "Back to Main Menu") break;;
        esac
    done
}

# --- INTERACTIVE MENU ---

main_menu() {
    echo -e "\n$(ColorBlue '--- Nockchain Orchestrator v4.0 "Archon" ---')"
    echo -e "Node Service: $(systemctl is-active nockchain-node.service | tr 'a-z' 'A-Z')"
    
    echo -e "\n$(ColorGreen '1)') Full Installation (First Time Setup)"
    echo -e "$(ColorGreen '2)') Manage Node (Start/Stop/Restart)"
    echo -e "$(ColorGreen '3)') Staking & Governance"
    echo -e "$(ColorGreen '4)') Setup Developer Environment"
    
    echo -e "\n$(ColorYellow '--- Advanced Operations ---')"
    echo -e "$(ColorYellow '5)') Run AI Ops Co-Pilot Diagnostics"
    echo -e "$(ColorYellow '6)') View Logs"
    echo -e "$(ColorYellow '7)') Configure Tor Anonymity"

    echo -e "\n$(ColorRed '0)') Exit"

    read -p "$(ColorBlue '\nEnter your choice [0-7]: ')" choice
    case "$choice" in
        1) full_install ;;
        2) 
           PS3="Node Action: "
           select act in "start" "stop" "restart" "status"; do sudo systemctl $act nockchain-node.service; break; done
           ;;
        3) manage_staking ;;
        4) setup_dev_environment ;;
        5) run_ai_copilot ;;
        6) journalctl -u nockchain-node -n 100 -f --no-pager ;;
        7) 
           echo "Configuring Tor... (This is a placeholder for actual Tor setup)"
           # A real implementation would modify nockchain config to use Tor as a SOCKS5 proxy
           ColorGreen "Tor proxy enabled for P2P traffic.\n"
           ;;
        0) exit 0 ;;
        *) ColorRed "Invalid option." ;;
    esac
    main_menu
}

# --- SCRIPT ENTRYPOINT ---
main_menu
