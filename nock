#!/bin/bash

# ========= 色彩定义 =========
RESET='\033[0m'
BOLD='\033[1m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'

# ========= 项目路径 =========
NCK_DIR="$HOME/nockchain"
ENV_FILE="$NCK_DIR/.env"

# ========= 横幅 =========
function show_banner() {
  clear
  echo -e "${BOLD}${BLUE}"
  echo "==============================================="
  echo "         Nockchain 挖矿优化助手 v2.0"
  echo "==============================================="
  echo -e "${RESET}"
  echo "📌 作者: K2 节点教程分享"
  echo "🔗 Telegram: https://t.me/+EaCiFDOghoM3Yzll"
  echo "🐦 Twitter:  https://x.com/BtcK241918"
  echo "⚡ 优化版本: 编译优化 + 性能调优"
  echo "-----------------------------------------------"
  echo ""
}

function cd_nck_dir() {
  if [ -d "$NCK_DIR" ]; then
    cd "$NCK_DIR" || exit 1
  else
    echo -e "${RED}[-] 项目目录不存在: $NCK_DIR${RESET}"
    exit 1
  fi
}

function optimize_system() {
  echo -e "${YELLOW}[*] 应用系统级性能优化...${RESET}"
  
  # CPU性能模式
  for gov in /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor 2>/dev/null
  do
    if [ -w "$gov" ]; then
      echo performance | sudo tee "$gov" >/dev/null 2>&1
    fi
  done
  
  # 网络优化
  sudo sysctl -w net.core.rmem_max=16777216 >/dev/null 2>&1
  sudo sysctl -w net.core.wmem_max=16777216 >/dev/null 2>&1
  
  echo -e "${GREEN}[+] 系统优化完成${RESET}"
}

function setup_all() {
  echo -e "[*] 开始优化安装流程..."
  
  # 系统优化
  optimize_system
  
  echo -e "[*] 安装系统依赖..."
  sudo apt update -qq
  sudo apt install -y clang llvm-dev libclang-dev pkg-config libssl-dev build-essential cmake curl git make screen htop

  echo -e "[*] 安装 Rust 工具链..."
  if ! command -v cargo &>/dev/null; then
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    source "$HOME/.cargo/env"
  fi

  RC_FILE="$HOME/.bashrc"
  [[ "$SHELL" == *"zsh"* ]] && RC_FILE="$HOME/.zshrc"
  if ! grep -q 'export PATH="$HOME/.cargo/bin:$PATH"' "$RC_FILE"; then
    echo 'export PATH="$HOME/.cargo/bin:$PATH"' >> "$RC_FILE"
  fi
  export PATH="$HOME/.cargo/bin:$PATH"

  echo -e "[*] 获取仓库..."
  if [ -d "$NCK_DIR" ]; then
    cd "$NCK_DIR" && git pull
  else
    git clone https://github.com/zorp-corp/nockchain "$NCK_DIR"
  fi

  cd_nck_dir

  echo -e "[*] 设置环境配置..."
  cp -n .env_example "$ENV_FILE"

  echo -e "[*] 安装 hoonc..."
  make install-hoonc || { echo -e "${RED}[-] install-hoonc 失败${RESET}"; exit 1; }

  echo -e "[*] 开始优化编译 Nockchain..."
  # 高性能编译优化设置
  export RUSTFLAGS="-C target-cpu=native -C opt-level=3 -C codegen-units=1 -C lto=fat"
  export CARGO_PROFILE_RELEASE_LTO=true
  export CARGO_PROFILE_RELEASE_CODEGEN_UNITS=1
  export CARGO_PROFILE_RELEASE_PANIC="abort"
  
  make build || { echo -e "${RED}[-] build 失败${RESET}"; exit 1; }

  echo -e "[*] 安装钱包组件..."
  make install-nockchain-wallet || { echo -e "${RED}[-] install-nockchain-wallet 失败${RESET}"; exit 1; }

  echo -e "[*] 安装节点组件..."
  make install-nockchain || { echo -e "${RED}[-] install-nockchain 失败${RESET}"; exit 1; }

  echo -e "${GREEN}[+] 优化安装完成！${RESET}"
  pause_and_return
}

function generate_wallet() {
  echo -e "[*] 生成钱包..."
  cd_nck_dir
  ./target/release/nockchain-wallet keygen
  echo -e "${YELLOW}[!] 钱包生成完成，请复制上方公钥到下一步设置中${RESET}"
  echo -e "${BLUE}[i] 公钥格式为128位16进制字符串${RESET}"
  pause_and_return
}

function validate_pubkey() {
  local pubkey="$1"
  
  # 检查长度是否为128位
  if [ ${#pubkey} -ne 128 ]; then
    echo -e "${RED}[-] 公钥长度错误！应为128位，当前为${#pubkey}位${RESET}"
    return 1
  fi
  
  # 检查是否为有效的16进制字符
  if [[ ! "$pubkey" =~ ^[0-9a-fA-F]{128}$ ]]; then
    echo -e "${RED}[-] 公钥格式错误！只能包含0-9和a-f字符${RESET}"
    return 1
  fi
  
  return 0
}

function set_pubkey_env() {
  echo -e "[*] 设置 MINING_PUBKEY 到 .env..."
  cd_nck_dir

  echo -e "${BLUE}[i] 公钥格式要求：128位16进制字符串${RESET}"
  echo -e "${BLUE}[i] 示例格式：d24c0c53d1162325eba695f32b7194f4c9b2943441a3162837922d36f3325c341ce049e7b3992080a9603e91147e4529f79261a355e16570c975a6c0e81716e3${RESET}"
  echo ""
  
  while true; do
    read -p "请输入公钥 (MINING_PUBKEY): " pubkey
    
    if [ -z "$pubkey" ]; then
      echo -e "${RED}[-] 公钥不能为空${RESET}"
      continue
    fi
    
    # 去除可能的空格
    pubkey=$(echo "$pubkey" | tr -d ' ')
    
    # 验证公钥格式
    if validate_pubkey "$pubkey"; then
      # 转换为小写
      pubkey=$(echo "$pubkey" | tr '[:upper:]' '[:lower:]')
      
      # 写入环境文件
      sed -i '/^MINING_PUBKEY=/d' "$ENV_FILE"
      echo "MINING_PUBKEY=$pubkey" >> "$ENV_FILE"
      
      echo -e "${GREEN}[+] 公钥格式验证通过，已写入 .env 文件${RESET}"
      echo -e "${GREEN}[+] 公钥: $pubkey${RESET}"
      break
    else
      echo -e "${YELLOW}[!] 请重新输入正确格式的公钥${RESET}"
    fi
  done
  
  pause_and_return
}

function export_keys() {
  echo -e "[*] 导出钱包密钥..."
  cd_nck_dir
  ./target/release/nockchain-wallet export-keys
  echo -e "${GREEN}[+] 密钥已导出到 keys.export${RESET}"
  pause_and_return
}

function import_keys() {
  echo -e "[*] 导入钱包密钥..."
  cd_nck_dir
  read -p "[?] 请输入密钥文件路径 (默认: ./keys.export): " keyfile
  keyfile=${keyfile:-"./keys.export"}
  ./target/release/nockchain-wallet import-keys --input "$keyfile"
  echo -e "${GREEN}[+] 密钥已导入${RESET}"
  pause_and_return
}

function start_node() {
  echo -e "[*] 启动优化节点 (screen)..."
  cd_nck_dir
  source "$ENV_FILE"

  # 检查是否已设置公钥
  if [ -z "$MINING_PUBKEY" ]; then
    echo -e "${RED}[-] 未设置 MINING_PUBKEY，请先设置挖矿公钥${RESET}"
    pause_and_return
    return
  fi

  chmod +x ./scripts/run_nockchain_miner.sh

  if screen -list | grep -qw "nockchain"; then
    echo "[*] 关闭旧的 screen 会话..."
    screen -S nockchain -X quit
    sleep 2
  fi

  # 使用高优先级启动
  screen -dmS nockchain bash -c "cd $NCK_DIR && nice -n -10 ./scripts/run_nockchain_miner.sh"

  sleep 3
  if screen -list | grep -qw "nockchain"; then
    echo -e "${GREEN}[+] 节点已启动 (screen 会话名: nockchain)${RESET}"
    echo -e "${GREEN}[+] 使用公钥: $MINING_PUBKEY${RESET}"
    echo -e "${YELLOW}[!] 使用 'screen -r nockchain' 查看日志${RESET}"
  else
    echo -e "${RED}[-] 节点启动失败${RESET}"
    echo "请检查 $NCK_DIR/scripts/run_nockchain_miner.sh 脚本"
  fi
  pause_and_return
}

function view_logs() {
  if screen -list | grep -qw "nockchain"; then
    echo -e "${YELLOW}[!] 进入日志查看 (Ctrl+A+D 可退出)...${RESET}"
    screen -r nockchain
  else
    echo -e "${RED}[-] 节点未运行${RESET}"
  fi
  pause_and_return
}

function check_status() {
  echo -e "[*] 检查节点状态..."
  
  # 显示当前公钥配置
  cd_nck_dir
  if [ -f "$ENV_FILE" ]; then
    source "$ENV_FILE"
    if [ -n "$MINING_PUBKEY" ]; then
      echo -e "${GREEN}[+] 已配置公钥: ${MINING_PUBKEY:0:16}...${MINING_PUBKEY: -16}${RESET}"
    else
      echo -e "${YELLOW}[!] 未设置挖矿公钥${RESET}"
    fi
  fi
  
  if screen -list | grep -qw "nockchain"; then
    echo -e "${GREEN}[+] 节点运行中${RESET}"
    
    # 显示CPU使用情况
    if command -v htop >/dev/null; then
      echo -e "${YELLOW}[*] CPU使用情况 (5秒后自动返回):${RESET}"
      timeout 5 htop -d 1 || true
    fi
  else
    echo -e "${RED}[-] 节点未运行${RESET}"
  fi
  
  pause_and_return
}

function stop_node() {
  echo -e "[*] 停止节点..."
  if screen -list | grep -qw "nockchain"; then
    screen -S nockchain -X quit
    sleep 2
    echo -e "${GREEN}[+] 节点已停止${RESET}"
  else
    echo -e "${YELLOW}[!] 节点未运行${RESET}"
  fi
  pause_and_return
}

function pause_and_return() {
  echo ""
  read -n1 -r -p "按任意键返回主菜单..." key
  main_menu
}

function main_menu() {
  show_banner
  echo "请选择操作:"
  echo "  1) 🚀 一键优化安装"
  echo "  2) 🔑 生成钱包"
  echo "  3) 📝 设置挖矿公钥 (128位16进制)"
  echo "  4) 💾 导出密钥"
  echo "  5) 📂 导入密钥"
  echo "  6) ⚡ 启动节点"
  echo "  7) 📊 查看日志"
  echo "  8) 🔍 检查状态"
  echo "  9) ⏹️  停止节点"
  echo "  0) 退出"
  echo ""
  read -p "请输入编号: " choice

  case "$choice" in
    1) setup_all ;;
    2) generate_wallet ;;
    3) set_pubkey_env ;;
    4) export_keys ;;
    5) import_keys ;;
    6) start_node ;;
    7) view_logs ;;
    8) check_status ;;
    9) stop_node ;;
    0) echo "退出脚本."; exit 0 ;;
    *) echo -e "${RED}[-] 无效选项${RESET}"; pause_and_return ;;
  esac
}

main_menu
