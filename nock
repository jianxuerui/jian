#!/usr/bin/env sh
# nockchain_toolbox.sh 终极兼容版 v8.0
# 特性：POSIX兼容 + 全发行版支持 + 智能硬件适配 + 军工级错误处理

# 启用严格模式
set -eu

# 初始化环境变量
SRC_DIR="${HOME}/build/ethminer"
INSTALL_PREFIX="/usr/local"
LOG_FILE="${HOME}/nockchain.log"
CONFIG_FILE="${HOME}/.nockchain.conf"
WORKDIR="$(pwd)"
export LC_ALL=C

# 颜色输出函数（兼容POSIX）
c_red() { printf '\033[31m%s\033[0m\n' "$1"; }
c_green() { printf '\033[32m%s\033[0m\n' "$1"; }
c_yellow() { printf '\033[33m%s\033[0m\n' "$1"; }

# 错误处理函数
die() {
    c_red "[ERR] $1" >&2
    cleanup
    exit 1
}

# 清理函数
cleanup() {
    cd "$WORKDIR" || true
    [ -n "${TEMP_DIR:-}" ] && rm -rf "$TEMP_DIR"
}

# 信号捕获
trap 'die "用户中断操作"' INT HUP TERM

# 系统检测函数
detect_os() {
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        echo "$ID"
    elif command -v lsb_release >/dev/null; then
        lsb_release -si | tr '[:upper:]' '[:lower:]'
    else
        uname -s | tr '[:upper:]' '[:lower:]'
    fi
}

# 包管理器映射表
setup_pkg_mgr() {
    case "$(detect_os)" in
        debian|ubuntu) echo "apt" ;;
        centos|rhel|fedora|ol) echo "yum" ;;
        alpine) echo "apk" ;;
        arch|manjaro) echo "pacman" ;;
        opensuse|sles) echo "zypper" ;;
        *) die "不支持的发行版" ;;
    esac
}

# 安装依赖（全发行版支持）
install_deps() {
    c_green "正在安装系统依赖..."
    case "$PKG_MGR" in
        apt)
            apt-get update
            apt-get install -y build-essential cmake git libstdc++6 ocl-icd-opencl-dev opencl-headers ;;
        yum)
            yum install -y gcc-c++ cmake git libstdc++-devel ocl-icd-devel opencl-headers mesa-libGL-devel ;;
        apk)
            apk add --no-cache build-base cmake git libstdc++ ocl-icd opencl-headers mesa-gl ;;
        pacman)
            pacman -Syu --noconfirm gcc cmake git glibc opencl-icd-loader opencl-headers mesa ;;
        zypper)
            zypper -n install gcc-c++ cmake git libstdc++6 ocl-icd-devel opencl-headers Mesa-libGL-devel ;;
        *) die "包管理器不支持" ;;
    esac
}

# 智能源码管理
fetch_source() {
    if [ -d "$SRC_DIR/.git" ]; then
        c_green "更新源码仓库..."
        git -C "$SRC_DIR" stash -u || true
        git -C "$SRC_DIR" pull --rebase || die "源码更新失败"
        git -C "$SRC_DIR" stash pop || true
    else
        c_green "克隆源码仓库..."
        git clone --depth 1 https://github.com/ethereum-mining/ethminer.git "$SRC_DIR" || die "克隆失败"
    fi
}

# POSIX兼容补丁
apply_patches() {
    c_green "应用兼容性补丁..."
    sed -i.bak '
        s/if(USE_SYS_OPENCL)/if(TRUE)/g
        s/add_compile_options(-Wno-deprecated-declarations)//g
        s/-std=c++11/-std=c++11 -Wno-deprecated-declarations/g
    ' "$SRC_DIR/CMakeLists.txt"
}

# 硬件检测
detect_hardware() {
    CUDA_PATH="$(command -v nvcc >/dev/null && dirname "$(command -v nvcc)")/.."
    [ -d "${CUDA_PATH:-}" ] && echo "ON" || echo "OFF"
}

# 编译安装
build_ethminer() {
    c_green "开始编译..."
    mkdir -p "$SRC_DIR/build"
    cd "$SRC_DIR/build" || die "目录切换失败"

    cmake .. \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_CXX_COMPILER="$(command -v g++)" \
        -DETHASHCUDA="$(detect_hardware)" \
        -DUSE_SYS_OPENCL=ON \
        || die "CMake配置失败"

    make -j "$(nproc)" || die "编译失败"
    make install || die "安装失败"
}

# 钱包管理
manage_wallet() {
    printf "请输入钱包地址: "
    read -r wallet
    [ -z "$wallet" ] && die "钱包地址不能为空"
    echo "WALLET=$wallet" > "$CONFIG_FILE"
}

# 节点控制
start_node() {
    [ ! -f "$CONFIG_FILE" ] && die "未配置钱包"
    . "$CONFIG_FILE"
    nohup ethminer -P "stratum1+tcp://${WALLET}@eth.pool.example:4444" >> "$LOG_FILE" 2>&1 &
}

# 日志查看
view_logs() {
    tail -n 50 -f "$LOG_FILE"
}

# 主菜单
show_menu() {
    clear
    c_green "========== Nockchain 管理终端 =========="
    echo "1) 安装/更新 ethminer"
    echo "2) 配置钱包地址"
    echo "3) 启动挖矿节点"
    echo "4) 查看实时日志"
    echo "5) 退出"
    echo "========================================"
}

# 主流程
main() {
    PKG_MGR="$(setup_pkg_mgr)"
    while true; do
        show_menu
        printf "请选择操作: "
        read -r choice
        case $choice in
            1) install_deps; fetch_source; apply_patches; build_ethminer ;;
            2) manage_wallet ;;
            3) start_node ;;
            4) view_logs ;;
            5) c_green "感谢使用！"; exit 0 ;;
            *) c_red "无效选项"; sleep 1 ;;
        esac
    done
}

# 执行入口
main "$@"
