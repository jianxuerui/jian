#!/usr/bin/env sh
# shellcheck disable=SC2034,SC2164
# 增强版 Nockchain 矿工工具 v5.2.1 (调试增强版)

set -euo pipefail
IFS='
'

# --- 颜色定义 ---
RED='\033[1;31m'
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
CYAN='\033[1;36m'
BLUE='\033[1;34m'
NC='\033[0m'

# --- 全局配置 ---
NOCK_DIR="${XDG_DATA_HOME:-$HOME/.local/share}/nockchain"
CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/nockchain"
CACHE_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/nockchain"
LOG_FILE="$CACHE_DIR/miner.log"
CONFIG_FILE="$CONFIG_DIR/miner.conf"
PID_FILE="$CACHE_DIR/miner.pid"

SUDO_CMD=""
if [ "$(id -u)" -ne 0 ]; then
  SUDO_CMD="sudo"
fi

get_cpu_cores() {
  case "$(uname -s)" in
    Linux*)  nproc 2>/dev/null || echo "2" ;;
    Darwin*) sysctl -n hw.ncpu 2>/dev/null || echo "2" ;;
    *)       echo "2" ;;
  esac
}

init_environment() {
  mkdir -p "$NOCK_DIR" "$CONFIG_DIR" "$CACHE_DIR"
  if [ ! -f "$CONFIG_FILE" ]; then
    echo "${CYAN}▶ 正在创建默认配置文件...${NC}"
    cat > "$CONFIG_FILE" <<EOF
MINING_ADDRESS="0x0000000000000000000000000000000000000000"
RPC_URL="http://127.0.0.1:8545"
MINING_THREADS=$(get_cpu_cores)
OPT_MODE="release"
REPO_PATH="$HOME/nockchain"
EOF
  fi
  . "$CONFIG_FILE"
}

detect_platform() {
  OS_NAME=$(uname -s | tr '[:upper:]' '[:lower:]')
  case "$OS_NAME" in
    linux*)
      [ -f /etc/os-release ] && . /etc/os-release
      PKG_MANAGER=""
      [ -x "$(command -v apt)" ] && PKG_MANAGER="apt"
      [ -x "$(command -v dnf)" ] && PK_MANAGER="dnf"
      [ -x "$(command -v pacman)" ] && PKG_MANAGER="pacman"
      ;;
    darwin)  PKG_MANAGER="brew" ;;
    freebsd) PKG_MANAGER="pkg" ;;
    *)       PKG_MANAGER="unknown" ;;
  esac
}

create_tempfile() {
  mktemp -t nockchain.XXXXXX 2>/dev/null || printf "%s/tmp.%s.%s" "$CACHE_DIR" "$(date +%s%N)" "$$"
}

install_deps() {
  echo "${CYAN}▶ 正在安装依赖...${NC}"
  # ... (其他代码保持不变)
  case "$PKG_MANAGER" in
    apt)
      $SUDO_CMD apt-get update
      $SUDO_CMD apt-get install -y build-essential cmake clang llvm git curl
      ;;
    dnf|yum)
      $SUDO_CMD "$PKG_MANAGER" install -y gcc-c++ make cmake clang llvm-toolset git curl
      ;;
    pacman)
      $SUDO_CMD pacman -S --noconfirm --needed base-devel cmake clang llvm git curl
      ;;
    brew)
      brew update
      brew install cmake llvm git
      ;;
    pkg)
      $SUDO_CMD pkg install -y gmake cmake clang llvm git curl
      ;;
    *)
      echo "${RED}不支持的包管理器: ${PKG_MANAGER:-未检测到}。请手动安装所需依赖。${NC}" >&2
      exit 1
      ;;
  esac
}

safe_clone_repo() {
  # ... (其他代码保持不变)
  if [ ! -d "$REPO_PATH/.git" ]; then
    echo "${CYAN}▶ 正在克隆主仓库到 '$REPO_PATH'...${NC}"
    if ! git clone https://github.com/nockchain/nockchain.git "$REPO_PATH"; then
      echo "${YELLOW}HTTPS克隆失败，尝试SSH方式...${NC}"
      git clone git@github.com:nockchain/nockchain.git "$REPO_PATH" || {
        echo "${RED}克隆失败，请检查网络和权限${NC}" >&2
        exit 1
      }
    fi
  else
    echo "${CYAN}▶ 正在更新仓库代码...${NC}"
    (
      cd "$REPO_PATH" && git pull
    ) || {
      echo "${YELLOW}更新失败，尝试强制更新...${NC}"
      (
         cd "$REPO_PATH" && git fetch --all && git reset --hard origin/main
      )
    }
  fi
}

optimized_build() {
  echo "${CYAN}▶ 正在以 '${OPT_MODE}' 模式编译...${NC}"
  (
    cd "$REPO_PATH"
    make clean
    case "$OPT_MODE" in
      pgo)   make pgo ;;
      lto)   make lto ;;
      bolt)  make bolt ;;
      *)     make release ;;
    esac
  ) || { echo "${RED}编译失败，请检查依赖和源码。${NC}"; exit 1; }
}

# 主安装流程 (添加了调试信息)
install_nockchain() {
  echo "${YELLOW}[DEBUG] 启动安装流程...${NC}"
  
  echo "${CYAN}▶ 步骤 1/4: 检测平台...${NC}"
  detect_platform
  echo "${GREEN}✔ 平台检测完成: ${PKG_MANAGER:-unknown}${NC}"
  
  echo "${CYAN}▶ 步骤 2/4: 安装依赖... (此步骤可能需要输入密码并等待较长时间)${NC}"
  install_deps
  echo "${GREEN}✔ 依赖安装完成。${NC}"

  echo "${CYAN}▶ 步骤 3/4: 克隆/更新代码... (此步骤受网络速度影响)${NC}"
  safe_clone_repo
  echo "${GREEN}✔ 代码更新完成。${NC}"

  echo "${CYAN}▶ 步骤 4/4: 编译源码... (此步骤非常耗时，请耐心等待！)${NC}"
  optimized_build
  echo "${GREEN}✔ 编译完成。${NC}"

  echo "${GREEN}▶ 正在安装优化版本...${NC}"
  mkdir -p "${HOME}/.local/bin"
  install -m755 "$REPO_PATH/build/nockchain" "${HOME}/.local/bin/"

  if ! echo "$PATH" | grep -q "$HOME/.local/bin"; then
    echo "${YELLOW}----------------------------------------------------------------------${NC}"
    echo "${YELLOW}注意: '${HOME}/.local/bin' 不在你的 PATH 环境变量中。${NC}"
    echo "${YELLOW}请将以下行添加到你的 shell 配置文件 (如 ~/.bashrc, ~/.zshrc) 中:${NC}"
    echo
    echo "  export PATH=\"\$HOME/.local/bin:\$PATH\""
    echo
    echo "${YELLOW}然后重启你的终端, 或运行 'source ~/.your_shell_profile' 来立即生效。${NC}"
    echo "${YELLOW}----------------------------------------------------------------------${NC}"
  fi
  echo "${GREEN}✔ Nockchain 安装/更新全部完成!${NC}"
  sleep 3
}

# --- 完整的其他函数 ---
# (为了简洁，这里省略了 change_mining_address, start_miner, stop_miner 等函数的代码，
# 但在您复制时，请确保它们都在文件里)

change_mining_address() {
    . "$CONFIG_FILE"
    echo "${CYAN}--- 更改挖矿地址 ---${NC}"
    echo "当前挖矿地址: ${GREEN}$MINING_ADDRESS${NC}"
    printf "${CYAN}➤ 请输入新的挖矿地址 (或直接回车取消): ${NC}"
    read -r new_address

    if [ -z "$new_address" ]; then
        echo "${YELLOW}操作已取消。${NC}"
        sleep 2
        return
    fi

    if ! echo "$new_address" | grep -Eq '^0x[a-fA-F0-9]{40}$'; then
        echo "${RED}✘ 错误：地址格式无效。${NC}"
        sleep 3
        return 1
    fi
    
    sed -i.bak "s|^MINING_ADDRESS=.*|MINING_ADDRESS=\"$new_address\"|" "$CONFIG_FILE" && rm -f "${CONFIG_FILE}.bak"
    echo "${GREEN}✔ 挖矿地址已成功更新。${NC}"
    sleep 3
}

start_miner() {
    # ... start_miner的完整代码
    echo "启动矿机..."
}
stop_miner() {
    # ... stop_miner的完整代码
    echo "停止矿机..."
}
show_monitor() {
    # ... show_monitor的完整代码
    echo "显示监控..."
}
# ... 所有其他函数 ...

# --- 主流程控制 ---
cleanup() {
  rm -f "${TMPFILE:-/tmp/nockchain_tmp_*}"
  trap - EXIT INT TERM
}

show_menu() {
  while true; do
    . "$CONFIG_FILE"
    clear
    echo "${BLUE}"
    cat << "EOF"
╔════════════════════════════════════════════════╗
║             Nockchain 矿工专业版 v5.2.1          ║
╠════════════════════════════════════════════════╣
║ 1) 完整安装/更新     2) 更改挖矿地址           ║
║ 3) 启动/停止矿机     4) 实时监控               ║
║ 5) 高级编译设置      6) 系统服务管理           ║
║ 7) 性能调优          0) 退出                   ║
╚════════════════════════════════════════════════╝
EOF
    echo "${NC}"

    if [ -f "$PID_FILE" ] && ps -p "$(cat "$PID_FILE")" > /dev/null; then
        echo "状态: ${GREEN}运行中${NC}"
    else
        echo "状态: ${RED}已停止${NC}"
    fi

    printf "${CYAN}➤ 请输入选项 [0-7]: ${NC}"
    read -r choice

    case $choice in
      1) install_nockchain ;;
      # ... 其他 case ...
      2) change_mining_address ;;
      0) echo "${GREEN}感谢使用，再见！${NC}"; exit 0 ;;
      *) echo "${RED}无效选项，请重新输入${NC}"; sleep 1 ;;
    esac
  done
}

main() {
  TMPFILE=$(create_tempfile)
  trap cleanup EXIT INT TERM
  init_environment
  show_menu
}

# 启动主程序
main "$@"
