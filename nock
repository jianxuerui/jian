#!/usr/bin/env sh
set -euo pipefail
IFS='
'

# 增强版 Nockchain 矿工工具 v4.0
# 全平台兼容优化版

# 颜色定义
RED='\033[1;31m'
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
CYAN='\033[1;36m'
BLUE='\033[1;34m'
NC='\033[0m'

# 全局配置
NOCK_DIR="${XDG_DATA_HOME:-$HOME/.local/share}/nockchain"
CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/nockchain"
CACHE_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/nockchain"
LOG_FILE="$CACHE_DIR/miner.log"

# 初始化环境
init_environment() {
  mkdir -p "$NOCK_DIR" "$CONFIG_DIR" "$CACHE_DIR"
  [ -f "$CONFIG_DIR/miner.conf" ] || cat > "$CONFIG_DIR/miner.conf" <<EOF
MINING_ADDRESS="0x0000000000000000000000000000000000000000"
RPC_URL="http://127.0.0.1:8545"
MINING_THREADS=$(nproc)
OPT_MODE="auto"
EOF
  . "$CONFIG_DIR/miner.conf"
}

# 跨平台检测
detect_platform() {
  OS_NAME=$(uname -s | tr '[:upper:]' '[:lower:]')
  case "$OS_NAME" in
    linux*)  
      [ -f /etc/os-release ] && . /etc/os-release
      PKG_MANAGER=""
      [ -x "$(command -v apt)" ] && PKG_MANAGER="apt"
      [ -x "$(command -v dnf)" ] && PKG_MANAGER="dnf"
      [ -x "$(command -v pacman)" ] && PKG_MANAGER="pacman"
      ;;
    darwin)  PKG_MANAGER="brew" ;;
    freebsd) PKG_MANAGER="pkg" ;;
    *)       PKG_MANAGER="unknown" ;;
  esac
}

# 安全临时文件
create_tempfile() {
  if command -v mktemp >/dev/null; then
    mktemp 2>/dev/null || echo "$CACHE_DIR/tmp.$$"
  else
    printf "%s/tmp.%s" "$CACHE_DIR" $(date +%s%N)
  fi
}

# 依赖管理
install_deps() {
  case "$PKG_MANAGER" in
    apt)
      sudo apt update
      sudo apt install -y build-essential cmake clang llvm git curl
      ;;
    dnf|yum)
      sudo $PKG_MANAGER install -y gcc-c++ make cmake clang llvm-toolset
      ;;
    pacman)
      sudo pacman -S --noconfirm base-devel cmake clang llvm
      ;;
    brew)
      brew update
      brew install cmake llvm
      ;;
    pkg)
      sudo pkg install -y gmake cmake clang llvm git
      ;;
    *)
      echo "${RED}不支持的包管理器: $PKG_MANAGER${NC}" >&2
      exit 1
      ;;
  esac
}

# 安全克隆仓库
safe_clone_repo() {
  REPO_PATH="$HOME/nockchain"
  if [ ! -d "$REPO_PATH" ]; then
    echo "${CYAN}▶ 正在克隆主仓库...${NC}"
    if ! git clone https://github.com/nockchain/nockchain.git "$REPO_PATH"; then
      echo "${YELLOW}HTTPS克隆失败，尝试SSH方式...${NC}"
      git clone git@github.com:nockchain/nockchain.git "$REPO_PATH" || {
        echo "${RED}克隆失败，请检查网络和权限${NC}" >&2
        exit 1
      }
    fi
  else
    echo "${CYAN}▶ 更新仓库代码...${NC}"
    git -C "$REPO_PATH" pull || {
      echo "${YELLOW}更新失败，尝试强制更新...${NC}"
      git -C "$REPO_PATH" fetch --all
      git -C "$REPO_PATH" reset --hard origin/main
    }
  fi
}

# 编译优化
optimized_build() {
  cd "$HOME/nockchain"
  make clean
  case "$OPT_MODE" in
    pgo)   make pgo ;;
    lto)   make lto ;;
    bolt)  make bolt ;;
    *)     make release ;;
  esac
}

# 主安装流程
install_nockchain() {
  detect_platform
  install_deps
  safe_clone_repo
  optimized_build
  
  echo "${GREEN}▶ 安装优化版本...${NC}"
  install -m755 "$HOME/nockchain/build/nockchain" "${HOME}/.local/bin/"
}

# 清理临时文件
cleanup() {
  rm -rf "${TMPFILE:-/tmp/nockchain*}"
  trap - EXIT INT TERM
}

# 主菜单
show_menu() {
  while true; do
    clear
    echo "${BLUE}"
    echo "╔════════════════════════════════════════════════╗"
    echo "║             Nockchain 矿工专业版               ║"
    echo "╠════════════════════════════════════════════════╣"
    echo "║ 1) 完整安装/更新     2) 配置矿工参数           ║"
    echo "║ 3) 启动矿机         4) 实时监控               ║"
    echo "║ 5) 高级编译设置     6) 系统服务管理           ║"
    echo "║ 7) 性能调优         0) 退出                   ║"
    echo "╚════════════════════════════════════════════════╝"
    echo "${NC}"
    
    printf "${CYAN}➤ 请输入选项 [0-7]: ${NC}"
    read -r choice
    
    case $choice in
      1) install_nockchain ;;
      2) configure_miner ;;
      3) start_miner ;;
      4) show_monitor ;;
      5) show_compile_menu ;;
      6) manage_service ;;
      7) tune_performance ;;
      0) exit 0 ;;
      *) echo "${RED}无效选项，请重新输入${NC}"; sleep 1 ;;
    esac
  done
}

# 初始化执行
main() {
  TMPFILE=$(create_tempfile)
  trap cleanup EXIT INT TERM
  init_environment
  show_menu
}

main "$@"
