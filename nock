#!/bin/bash

# ========= 色彩定义 =========
RESET='\033[0m'
BOLD='\033[1m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'

# ========= 项目路径 =========
NCK_DIR="$HOME/nockchain"
ENV_FILE="$NCK_DIR/.env"

# ========= 横幅 =========
function show_banner() {
  clear
  echo -e "${BOLD}${BLUE}"
  echo "==============================================="
  echo "         Nockchain 安装助手 / Setup Tool"
  echo "==============================================="
  echo -e "${RESET}"
  echo "📌 作者: K2 节点教程分享"
  echo "🔗 Telegram: https://t.me/+EaCiFDOghoM3Yzll"
  echo "🐦 Twitter:  https://x.com/BtcK241918"
  echo "-----------------------------------------------"
  echo ""
  echo "✨ 优化挖矿: 配置线程利用, 推荐使用 Systemd 实现自动启动/重启 ✨"
  echo ""
}

# ========= 常用函数 =========

# 切换到项目目录
function cd_nck_dir() {
  if [ -d "$NCK_DIR" ]; then
    cd "$NCK_DIR" || { echo -e "${RED}[-] 错误: 无法进入项目目录: $NCK_DIR${RESET}"; exit 1; }
  else
    echo -e "${RED}[-] 项目目录不存在: $NCK_DIR${RESET}"
    exit 1
  fi
}

# 检查并确认 MINING_PUBKEY 是否已设置
function check_pubkey() {
  echo -e "[*] 检查 MINING_PUBKEY 配置..."
  if [ ! -f "$ENV_FILE" ]; then
    echo -e "${RED}[-] 错误：.env 文件不存在: $ENV_FILE。请使用选项 1 安装或选项 3 设置。${RESET}"
    return 1 # Indicate failure
  fi

  # Source the file safely to get the value
  local temp_pubkey=""
  # Avoid sourcing the whole file directly to prevent potential issues with untrusted content
  # Read line by line or use grep
  while IFS= read -r line; do
      if [[ "$line" =~ ^MINING_PUBKEY= ]]; then
          temp_pubkey="${line#*=}" # Get value after '='
          break
      fi
  done < "$ENV_FILE"

  if [ -z "$temp_pubkey" ]; then
     echo -e "${RED}[-] 错误：.env 文件中 MINING_PUBKEY 为空。请使用选项 3 设置。${RESET}"
     return 1 # Indicate failure
  fi
  echo -e "${GREEN}[+] MINING_PUBKEY 已设置: ${temp_pubkey}${RESET}"
  return 0 # Indicate success
}

# 暂停并返回菜单
function pause_and_return() {
  echo ""
  read -n1 -r -p "按任意键返回主菜单..." key
  main_menu
}

# 检查互联网连接
function check_internet() {
  echo -e "[*] 检查互联网连接..."
  # 使用 ping 检查，设置超时和次数
  if ping -c 1 -W 3 8.8.8.8 &> /dev/null; then
    echo -e "${GREEN}[+] 互联网连接正常${RESET}"
    return 0
  else
    echo -e "${RED}[-] 错误: 无法连接到互联网。请检查您的网络设置。${RESET}"
    return 1
  fi
}

# 运行命令并进行重试
# Usage: run_with_retries <command> [retries] [delay_seconds]
function run_with_retries() {
  local cmd="$1"
  local retries=${2:-3} # Default 3 retries
  local delay=${3:-10} # Default 10 seconds delay
  local attempt=1

  echo -e "[*] 执行命令: ${BOLD}$cmd${RESET}"

  while [ "$attempt" -le $((retries + 1)) ]; do
    echo -e "[*] 尝试 $attempt/$((retries + 1))..."
    # Use 'eval' to execute the command string correctly, preserving quotes/arguments
    # Redirect stdout/stderr to see progress during retries
    if eval "$cmd"; then
      echo -e "${GREEN}[+] 命令成功: ${BOLD}$cmd${RESET}"
      return 0 # Success
    else
      local exit_code=$?
      if [ "$attempt" -le "$retries" ]; then
        echo -e "${YELLOW}[-] 尝试 $attempt/$((retries + 1)) 失败 (退出码: $exit_code)。等待 ${delay}s 后重试...${RESET}"
        sleep "$delay"
      else
        echo -e "${RED}[-] 错误: 命令在所有 $((retries + 1)) 次尝试后失败: ${BOLD}$cmd${RESET} (退出码: $exit_code)${RESET}"
        return 1 # Failure after all retries
      fi
    fi
    attempt=$((attempt + 1))
  done

  return 1 # Should not reach here, but as a fallback
}


# ========= 主功能函数 =========

# 1) 一键安装并构建
function setup_all() {
  show_banner # Refresh banner
  echo -e "${BLUE}[*] 开始一键安装并构建...${RESET}"

  # 检查网络
  if ! check_internet; then
    pause_and_return
    return
  fi

  echo -e "[*] 安装系统依赖..."
  # --- 修复: 将 update 和 install 命令用 && 连接，并添加重试 ---
  # Using run_with_retries for apt commands
  if ! run_with_retries "sudo apt update && sudo apt install -y clang llvm-dev libclang-dev pkg-config libssl-dev build-essential cmake curl git make screen"; then
    echo -e "${RED}[-] 系统依赖安装失败${RESET}"
    pause_and_return
    return
  fi
  # --- 修复结束 ---
  echo -e "${GREEN}[+] 系统依赖安装完成${RESET}"

  echo -e "[*] 安装 Rust..."
  if ! command -v cargo &>/dev/null; then
    # Using run_with_retries for curl | sh
    if ! run_with_retries "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y"; then
       echo -e "${RED}[-] Rust 安装失败${RESET}"
       pause_and_return
       return
    fi
    source "$HOME/.cargo/env"
    RC_FILE="$HOME/.bashrc"
    [[ "$SHELL" == *"zsh"* ]] && RC_FILE="$HOME/.zshrc"
    if ! grep -q 'export PATH="$HOME/.cargo/bin:$PATH"' "$RC_FILE"; then
      echo 'export PATH="$HOME/.cargo/bin:$PATH"' >> "$RC_FILE"
      echo -e "${GREEN}[+] Rust PATH 添加到 $RC_FILE${RESET}"
    fi
    # Ensure path is updated for the current session
    export PATH="$HOME/.cargo/bin:$PATH"
    echo -e "${GREEN}[+] Rust 安装完成${RESET}"
  else
      echo -e "${YELLOW}[*] Rust 已安装，跳过安装步骤。${RESET}"
      source "$HOME/.cargo/env" # Ensure path is sourced
  fi
  echo -e "${GREEN}[+] Rust 安装/配置完成${RESET}"


  echo -e "[*] 获取或更新仓库..."
  if [ -d "$NCK_DIR" ]; then
    echo -e "[*] 项目目录已存在，进行 git pull..."
    cd_nck_dir
    if ! run_with_retries "git pull"; then
        echo -e "${RED}[-] git pull 失败${RESET}"
        pause_and_return
        return
    fi
  else
    echo -e "[*] 克隆项目仓库..."
    # Using run_with_retries for git clone
    if ! run_with_retries "git clone https://github.com/zorp-corp/nockchain \"$NCK_DIR\""; then
        echo -e "${RED}[-] git clone 失败${RESET}"
        pause_and_return
        return
    fi
    cd_nck_dir
  fi
  echo -e "${GREEN}[+] 仓库获取完成${RESET}"

  echo -e "[*] 设置 .env 文件..."
  if [ ! -f "$ENV_FILE" ]; then
    cp .env_example "$ENV_FILE" || { echo -e "${RED}[-] 复制 .env_example 失败${RESET}"; pause_and_return; return; }
    echo -e "${GREEN}[+] .env 文件创建完成${RESET}"
  else
    echo -e "${YELLOW}[*] .env 文件已存在，跳过创建。${RESET}"
  fi

  # --- 使用 run_with_retries 包装所有 make 命令 ---
  echo -e "[*] 安装 hoonc..."
  if ! run_with_retries "make install-hoonc"; then
      echo -e "${RED}[-] install-hoonc 失败${RESET}"
      pause_and_return
      return
  fi
  echo -e "${GREEN}[+] hoonc 安装完成${RESET}"

  echo -e "[*] 编译 Nockchain..."
  if ! run_with_retries "make build"; then
      echo -e "${RED}[-] build 失败${RESET}"
      pause_and_return
      return
  fi
  echo -e "${GREEN}[+] Nockchain 编译完成${RESET}"

  echo -e "[*] 安装钱包..."
  if ! run_with_retries "make install-nockchain-wallet"; then
      echo -e "${RED}[-] install-nockchain-wallet 失败${RESET}"
      pause_and_return
      return
  fi
    # Optional: Verify wallet executable exists
    if [ ! -f "./target/release/nockchain-wallet" ]; then
        echo -e "${RED}[-] 警告: 钱包可执行文件未找到，即使 make install-nockchain-wallet 报告成功。${RESET}"
    fi
  echo -e "${GREEN}[+] 钱包安装完成${RESET}"

  echo -e "[*] 安装节点..."
  if ! run_with_retries "make install-nockchain"; then
      echo -e "${RED}[-] install-nockchain 失败${RESET}"
      pause_and_return
      return
  fi
    # Optional: Verify node executable exists
    if [ ! -f "./target/release/nockchain" ]; then
        echo -e "${RED}[-] 警告: 节点可执行文件未找到，即使 make install-nockchain 报告成功。${RESET}"
    fi
  echo -e "${GREEN}[+] 节点可执行文件安装完成${RESET}"
  # --- make 命令包装结束 ---

  echo -e "${GREEN}[+] 一键安装并构建完成${RESET}"
  echo -e "${YELLOW}[!] 接下来请务必执行以下步骤以进行挖矿优化和启动:"
  echo -e "${YELLOW}    1. 生成钱包 (选项 2)"
  echo -e "${YELLOW}    2. 将生成的公钥设置到 .env 文件 (选项 3)"
  echo -e "${YELLOW}    3. 配置挖矿启动脚本以优化线程利用 (选项 8) - 强烈推荐!"
  echo -e "${YELLOW}    4. 配置 Systemd 服务实现自动启动/重启 (选项 9) - 强烈推荐!"
  echo -e "${YELLOW}    5. 启动 Systemd 服务: ${BOLD}sudo systemctl start nockchain-miner${RESET}${YELLOW}"
  echo -e "${YELLOW}    (或使用选项 6/7 使用 Screen 方式，但 Systemd 更稳定持久)${RESET}"

  pause_and_return
}

# 2) 生成钱包
function generate_wallet() {
  show_banner # Refresh banner
  echo -e "${BLUE}[*] 生成钱包...${RESET}"
  cd_nck_dir

  if [ ! -f "./target/release/nockchain-wallet" ]; then
      echo -e "${RED}[-] 钱包可执行文件不存在。请先执行安装选项 1。${RESET}"
      pause_and_return
      return
  fi

  echo -e "${YELLOW}[!] 正在生成钱包密钥对...请记录下公钥！${RESET}"
  # Removed run_with_retries here as this command is usually not network dependent
  ./target/release/nockchain-wallet keygen || { echo -e "${RED}[-] 钱包生成失败${RESET}"; }

  echo -e "${YELLOW}[!] 钱包生成完成。请手动将上面输出的公钥复制，并使用选项 3 将其写入 .env 文件中的 MINING_PUBKEY=${RESET}"
  pause_and_return
}

# 3) 设置 MINING_PUBKEY 到 .env
function set_pubkey_env() {
  show_banner # Refresh banner
  echo -e "${BLUE}[*] 设置 MINING_PUBKEY 到 .env...${RESET}"
  cd_nck_dir

  if [ ! -f "$ENV_FILE" ]; then
      echo -e "${RED}[-] .env 文件不存在: $ENV_FILE。请先执行安装选项 1。${RESET}"
      pause_and_return
      return
  fi

  read -p "请输入您要挖矿的公钥 (MINING_PUBKEY): " pubkey
  if [ -z "$pubkey" ]; then
    echo -e "${RED}[-] 公钥不能为空。${RESET}"
    pause_and_return
    return
  fi

  # 使用 awk 安全地更新或添加 MINING_PUBKEY
  # 如果行存在，替换它；否则，添加到文件末尾
  awk -v pubkey="$pubkey" '
    /^MINING_PUBKEY=/ { $0="MINING_PUBKEY="pubkey; found=1 }
    { print }
    END { if (!found) print "MINING_PUBKEY="pubkey }
  ' "$ENV_FILE" > "$ENV_FILE.tmp" && mv "$ENV_FILE.tmp" "$ENV_FILE"

  echo -e "${GREEN}[+] 已将 MINING_PUBKEY=${pubkey} 写入 ${ENV_FILE}${RESET}"
  pause_and_return
}

# 4) 导出钱包密钥
function export_keys() {
  show_banner # Refresh banner
  echo -e "${BLUE}[*] 导出钱包密钥...${RESET}"
  cd_nck_dir

  if [ ! -f "./target/release/nockchain-wallet" ]; then
      echo -e "${RED}[-] 钱包可执行文件不存在。请先执行安装选项 1。${RESET}"
      pause_and_return
      return
  fi

  ./target/release/nockchain-wallet export-keys || { echo -e "${RED}[-] 密钥导出失败${RESET}"; }

  echo -e "${GREEN}[+] 密钥已导出到 keys.export${RESET}"
  echo -e "${YELLOW}[!] 请妥善保管 keys.export 文件！${RESET}"
  pause_and_return
}

# 5) 导入钱包密钥
function import_keys() {
  show_banner # Refresh banner
  echo -e "${BLUE}[*] 导入钱包密钥...${RESET}"
  cd_nck_dir

  if [ ! -f "./target/release/nockchain-wallet" ]; then
      echo -e "${RED}[-] 钱包可执行文件不存在。请先执行安装选项 1。${RESET}"
      pause_and_return
      return
  fi

  read -p "[?] 请输入密钥文件路径 (默认: ./keys.export): " keyfile
  keyfile=${keyfile:-"./keys.export"}

  if [ ! -f "$keyfile" ]; then
      echo -e "${RED}[-] 密钥文件不存在: $keyfile${RESET}"
      pause_and_return
      return
  fi

  ./target/release/nockchain-wallet import-keys --input "$keyfile" || { echo -e "${RED}[-] 密钥导入失败${RESET}"; }

  echo -e "${GREEN}[+] 密钥已导入${RESET}"
  pause_and_return
}

# 8) 配置挖矿启动脚本 (优化线程利用)
function configure_miner_script() {
  show_banner # Refresh banner
  echo -e "${BLUE}[*] 配置挖矿启动脚本以优化线程利用...${RESET}"
  cd_nck_dir

  MINER_SCRIPT="$NCK_DIR/scripts/run_nockchain_miner.sh"
  BACKUP_SCRIPT="$MINER_SCRIPT.bak_$(date +%Y%m%d%H%M%S)"

  if [ ! -f "$MINER_SCRIPT" ]; then
    echo -e "${RED}[-] 挖矿启动脚本不存在: $MINER_SCRIPT${RESET}"
    echo "请先执行安装选项 1。"
    pause_and_return
    return
  fi

  echo -e "[*] 备份原有脚本到 $BACKUP_SCRIPT"
  cp "$MINER_SCRIPT" "$BACKUP_SCRIPT" || { echo -e "${RED}[-] 备份脚本失败${RESET}"; pause_and_return; return; }

  # --- 创建新的脚本内容 ---
  # 假设 nockchain 可执行文件支持 --threads 参数。请根据实际情况验证或修改。
  NUM_CORES=$(nproc) # 获取CPU核心数
  # 也可以选择保留一个核心给系统，例如: NUM_CORES=$(( $(nproc) - 1 ))
  # 确保至少使用一个核心
  if [ "$NUM_CORES" -le 0 ]; then
      NUM_CORES=1
  fi

  echo -e "[*] 创建新的 $MINER_SCRIPT 内容，将使用 ${NUM_CORES} 个线程..."
  # 使用 heredoc 来方便地写入多行脚本内容
  # 使用单引号阻止heredoc内的变量被当前脚本展开
  cat << 'EOL' > "$MINER_SCRIPT"
#!/bin/bash
# This script was configured by the setup tool to use multiple CPU threads for mining.

# Define the NCK_DIR path explicitly as this script might be run by systemd
# and the user's HOME might not be the standard one.
# It's better to source the .env using its full path relative to NCK_DIR.
# Attempt to determine NCK_DIR based on the script's location
SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
NCK_DIR="$(dirname "$SCRIPT_DIR")"
ENV_FILE="$NCK_DIR/.env"

# Source .env file if it exists, needed for MINING_PUBKEY and other potential env vars
if [ -f "$ENV_FILE" ]; then
  source "$ENV_FILE"
fi

# Check if MINING_PUBKEY is set and not empty
if [ -z "$MINING_PUBKEY" ]; then
  echo "错误: MINING_PUBKEY 未在 $ENV_FILE 中设置或为空。"
  echo "请使用 setup 脚本的选项 3 设置公钥后再启动矿机。"
  exit 1
fi

# Get number of CPU cores - This value is hardcoded during script creation by the setup tool
# Setup tool calculated: NUM_CORES_VALUE
NUM_CORES=NUM_CORES_PLACEHOLDER # Placeholder for the number of cores calculated by the setup script

# Check if the miner executable exists
MINER_EXEC="$NCK_DIR/target/release/nockchain"
if [ ! -f "$MINER_EXEC" ]; then
    echo "错误: 矿机可执行文件不存在: $MINER_EXEC"
    echo "请先运行 setup 脚本的选项 1 进行安装和构建。"
    exit 1
fi

echo "启动 Nockchain Miner..."
echo "项目目录: $NCK_DIR"
echo "使用公钥: $MINING_PUBKEY"
echo "使用线程数: $NUM_CORES"
echo "挖矿日志将输出到标准输出/标准错误 (如果使用 Systemd 或 Screen 管理，请查看对应日志)."

# Execute the miner with optimized parameters
# IMPORTANT: Verify '$MINER_EXEC' supports --threads parameter!
# Use exec to replace the current shell process with the miner process
exec "$MINER_EXEC" \
    --chain nockchain_mainnet \
    --miner \
    --mining-pubkey "$MINING_PUBKEY" \
    --threads "$NUM_CORES" # <-- Pass the calculated threads argument

# Note: 'exec' replaces the current shell process. Commands after it are not run
# unless the executed program fails immediately.
EOL
          # --- 替换核心数占位符 ---
          # Now we use sed to replace the placeholder with the actual calculated value.
          sed -i "s/NUM_CORES_PLACEHOLDER/$NUM_CORES/" "$MINER_SCRIPT"

          # --- 结束创建新的脚本内容 ---

          chmod +x "$MINER_SCRIPT" || { echo -e "${RED}[-] 设置脚本执行权限失败${RESET}"; pause_and_return; return; }

          echo -e "${GREEN}[+] 挖矿启动脚本已配置完成 ($MINER_SCRIPT)。${RESET}"
          echo -e "${YELLOW}[!] 重要: 此配置假设 Nockchain 节点程序支持 '--threads' 参数。请验证！${RESET}"
          echo -e "${YELLOW}[!] 您现在可以使用选项 6 (Screen) 或选项 9 (Systemd) 启动矿机。${RESET}"
          pause_and_return
        }


# 9) 配置 Systemd 服务
function setup_systemd_miner() {
  show_banner # Refresh banner
  echo -e "${BLUE}[*] 配置 Systemd 服务 (推荐用于自动启动和重启)...${RESET}"
  cd_nck_dir # 确保在项目目录

  # 检查 root 权限
  if [ "$EUID" -ne 0 ]; then
    echo -e "${RED}[-] 错误: 配置 Systemd 服务需要 root 权限。请使用 ${BOLD}sudo $0${RESET}${RED} 运行此脚本或切换到 root 用户再执行此选项。${RESET}"
    pause_and_return
    return
  fi

  echo -e "${YELLOW}[!] 建议您在配置 Systemd 服务前，先使用选项 8 配置挖矿启动脚本以优化线程利用。${RESET}"
  echo -e "${YELLOW}[!] 并且确保已使用选项 3 设置了 MINING_PUBKEY。${RESET}"
  read -p "是否继续配置 Systemd 服务? (y/n): " confirm_systemd
  if [[ ! "$confirm_systemd" =~ ^[Yy]$ ]]; then
     echo -e "${RED}[-] 已取消 Systemd 配置。${RESET}"
     pause_and_return
     return
  fi

  SERVICE_FILE="/etc/systemd/system/nockchain-miner.service"
  USERNAME=$(whoami -u) # 获取执行脚本的用户的实际用户名

  # --- 创建 Systemd 服务文件内容 ---
  echo -e "[*] 创建 Systemd 服务文件: $SERVICE_FILE"
  # 使用 heredoc 写入服务文件内容
  cat <<EOL > "$SERVICE_FILE"
[Unit]
Description=Nockchain Miner Node
After=network.target

[Service]
User=$USERNAME # 以当前用户身份运行
WorkingDirectory=$NCK_DIR # 工作目录为项目根目录
EnvironmentFile=$ENV_FILE # 从 .env 文件加载环境变量 (例如 MINING_PUBKEY)
ExecStart=$NCK_DIR/scripts/run_nockchain_miner.sh # 执行配置好的挖矿启动脚本
Restart=always # 关键: 程序退出时自动重启
RestartSec=10 # 10秒后尝试重启

# 推荐的文件描述符和进程数限制，避免资源耗尽
LimitNOFILE=65536
LimitNPROC=65536

# 将日志输出到 journald
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target
EOL
  # --- 结束服务文件内容 ---

  echo -e "[*] 重载 Systemd 管理器配置..."
  if ! systemctl daemon-reload; then
      echo -e "${RED}[-] 重载 Systemd 失败${RESET}"
      pause_and_return
      return
  fi

  echo -e "[*] 启用 nockchain-miner 服务 (设置开机自启)..."
  if ! systemctl enable nockchain-miner.service; then
      echo -e "${RED}[-] 启用 Systemd 服务失败${RESET}"
      pause_and_return
      return
  fi

  echo -e "${GREEN}[+] Systemd 服务已配置 ($SERVICE_FILE) 并设为开机自启。${RESET}"
  echo -e "${YELLOW}[!] 您可以使用以下命令管理服务:${RESET}"
  echo -e "${YELLOW}    启动矿机: ${BOLD}sudo systemctl start nockchain-miner${RESET}"
  echo -e "${YELLOW}    检查状态: ${BOLD}sudo systemctl status nockchain-miner${RESET}"
  echo -e "${YELLOW}    查看日志: ${BOLD}sudo journalctl -u nockchain-miner -f${RESET}"
  echo -e "${YELLOW}    停止矿机: ${BOLD}sudo systemctl stop nockchain-miner${RESET}"
  echo -e "${YELLOW}    禁用开机自启: ${BOLD}sudo systemctl disable nockchain-miner${RESET}"

  pause_and_return
}


# 6) 启动节点 (Screen 后台)
function start_node_screen() {
  show_banner # Refresh banner
  echo -e "${BLUE}[*] 启动节点 (screen 后台运行)...${RESET}"
  cd_nck_dir

  # 检查 MINING_PUBKEY 是否已设置
  if ! check_pubkey; then
    pause_and_return
    return # 如果检查失败则退出函数
  fi

  # 确保启动脚本存在并有执行权限
  local MINER_SCRIPT="$NCK_DIR/scripts/run_nockchain_miner.sh"
  if [ ! -f "$MINER_SCRIPT" ]; then
      echo -e "${RED}[-] 错误: 挖矿启动脚本不存在: $MINER_SCRIPT${RESET}"
      echo "请先执行安装选项 1。"
      pause_and_return
      return
  fi
  # Ensure script is executable. Add a retry just in case of filesystem glitch, though rare.
  if ! run_with_retries "chmod +x \"$MINER_SCRIPT\"" 2 5; then
      echo -e "${RED}[-] 设置脚本执行权限失败${RESET}"
      pause_and_return
      return
  fi


  # 检查旧的 screen 会话并关闭
  if screen -list | grep -qw "nockchain"; then
    echo "[*] 检测到旧的 'nockchain' screen 会话，正在关闭..."
    # Add a timeout to the screen quit command
    timeout 10s screen -S nockchain -X quit
    # Check if it still exists after timeout
    if screen -list | grep -qw "nockchain"; then
         echo -e "${YELLOW}[-] 旧的 screen 会话可能未完全关闭，尝试强制杀掉...${RESET}"
         screen -wipe # Clean up dead sessions
         # Find the process and kill it if screen -wipe didn't work
         pkill -f "SCREEN -S nockchain"
         sleep 2
         if screen -list | grep -qw "nockchain"; then
             echo -e "${RED}[-] 错误: 无法终止旧的 screen 会话。请手动执行 'screen -S nockchain -X quit' 或 'pkill -f \"SCREEN -S nockchain\"' 并重试。${RESET}"
             pause_and_return
             return
         fi
    fi
    sleep 2 # Wait for old session to terminate fully
  fi

  echo -e "[*] 正在启动新的 'nockchain' screen 会话..."
  # Use screen -dmS in the background to create a session and execute the command
  # The bash -c command will:
  # 1. cd into NCK_DIR
  # 2. Source the .env file
  # 3. Execute the miner script using 'exec'. 'exec' replaces the bash process
  #    with the miner process, which is good for signal handling (like Ctrl+C if you attach)
  #    and resource usage.
  # Use a retry for the screen command itself, although screen is generally robust.
  # The important script execution is handled within screen.
  if ! run_with_retries "screen -dmS nockchain bash -c \"cd '$NCK_DIR' && source '$ENV_FILE' && exec '$MINER_SCRIPT'\"" 2 5; then
      echo -e "${RED}[-] 启动 screen 会话失败。${RESET}"
      echo "请检查 $MINER_SCRIPT 脚本内容或权限。"
      pause_and_return
      return
  fi


  sleep 3 # Wait briefly for the session to start
  if screen -list | grep -qw "nockchain"; then
    echo -e "${GREEN}[+] 节点已成功启动在 'nockchain' screen 会话中。${RESET}"
    echo -e "${YELLOW}[!] 您可以使用选项 7 查看日志 (按 Ctrl+A+D 分离).${RESET}"
    echo -e "${YELLOW}[!] 注意: Screen 方式不如 Systemd (选项 9) 稳定和持久，不具备自动重启功能。${RESET}"
  else
    echo -e "${RED}[-] 节点启动失败。未找到名为 'nockchain' 的 screen 会话。${RESET}"
    echo "请尝试使用选项 7 查看日志（如果 screen 会话短暂启动后退出）。"
    echo "检查 $MINER_SCRIPT 脚本内容、权限或依赖是否正确。"
  fi
  pause_and_return
}

# 7) 查看 Screen 节点日志
function view_logs_screen() {
  show_banner # Refresh banner
  echo -e "${BLUE}[*] 查看 Screen 节点日志...${RESET}"
  if screen -list | grep -qw "nockchain"; then
    echo -e "${YELLOW}[!] 连接到 'nockchain' screen 会话。按 Ctrl+A+D 组合键可分离会话返回脚本菜单，不会停止矿机。${RESET}"
    echo -e "${YELLOW}[!] 按 Ctrl+C 可能会停止矿机！请谨慎操作。${RESET}"
    # screen -r attempts to resume a session. -d -r can detach from elsewhere and resume here.
    # Add a check if the session is actually attached elsewhere
    if screen -list | grep -q "nockchain[[:space:]]"; then # Check for 'nockchain' followed by space (indicating attached)
        echo -e "${YELLOW}[*] 'nockchain' screen 会话当前已连接。尝试重新连接...${RESET}"
        screen -x nockchain # Connect to already attached session
    else
        screen -r nockchain # Resume detached session
    fi
    # User will return here after detaching from screen session (Ctrl+A+D)
    echo -e "${GREEN}[+] 已从 screen 会话分离。${RESET}"
  else
    echo -e "${RED}[-] 未找到名为 'nockchain' 的 screen 会话。请确认节点已使用选项 6 启动。${RESET}"
  fi
  pause_and_return
}


# ========= 主菜单 =========
function main_menu() {
  show_banner
  echo "请选择操作:"
  echo "  1) 一键安装并构建 (系统依赖, Rust, 代码, bin) - 推荐首先执行"
  echo "-----------------------------------------------"
  echo "  2) 生成钱包 (查看输出日志)"
  echo "  3) 设置 MINING_PUBKEY 到 .env (手动输入) - 必须设置!"
  echo "  4) 导出钱包密钥"
  echo "  5) 导入钱包密钥"
  echo "-----------------------------------------------"
  echo "  8) 配置挖矿启动脚本 (优化线程利用, 推荐!)"
  echo "  9) 配置 Systemd 服务 (推荐! 实现自动启动/重启)"
  echo "-----------------------------------------------"
  echo "  6) 启动节点 (Screen 后台运行, 基本方式)"
  echo "  7) 查看 Screen 节点日志"
  echo "-----------------------------------------------"
  echo "  0) 退出"
  echo ""
  read -p "请输入编号: " choice

  case "$choice" in
    1) setup_all ;;
    2) generate_wallet ;;
    3) set_pubkey_env ;;
    4) export_keys ;;
    5) import_keys ;;
    6) start_node_screen ;; # Screen 方式
    7) view_logs_screen ;;  # Screen 日志
    8) configure_miner_script ;; # 配置启动脚本
    9) setup_systemd_miner ;; # Systemd 方式
    0) echo -e "${GREEN}退出脚本.${RESET}"; exit 0 ;;
    *) echo -e "${RED}[-] 无效选项${RESET}"; pause_and_return ;;
  esac
}

# ========= 脚本入口 =========
# 在启动主菜单前刷新一次横幅
show_banner

# 运行主菜单
main_menu
