#!/bin/bash

# ========= 色彩定义 =========
RESET='\033[0m'
BOLD='\033[1m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'

# ========= 项目路径 =========
NCK_DIR="$HOME/nockchain"
ENV_FILE="$NCK_DIR/.env"

# ========= 环境变量设置 =========
export RUST_BACKTRACE=full
export CARGO_NET_RETRY=10
export CARGO_NET_TIMEOUT=300

# ========= 横幅 =========
function show_banner() {
  clear
  echo -e "${BOLD}${BLUE}"
  echo "==============================================="
  echo "    Nockchain Binary存在冲突修复版 v6.0"
  echo "==============================================="
  echo -e "${RESET}"
  echo "📌 作者: K2 节点教程分享"
  echo "🔗 Telegram: https://t.me/+EaCiFDOghoM3Yzll"
  echo "🐦 Twitter:  https://x.com/BtcK241918"
  echo "⚡ 修复: binary already exists + --force处理"
  echo "-----------------------------------------------"
  echo ""
}

# ========= 系统检查 =========
function check_system_requirements() {
  echo -e "[*] 系统要求检查..."
  
  # 检查内存
  total_mem_kb=$(grep MemTotal /proc/meminfo 2>/dev/null | awk '{print $2}' || echo "0")
  total_mem_gb=$((total_mem_kb / 1024 / 1024))
  
  echo -e "${BLUE}[i] 系统内存: ${total_mem_gb}GB${RESET}"
  
  if [ $total_mem_gb -lt 4 ]; then
    echo -e "${RED}[-] 内存不足警告${RESET}"
    read -p "继续? (y/N): " continue_choice
    if [[ ! "$continue_choice" =~ ^[Yy]$ ]]; then
      exit 1
    fi
  else
    echo -e "${GREEN}[+] 内存检查通过${RESET}"
  fi
  
  # 检查磁盘空间
  free_space=$(df -BG "$HOME" | tail -1 | awk '{print $4}' | sed 's/G//')
  if [ "$free_space" -lt 15 ]; then
    echo -e "${YELLOW}[!] 磁盘空间: ${free_space}GB (建议15GB+)${RESET}"
  else
    echo -e "${GREEN}[+] 磁盘空间: ${free_space}GB${RESET}"
  fi
  
  # 检查操作系统
  if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    OS="linux"
    if grep -q "Ubuntu" /etc/os-release 2>/dev/null; then
      ubuntu_version=$(grep VERSION_ID /etc/os-release | cut -d'"' -f2)
      echo -e "${GREEN}[+] Ubuntu ${ubuntu_version}${RESET}"
    fi
  else
    OS="unknown"
    echo -e "${YELLOW}[!] 非Linux系统${RESET}"
  fi
}

# ========= 安装依赖 =========
function install_dependencies() {
  echo -e "[*] 安装完整依赖包..."
  
  # 更新包管理器
  sudo apt-get update && sudo apt-get upgrade -y
  
  # 根据搜索结果[4]Bruce的经验，确保build-essential
  echo -e "[*] 安装构建工具..."
  sudo apt install -y \
    build-essential \
    gcc g++ \
    libc6-dev \
    cmake make \
    curl git wget \
    pkg-config \
    libssl-dev \
    clang llvm-dev libclang-dev \
    screen htop unzip \
    jq
  
  echo -e "${GREEN}[+] 依赖安装完成${RESET}"
}

# ========= 内存优化 =========
function setup_memory_optimization() {
  echo -e "[*] 内存优化..."
  
  # 如果内存不足，增加swap
  if [ $total_mem_gb -lt 8 ]; then
    echo -e "${YELLOW}[*] 配置swap空间...${RESET}"
    
    current_swap=$(free -g | grep Swap | awk '{print $2}')
    if [ "$current_swap" -lt 4 ]; then
      echo -e "[*] 创建4GB swap..."
      sudo fallocate -l 4G /swapfile-nock 2>/dev/null || \
      sudo dd if=/dev/zero of=/swapfile-nock bs=1M count=4096 2>/dev/null
      
      sudo chmod 600 /swapfile-nock
      sudo mkswap /swapfile-nock >/dev/null 2>&1
      sudo swapon /swapfile-nock >/dev/null 2>&1
      
      echo -e "${GREEN}[+] Swap已配置${RESET}"
    fi
  fi
  
  echo -e "${GREEN}[+] 内存优化完成${RESET}"
}

# ========= 修复Rust环境和cargo配置 =========
function setup_rust_fixed() {
  echo -e "[*] 设置Rust环境（修复版）..."
  
  # 清理旧环境
  pkill -f cargo 2>/dev/null || true
  sleep 2
  
  if [ -d "$HOME/.cargo" ]; then
    echo -e "${YELLOW}[*] 清理旧Rust环境...${RESET}"
    rm -rf "$HOME/.cargo"
  fi
  if [ -d "$HOME/.rustup" ]; then
    rm -rf "$HOME/.rustup"
  fi
  
  # 根据搜索结果[4]的方法安装Rust
  echo -e "[*] 安装Rust..."
  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
  
  # 立即加载环境
  source "$HOME/.cargo/env"
  export PATH="$HOME/.cargo/bin:$PATH"
  
  # 修复cargo配置 - 根据错误信息移除无效的timeout配置
  mkdir -p "$HOME/.cargo"
  cat > "$HOME/.cargo/config.toml" << 'EOF'
[build]
jobs = 1

[net]
retry = 15

[env]
CC = "gcc"
CXX = "g++"

[profile.release]
lto = false
codegen-units = 1
debug = false

[profile.dev]
debug = false
EOF

  # 设置环境变量
  export CC=gcc
  export CXX=g++
  export CARGO_BUILD_JOBS=1
  
  # 配置shell环境
  for rc_file in "$HOME/.bashrc" "$HOME/.zshrc" "$HOME/.profile"; do
    if [ -f "$rc_file" ]; then
      # 清理旧配置
      sed -i '/cargo/d' "$rc_file" 2>/dev/null || true
      sed -i '/rustup/d' "$rc_file" 2>/dev/null || true
      
      # 添加配置
      echo 'source $HOME/.cargo/env' >> "$rc_file"
      echo 'export PATH="$HOME/.cargo/bin:$PATH"' >> "$rc_file"
      echo 'export CC=gcc' >> "$rc_file"
      echo 'export CXX=g++' >> "$rc_file"
    fi
  done
  
  # 验证安装
  if command -v cargo >/dev/null 2>&1; then
    echo -e "${GREEN}[+] Rust环境设置成功${RESET}"
    echo -e "${GREEN}[+] Rust: $(rustc --version)${RESET}"
    echo -e "${GREEN}[+] Cargo: $(cargo --version)${RESET}"
    return 0
  else
    echo -e "${RED}[-] Rust环境设置失败${RESET}"
    return 1
  fi
}

# ========= 清理并克隆仓库 =========
function clean_and_clone() {
  echo -e "[*] 清理并克隆仓库..."
  
  cd "$HOME" || exit 1
  
  # 停止所有相关进程
  screen -XS nockchain quit 2>/dev/null || true
  pkill -f nockchain 2>/dev/null || true
  
  # 清理旧数据
  echo -e "[*] 清理旧数据..."
  rm -rf nockchain .nockapp 2>/dev/null || true
  
  # 克隆仓库
  echo -e "[*] 克隆仓库..."
  if git clone https://github.com/zorp-corp/nockchain; then
    echo -e "${GREEN}[+] 仓库克隆成功${RESET}"
    cd nockchain || return 1
    return 0
  else
    echo -e "${RED}[-] 仓库克隆失败${RESET}"
    return 1
  fi
}

# ========= 修复Makefile的--force问题 =========
function fix_makefile() {
  echo -e "[*] 修复Makefile..."
  
  cd "$NCK_DIR" || return 1
  
  # 备份原始Makefile
  if [ ! -f "Makefile.backup" ]; then
    cp Makefile Makefile.backup
  fi
  
  # 根据搜索结果[1][3][5]，添加--force参数解决"binary already exists"问题
  echo -e "[*] 修复cargo install命令..."
  
  # 修复所有cargo install命令，添加--force参数
  sed -i 's/cargo install --locked --path/cargo install --locked --force --path/g' Makefile
  sed -i 's/cargo install --path/cargo install --force --path/g' Makefile
  
  # 确保没有重复的--force
  sed -i 's/--force --force/--force/g' Makefile
  
  echo -e "${GREEN}[+] Makefile修复完成${RESET}"
  
  # 显示修改内容
  echo -e "${BLUE}[i] 修复的命令:${RESET}"
  grep "cargo install" Makefile | head -3
}

# ========= 修复binary存在问题的构建方法 =========
function build_fix_binary_exists() {
  echo -e "[*] 使用--force修复构建..."
  
  cd "$NCK_DIR" || return 1
  
  # 确保环境变量
  source "$HOME/.cargo/env"
  export PATH="$HOME/.cargo/bin:$PATH"
  export CC=gcc
  export CXX=g++
  export CARGO_BUILD_JOBS=1
  
  # 设置.env文件
  echo -e "[*] 设置.env文件..."
  if [ -f ".env_example" ]; then
    cp .env_example .env
    echo -e "${GREEN}[+] .env文件创建成功${RESET}"
  else
    cat > .env << 'EOF'
MINING_PUBKEY=
RUST_LOG=info
EOF
    echo -e "${GREEN}[+] 基本.env文件创建成功${RESET}"
  fi
  
  # 修复Makefile
  fix_makefile
  
  # 清理构建缓存
  echo -e "[*] 清理构建缓存..."
  cargo clean >/dev/null 2>&1 || true
  rm -rf target/ 2>/dev/null || true
  
  # 手动清理可能存在的二进制文件
  echo -e "[*] 清理现有二进制文件..."
  rm -f "$HOME/.cargo/bin/hoonc" 2>/dev/null || true
  rm -f "$HOME/.cargo/bin/nockchain-wallet" 2>/dev/null || true
  rm -f "$HOME/.cargo/bin/nockchain" 2>/dev/null || true
  
  # 构建hoonc - 根据搜索结果[3][5]使用--force
  echo -e "[*] 构建hoonc（使用--force）..."
  
  # 方法1: 直接使用--force参数
  echo -e "[*] 方法1: 直接cargo install --force..."
  if timeout 1200 cargo install --locked --force --path crates/hoonc --bin hoonc; then
    echo -e "${GREEN}[+] hoonc构建成功 (方法1)${RESET}"
  else
    echo -e "${YELLOW}[!] 方法1失败，尝试方法2...${RESET}"
    
    # 方法2: 使用make（已修复的Makefile）
    echo -e "[*] 方法2: 使用修复的make..."
    if timeout 1200 make install-hoonc; then
      echo -e "${GREEN}[+] hoonc构建成功 (方法2)${RESET}"
    else
      echo -e "${YELLOW}[!] 方法2失败，手动构建...${RESET}"
      
      # 方法3: 手动构建
      cd crates/hoonc
      if timeout 1200 cargo build --release; then
        mkdir -p "$HOME/.cargo/bin"
        if [ -f "target/release/hoonc" ]; then
          cp target/release/hoonc "$HOME/.cargo/bin/"
          echo -e "${GREEN}[+] hoonc手动构建成功${RESET}"
        fi
      fi
      cd "$NCK_DIR"
    fi
  fi
  
  # 确保PATH包含cargo bin
  export PATH="$HOME/.cargo/bin:$PATH"
  
  # 构建主项目
  echo -e "[*] 构建主项目..."
  
  # 尝试make build
  if timeout 2400 make build; then
    echo -e "${GREEN}[+] make build成功${RESET}"
  else
    echo -e "${YELLOW}[!] make build失败，尝试cargo build...${RESET}"
    if timeout 2400 cargo build --release; then
      echo -e "${GREEN}[+] cargo build成功${RESET}"
    fi
  fi
  
  # 安装组件（使用修复的Makefile）
  echo -e "[*] 安装钱包组件..."
  export PATH="$HOME/.cargo/bin:$PATH"
  if timeout 600 make install-nockchain-wallet; then
    echo -e "${GREEN}[+] 钱包安装成功${RESET}"
  else
    # 手动安装钱包
    echo -e "[*] 手动安装钱包..."
    cargo install --locked --force --path . --bin nockchain-wallet >/dev/null 2>&1 || true
  fi
  
  echo -e "[*] 安装节点组件..."
  export PATH="$HOME/.cargo/bin:$PATH"
  if timeout 600 make install-nockchain; then
    echo -e "${GREEN}[+] 节点安装成功${RESET}"
  else
    # 手动安装节点
    echo -e "[*] 手动安装节点..."
    cargo install --locked --force --path . --bin nockchain >/dev/null 2>&1 || true
  fi
  
  # 检查构建结果
  echo -e "[*] 检查构建结果..."
  binary_count=0
  
  for binary in "hoonc" "nockchain-wallet" "nockchain"; do
    if command -v "$binary" >/dev/null 2>&1; then
      echo -e "${GREEN}  ✓ $binary (PATH中可用)${RESET}"
      ((binary_count++))
    elif [ -f "target/release/$binary" ]; then
      echo -e "${GREEN}  ✓ target/release/$binary${RESET}"
      ((binary_count++))
    elif [ -f "target/debug/$binary" ]; then
      echo -e "${GREEN}  ✓ target/debug/$binary${RESET}"
      ((binary_count++))
    fi
  done
  
  if [ $binary_count -gt 0 ]; then
    echo -e "${GREEN}[+] 构建成功！发现 $binary_count 个可执行文件${RESET}"
    return 0
  else
    echo -e "${YELLOW}[!] 未发现可执行文件，但构建可能部分成功${RESET}"
    return 1
  fi
}

# ========= 主安装流程 =========
function setup_all() {
  echo -e "[*] 开始binary存在冲突修复安装..."
  
  check_system_requirements
  install_dependencies
  setup_memory_optimization
  
  if ! setup_rust_fixed; then
    echo -e "${RED}[-] Rust环境设置失败${RESET}"
    pause_and_return
    return
  fi
  
  if ! clean_and_clone; then
    echo -e "${RED}[-] 仓库准备失败${RESET}"
    pause_and_return
    return
  fi
  
  if build_fix_binary_exists; then
    echo -e "${GREEN}[+] ✅ Nockchain安装成功！${RESET}"
    echo -e "${BLUE}[i] 已修复binary already exists问题${RESET}"
    echo -e "${BLUE}[i] 使用--force参数解决cargo install冲突${RESET}"
  else
    echo -e "${YELLOW}[!] 安装可能有部分问题${RESET}"
    echo -e "${BLUE}[i] 通常可以继续使用${RESET}"
  fi
  
  pause_and_return
}

# ========= 钱包操作 =========
function generate_wallet() {
  echo -e "[*] 生成钱包..."
  cd "$NCK_DIR" || return 1
  
  # 确保环境变量
  source "$HOME/.cargo/env" 2>/dev/null || true
  export PATH="$HOME/.cargo/bin:$PATH"
  
  # 查找钱包程序
  wallet_bin=""
  if command -v nockchain-wallet >/dev/null 2>&1; then
    wallet_bin="nockchain-wallet"
  elif [ -f "target/release/nockchain-wallet" ]; then
    wallet_bin="./target/release/nockchain-wallet"
  elif [ -f "target/debug/nockchain-wallet" ]; then
    wallet_bin="./target/debug/nockchain-wallet"
  fi
  
  if [ -z "$wallet_bin" ]; then
    echo -e "${RED}[-] 未找到nockchain-wallet程序${RESET}"
    echo -e "${YELLOW}[!] 请先完成构建${RESET}"
    pause_and_return
    return
  fi
  
  echo -e "${GREEN}[+] 使用钱包: $wallet_bin${RESET}"
  
  # 生成钱包
  if ! "$wallet_bin" keygen; then
    echo -e "${YELLOW}[!] 钱包生成可能有问题${RESET}"
  fi
  
  echo -e "${YELLOW}[!] 请复制上方的公钥${RESET}"
  echo -e "${BLUE}[i] 公钥格式：128位16进制${RESET}"
  pause_and_return
}

function validate_pubkey() {
  local pubkey="$1"
  
  if [ ${#pubkey} -ne 128 ]; then
    echo -e "${RED}[-] 公钥长度错误！应为128位，当前为${#pubkey}位${RESET}"
    return 1
  fi
  
  if [[ ! "$pubkey" =~ ^[0-9a-fA-F]{128}$ ]]; then
    echo -e "${RED}[-] 公钥格式错误！只能包含0-9和a-f字符${RESET}"
    return 1
  fi
  
  return 0
}

function set_pubkey_env() {
  echo -e "[*] 设置挖矿公钥..."
  cd "$NCK_DIR" || return 1

  echo -e "${BLUE}[i] 公钥格式：128位16进制字符串${RESET}"
  echo ""
  
  while true; do
    read -p "请输入公钥: " pubkey
    
    if [ -z "$pubkey" ]; then
      echo -e "${RED}[-] 公钥不能为空${RESET}"
      continue
    fi
    
    pubkey=$(echo "$pubkey" | tr -d ' \n\r\t')
    
    if validate_pubkey "$pubkey"; then
      pubkey=$(echo "$pubkey" | tr '[:upper:]' '[:lower:]')
      
      # 更新.env文件
      if command -v sed >/dev/null 2>&1; then
        sed -i '/^MINING_PUBKEY=/d' "$ENV_FILE" 2>/dev/null || {
          grep -v '^MINING_PUBKEY=' "$ENV_FILE" > "$ENV_FILE.tmp" && mv "$ENV_FILE.tmp" "$ENV_FILE"
        }
      else
        grep -v '^MINING_PUBKEY=' "$ENV_FILE" > "$ENV_FILE.tmp" && mv "$ENV_FILE.tmp" "$ENV_FILE"
      fi
      echo "MINING_PUBKEY=$pubkey" >> "$ENV_FILE"
      
      echo -e "${GREEN}[+] 公钥已写入.env文件${RESET}"
      break
    else
      echo -e "${YELLOW}[!] 公钥格式错误，请重新输入${RESET}"
    fi
  done
  
  pause_and_return
}

function export_keys() {
  echo -e "[*] 导出密钥..."
  cd "$NCK_DIR" || return 1
  
  source "$HOME/.cargo/env" 2>/dev/null || true
  export PATH="$HOME/.cargo/bin:$PATH"
  
  wallet_bin=""
  if command -v nockchain-wallet >/dev/null 2>&1; then
    wallet_bin="nockchain-wallet"
  elif [ -f "target/release/nockchain-wallet" ]; then
    wallet_bin="./target/release/nockchain-wallet"
  elif [ -f "target/debug/nockchain-wallet" ]; then
    wallet_bin="./target/debug/nockchain-wallet"
  fi
  
  if [ -z "$wallet_bin" ]; then
    echo -e "${RED}[-] 未找到钱包程序${RESET}"
    pause_and_return
    return
  fi
  
  "$wallet_bin" export-keys
  echo -e "${GREEN}[+] 密钥已导出${RESET}"
  pause_and_return
}

function import_keys() {
  echo -e "[*] 导入密钥..."
  cd "$NCK_DIR" || return 1
  
  source "$HOME/.cargo/env" 2>/dev/null || true
  export PATH="$HOME/.cargo/bin:$PATH"
  
  wallet_bin=""
  if command -v nockchain-wallet >/dev/null 2>&1; then
    wallet_bin="nockchain-wallet"
  elif [ -f "target/release/nockchain-wallet" ]; then
    wallet_bin="./target/release/nockchain-wallet"
  elif [ -f "target/debug/nockchain-wallet" ]; then
    wallet_bin="./target/debug/nockchain-wallet"
  fi
  
  if [ -z "$wallet_bin" ]; then
    echo -e "${RED}[-] 未找到钱包程序${RESET}"
    pause_and_return
    return
  fi
  
  read -p "密钥文件路径 (默认: ./keys.export): " keyfile
  keyfile=${keyfile:-"./keys.export"}
  
  if [ -f "$keyfile" ]; then
    "$wallet_bin" import-keys --input "$keyfile"
    echo -e "${GREEN}[+] 密钥已导入${RESET}"
  else
    echo -e "${RED}[-] 文件不存在: $keyfile${RESET}"
  fi
  pause_and_return
}

function start_node() {
  echo -e "[*] 启动节点..."
  cd "$NCK_DIR" || return 1
  
  if [ ! -f "$ENV_FILE" ]; then
    echo -e "${RED}[-] .env文件不存在${RESET}"
    pause_and_return
    return
  fi
  
  source "$ENV_FILE"
  if [ -z "$MINING_PUBKEY" ]; then
    echo -e "${RED}[-] 未设置挖矿公钥${RESET}"
    pause_and_return
    return
  fi

  source "$HOME/.cargo/env" 2>/dev/null || true
  export PATH="$HOME/.cargo/bin:$PATH"

  # 查找节点程序
  node_bin=""
  if command -v nockchain >/dev/null 2>&1; then
    node_bin="nockchain"
  elif [ -f "target/release/nockchain" ]; then
    node_bin="./target/release/nockchain"
  elif [ -f "target/debug/nockchain" ]; then
    node_bin="./target/debug/nockchain"
  fi
  
  if [ -z "$node_bin" ]; then
    echo -e "${RED}[-] 未找到节点程序${RESET}"
    pause_and_return
    return
  fi

  echo -e "${GREEN}[+] 使用节点: $node_bin${RESET}"

  # 清理旧数据
  rm -rf ./.data.nockchain .socket/nockchain_npc.sock 2>/dev/null || true
  mkdir -p .socket

  # 启动命令
  start_cmd="RUST_LOG=info $node_bin --mining-pubkey $MINING_PUBKEY \
--mine \
--peer /ip4/95.216.102.60/udp/3006/quic-v1 \
--peer /ip4/65.109.156.108/udp/3006/quic-v1 \
--peer /ip4/65.21.67.175/udp/3006/quic-v1 \
--peer /ip4/65.109.156.172/udp/3006/quic-v1 \
--peer /ip4/34.174.22.166/udp/3006/quic-v1 \
--npc-socket .socket/nockchain.sock \
--bind /ip4/0.0.0.0/udp/3006/quic-v1"

  if ! command -v screen >/dev/null 2>&1; then
    echo -e "${YELLOW}[!] 后台启动...${RESET}"
    nohup bash -c "$start_cmd" > nockchain.log 2>&1 &
    echo -e "${GREEN}[+] 节点已后台启动${RESET}"
  else
    if screen -list | grep -qw "nockchain"; then
      screen -S nockchain -X quit >/dev/null 2>&1
      sleep 2
    fi

    screen -dmS nockchain bash -c "cd '$NCK_DIR' && $start_cmd"
    sleep 3
    
    if screen -list | grep -qw "nockchain"; then
      echo -e "${GREEN}[+] 节点已启动 (screen: nockchain)${RESET}"
      echo -e "${YELLOW}[!] 使用 'screen -r nockchain' 查看日志${RESET}"
    else
      echo -e "${RED}[-] 节点启动失败${RESET}"
    fi
  fi
  
  pause_and_return
}

function view_logs() {
  if command -v screen >/dev/null 2>&1 && screen -list | grep -qw "nockchain"; then
    echo -e "${YELLOW}[!] 进入日志查看 (Ctrl+A+D 退出)...${RESET}"
    screen -r nockchain
  elif [ -f "$NCK_DIR/nockchain.log" ]; then
    echo -e "${YELLOW}[!] 显示日志:${RESET}"
    tail -f "$NCK_DIR/nockchain.log"
  else
    echo -e "${RED}[-] 无日志文件${RESET}"
  fi
  pause_and_return
}

function check_status() {
  echo -e "[*] 检查状态..."
  
  cd "$NCK_DIR" || return 1
  if [ -f "$ENV_FILE" ]; then
    source "$ENV_FILE" >/dev/null 2>&1
    if [ -n "$MINING_PUBKEY" ]; then
      echo -e "${GREEN}[+] 公钥: ${MINING_PUBKEY:0:16}...${MINING_PUBKEY: -16}${RESET}"
    else
      echo -e "${YELLOW}[!] 未设置公钥${RESET}"
    fi
  fi
  
  if command -v screen >/dev/null 2>&1 && screen -list | grep -qw "nockchain"; then
    echo -e "${GREEN}[+] 节点运行中${RESET}"
  elif pgrep -f "nockchain" >/dev/null 2>&1; then
    echo -e "${GREEN}[+] 节点运行中${RESET}"
  else
    echo -e "${RED}[-] 节点未运行${RESET}"
  fi
  
  # 显示已安装的组件
  echo -e "${BLUE}[i] 已安装组件:${RESET}"
  for binary in "hoonc" "nockchain-wallet" "nockchain"; do
    if command -v "$binary" >/dev/null 2>&1; then
      echo -e "${GREEN}  ✓ $binary${RESET}"
    else
      echo -e "${YELLOW}  ✗ $binary${RESET}"
    fi
  done
  
  pause_and_return
}

function stop_node() {
  echo -e "[*] 停止节点..."
  
  if command -v screen >/dev/null 2>&1 && screen -list | grep -qw "nockchain"; then
    screen -S nockchain -X quit >/dev/null 2>&1
  fi
  
  if pgrep -f "nockchain" >/dev/null 2>&1; then
    pkill -f "nockchain" >/dev/null 2>&1
  fi
  
  sleep 2
  echo -e "${GREEN}[+] 节点已停止${RESET}"
  pause_and_return
}

function pause_and_return() {
  echo ""
  read -n1 -r -p "按任意键返回主菜单..." key
  main_menu
}

function main_menu() {
  show_banner
  echo "请选择操作:"
  echo "  1) 🚀 修复安装 (解决binary exists问题)"
  echo "  2) 🔑 生成钱包"
  echo "  3) 📝 设置挖矿公钥"
  echo "  4) 💾 导出密钥"
  echo "  5) 📂 导入密钥"
  echo "  6) ⚡ 启动节点"
  echo "  7) 📊 查看日志"
  echo "  8) 🔍 检查状态"
  echo "  9) ⏹️  停止节点"
  echo "  0) 退出"
  echo ""
  echo -e "${BLUE}💡 专门修复: binary already exists问题${RESET}"
  echo -e "${BLUE}💡 使用--force参数 + 修复cargo配置${RESET}"
  echo ""
  read -p "请输入编号: " choice

  case "$choice" in
    1) setup_all ;;
    2) generate_wallet ;;
    3) set_pubkey_env ;;
    4) export_keys ;;
    5) import_keys ;;
    6) start_node ;;
    7) view_logs ;;
    8) check_status ;;
    9) stop_node ;;
    0) echo "退出脚本."; exit 0 ;;
    *) echo -e "${RED}[-] 无效选项${RESET}"; pause_and_return ;;
  esac
}

main_menu
