#!/usr/bin/env bash

# ========= 容器化部署方案 =========
NCK_DIR="$HOME/nockchain"
DOCKER_IMAGE="nockchain/miner:latest"
VOLUME_MAP="-v $NCK_DIR:/nockchain"

# ========= 色彩定义 =========
RESET='\033[0m'
BOLD='\033[1m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
CYAN='\033[0;36m'

# ========= 容器运行时检查 =========
function check_docker() {
  if ! command -v docker &>/dev/null; then
    echo -e "${RED}✗ Docker未安装，开始自动安装...${RESET}"
    install_docker
  fi
}

# ========= Docker安装模块 =========
function install_docker() {
  # 自动识别发行版
  if grep -q "ubuntu" /etc/os-release; then
    sudo apt-get update
    sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    sudo apt-get update
    sudo apt-get install -y docker-ce docker-ce-cli containerd.io
    sudo usermod -aG docker $USER
    newgrp docker
  elif grep -q "centos" /etc/os-release; then
    sudo yum install -y yum-utils
    sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
    sudo yum install -y docker-ce docker-ce-cli containerd.io
    sudo systemctl start docker
    sudo systemctl enable docker
    sudo usermod -aG docker $USER
    newgrp docker
  else
    echo -e "${RED}✗ 不支持的Linux发行版${RESET}"
    exit 1
  fi
}

# ========= 容器化部署引擎 =========
function deploy_container() {
  echo -e "${CYAN}[*] 启动Nockchain容器...${RESET}"
  
  # GPU自动检测
  GPU_OPT=""
  if lspci | grep -qi "nvidia"; then
    GPU_OPT="--gpus all"
  elif lspci | grep -qi "amd"; then
    GPU_OPT="--device=/dev/kfd --device=/dev/dri"
  fi

  docker run -itd --restart always \
    --name nck-miner \
    $VOLUME_MAP \
    $GPU_OPT \
    --network host \
    $DOCKER_IMAGE
}

# ========= 矿工控制中心 =========
function miner_control() {
  case "$1" in
    start)
      docker start nck-miner
      ;;
    stop)
      docker stop nck-miner
      ;;
    status)
      docker ps -f name=nck-miner --format "table {{.ID}}\t{{.Status}}\t{{.Image}}"
      ;;
    logs)
      docker logs -f nck-miner
      ;;
  esac
}

# ========= 动态监控面板 =========
function live_dashboard() {
  watch -n1 -c "
    echo -e '${CYAN}=== 容器监控 ===${RESET}'
    docker exec nck-miner nck-top
    echo -e '\n${CYAN}=== 硬件状态 ===${RESET}'
    docker exec nck-miner nvidia-smi || echo '无GPU设备'
    echo -e '\n${YELLOW}按 Ctrl+C 返回主菜单${RESET}'
  "
}

# ========= 配置向导 =========
function config_wizard() {
  echo -e "${CYAN}>>> 容器配置向导 <<<${RESET}"
  
  # 公钥验证
  while :; do
    read -p "输入矿工公钥（128位十六进制）: " PUBKEY
    [[ "$PUBKEY" =~ ^[0-9a-fA-F]{32}$ ]] && break
    echo -e "${RED}✗ 格式错误，示例: 89f4fe6de0028e6b0d123ac7ee123456${RESET}"
  done

  # 生成配置文件
  cat > $NCK_DIR/.env <<EOF
MINER_PUBKEY=$PUBKEY
THREADS=$(nproc)
EOF

  echo -e "${GREEN}✓ 配置文件已生成: $NCK_DIR/.env${RESET}"
}

# ========= 主控界面 =========
function main_menu() {
  clear
  echo -e "${BOLD}${CYAN}"
  echo "=== Nockchain容器化管理系统 ==="
  echo -e "${RESET}"
  echo "1) 完整部署矿工"
  echo "2) 启动矿工容器"
  echo "3) 停止矿工容器"
  echo "4) 实时监控面板"
  echo "5) 查看运行日志"
  echo "6) 修改矿工公钥"
  echo "0) 退出系统"
  echo ""
  
  read -p "请选择操作: " choice
  case $choice in
    1) check_docker && config_wizard && deploy_container ;;
    2) miner_control start ;;
    3) miner_control stop ;;
    4) live_dashboard ;;
    5) miner_control logs ;;
    6) config_wizard ;;
    0) exit 0 ;;
    *) echo -e "${RED}无效选择${RESET}"; sleep 1 ;;
  esac
}

# ========= 初始化执行 =========
[ ! -d "$NCK_DIR" ] && mkdir -p "$NCK_DIR"
trap "echo -e '${RED}强制退出!${RESET}'; exit 130" SIGINT

while true; do
  main_menu
done
