#!/bin/bash

# ========= Nockchain AWS-LC-SYS 修复脚本 v1.0 =========
RESET='\033[0m'
BOLD='\033[1m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
CYAN='\033[0;36m'

NCK_DIR="$HOME/nockchain"
ENV_FILE="$NCK_DIR/.env"
BUILD_LOG="$HOME/nockchain_build.log"
NODE_LOG="$NCK_DIR/logs/nockchain.log"

# ---------- 辅助函数 ----------
log() { echo -e "${BLUE}[*] $*${RESET}"; }
ok()  { echo -e "${GREEN}[✓] $*${RESET}"; }
warn(){ echo -e "${YELLOW}[!] $*${RESET}"; }
err() { echo -e "${RED}[✗] $*${RESET}"; }
pause() { echo; read -n1 -r -p "按任意键返回菜单..." _; }

# ---------- 安装 Clang ----------
install_clang() {
  log "安装 Clang 编译器"
  
  if command -v clang >/dev/null 2>&1; then
    ok "Clang 已安装: $(clang --version | head -n1)"
    return 0
  fi
  
  if command -v apt >/dev/null 2>&1; then
    log "使用 apt 安装 Clang"
    sudo apt update -y
    sudo apt install -y clang
  elif command -v yum >/dev/null 2>&1; then
    log "使用 yum 安装 Clang"
    sudo yum install -y clang
  else
    err "无法安装 Clang，请手动安装"
    return 1
  fi
  
  if command -v clang >/dev/null 2>&1; then
    ok "Clang 安装成功: $(clang --version | head -n1)"
    return 0
  else
    err "Clang 安装失败"
    return 1
  fi
}

# ---------- 使用 Clang 构建 ----------
build_with_clang() {
  log "使用 Clang 构建 Nockchain"
  
  # 确保 Clang 已安装
  if ! command -v clang >/dev/null 2>&1; then
    err "Clang 未安装，请先安装 Clang"
    return 1
  fi
  
  # 设置环境变量，强制使用 Clang
  export CC=clang
  export CXX=clang++
  
  # 清理旧的构建文件
  cd "$NCK_DIR" || return 1
  cargo clean
  
  # 使用 Clang 构建
  log "开始构建 (使用 Clang 替代 GCC)"
  cargo build --release 2>&1 | tee "$BUILD_LOG"
  
  if [ $? -eq 0 ]; then
    ok "构建成功"
    return 0
  else
    err "构建失败，请查看日志: $BUILD_LOG"
    return 1
  fi
}

# ---------- 完整安装 ----------
complete_installation() {
  log "开始完整安装 Nockchain (使用 Clang)"
  
  # 安装 Clang
  install_clang || return 1
  
  # 安装 Rust (如果需要)
  if ! command -v rustc >/dev/null 2>&1; then
    log "安装 Rust"
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    source "$HOME/.cargo/env"
  fi
  
  # 克隆项目 (如果需要)
  if [ ! -d "$NCK_DIR" ]; then
    log "克隆 Nockchain 项目"
    git clone --depth 1 https://github.com/zorp-corp/nockchain "$NCK_DIR"
  fi
  
  # 使用 Clang 构建
  build_with_clang
}

# ---------- 设置挖矿公钥 ----------
set_mining_pubkey() {
  log "设置挖矿公钥"
  
  if [ ! -f "$ENV_FILE" ]; then
    mkdir -p "$NCK_DIR"
    echo "MINING_PUBKEY=" > "$ENV_FILE"
    echo "RUST_LOG=info" >> "$ENV_FILE"
  fi
  
  read -rp "输入 128 位公钥: " key
  key=$(echo "$key" | tr -d '[:space:]' | tr A-F a-f)
  
  if [ ${#key} -eq 128 ] && [[ "$key" =~ ^[0-9a-f]+$ ]]; then
    sed -i "/^MINING_PUBKEY=/d" "$ENV_FILE"
    echo "MINING_PUBKEY=$key" >> "$ENV_FILE"
    ok "公钥已写入 .env"
  else
    err "公钥格式不正确"
  fi
  
  pause
}

# ---------- 启动节点 ----------
start_node() {
  log "启动 Nockchain 节点"
  
  # 检查环境
  source "$ENV_FILE" 2>/dev/null || true
  if [ -z "$MINING_PUBKEY" ]; then
    err "未设置挖矿公钥，请先设置"
    pause
    return 1
  fi
  
  # 清理 socket 文件
  pkill -f nockchain 2>/dev/null || true
  find "$NCK_DIR" -name "*.sock" -delete 2>/dev/null || true
  mkdir -p "$NCK_DIR/.socket" "$NCK_DIR/logs"
  
  # 构建启动命令
  START_CMD="RUST_MIN_STACK=33554432 RUST_LOG=info $NCK_DIR/target/release/nockchain \
    --mining-pubkey $MINING_PUBKEY \
    --mine \
    --peer /ip4/95.216.102.60/udp/3006/quic-v1 \
    --peer /ip4/65.109.156.108/udp/3006/quic-v1 \
    --peer /ip4/65.21.67.175/udp/3006/quic-v1 \
    --peer /ip4/65.109.156.172/udp/3006/quic-v1 \
    --peer /ip4/34.174.22.166/udp/3006/quic-v1 \
    --npc-socket $NCK_DIR/.socket/nockchain.sock \
    --bind /ip4/0.0.0.0/udp/3006/quic-v1"
  
  # 启动节点
  cd "$NCK_DIR"
  if command -v screen >/dev/null; then
    screen -dmS nockchain bash -c "$START_CMD 2>&1 | tee $NODE_LOG"
    sleep 3
    if screen -list | grep -qw "nockchain"; then
      ok "节点已启动 (screen 会话: nockchain)"
    else
      err "节点启动失败"
    fi
  else
    nohup bash -c "$START_CMD" > "$NODE_LOG" 2>&1 &
    ok "节点已后台启动"
  fi
  
  pause
}

# ---------- 查看日志 ----------
view_logs() {
  if [ -f "$NODE_LOG" ]; then
    tail -n 100 -f "$NODE_LOG"
  else
    err "日志文件不存在: $NODE_LOG"
  fi
  pause
}

# ---------- 主菜单 ----------
while true; do
  clear
  echo -e "${CYAN}${BOLD}"
  echo "================================================"
  echo "        Nockchain AWS-LC-SYS 修复脚本 v1.0"
  echo "================================================"
  echo -e "${RESET}"
  echo ""
  echo -e "${GREEN}🔧 安装选项:${RESET}"
  echo "  1) 使用 Clang 完整安装 Nockchain"
  echo ""
  echo -e "${GREEN}🔑 节点管理:${RESET}"
  echo "  2) 设置挖矿公钥"
  echo "  3) 启动挖矿节点"
  echo "  4) 查看节点日志"
  echo ""
  echo "  0) 退出脚本"
  echo ""
  read -rp "请选择操作 (0-4): " choice
  
  case $choice in
    1) complete_installation; pause ;;
    2) set_mining_pubkey ;;
    3) start_node ;;
    4) view_logs ;;
    0) echo -e "${GREEN}感谢使用！${RESET}"; exit 0 ;;
    *) warn "无效选项，请重新选择"; sleep 1 ;;
  esac
done
