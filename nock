#!/usr/bin/env sh
# 增强版 Nockchain 矿工工具 v5.5
# 终极修复版：手动选择系统类型，绕过所有自动检测问题

set -euo pipefail
IFS='
'

# --- 全局配置 ---
NOCK_DIR="${XDG_DATA_HOME:-$HOME/.local/share}/nockchain"
CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/nockchain"
CACHE_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/nockchain"
LOG_FILE="$CACHE_DIR/miner.log"
CONFIG_FILE="$CONFIG_DIR/miner.conf"
PID_FILE="$CACHE_DIR/miner.pid"

# --- 动态命令配置 ---
SUDO_CMD=""
if [ "$(id -u)" -ne 0 ]; then
  SUDO_CMD="sudo"
fi

# --- 环境与依赖 ---

get_cpu_cores() {
  case "$(uname -s)" in
    Linux*)  nproc 2>/dev/null || echo "2" ;;
    Darwin*) sysctl -n hw.ncpu 2>/dev/null || echo "2" ;;
    *)       echo "2" ;;
  esac
}

init_environment() {
  mkdir -p "$NOCK_DIR" "$CONFIG_DIR" "$CACHE_DIR"
  if [ ! -f "$CONFIG_FILE" ]; then
    echo "▶ 正在创建默认配置文件..."
    cat > "$CONFIG_FILE" <<EOF
# Nockchain 矿工配置文件
MINING_ADDRESS="0x0000000000000000000000000000000000000000"
RPC_URL="http://127.0.0.1:8545"
MINING_THREADS=$(get_cpu_cores)
# 编译优化模式: release, pgo, lto, bolt
OPT_MODE="release"
# 源码存放路径
REPO_PATH="$HOME/nockchain"
EOF
  fi
  . "$CONFIG_FILE"
}

# 移除了有问题的 detect_platform 函数

create_tempfile() {
  mktemp -t nockchain.XXXXXX 2>/dev/null || printf "%s/tmp.%s.%s" "$CACHE_DIR" "$(date +%s%N)" "$$"
}

install_deps() {
  echo "▶ 正在安装依赖..."
  case "$PKG_MANAGER" in
    apt)
      $SUDO_CMD apt-get update
      $SUDO_CMD apt-get install -y build-essential cmake clang llvm git curl
      ;;
    dnf)
      $SUDO_CMD dnf install -y gcc-c++ make cmake clang llvm-toolset git curl
      ;;
    yum)
      $SUDO_CMD yum install -y gcc-c++ make cmake clang llvm-toolset git curl
      ;;
    pacman)
      $SUDO_CMD pacman -S --noconfirm --needed base-devel cmake clang llvm git curl
      ;;
    brew)
      brew update
      brew install cmake llvm git
      ;;
    pkg)
      $SUDO_CMD pkg install -y gmake cmake clang llvm git curl
      ;;
    *)
      echo "错误：未选择或选择了无效的包管理器。" >&2
      exit 1
      ;;
  esac
}

# --- 安装与编译 ---

safe_clone_repo() {
  if [ ! -d "$REPO_PATH/.git" ]; then
    echo "▶ 正在克隆主仓库到 '$REPO_PATH'..."
    if ! git clone https://github.com/nockchain/nockchain.git "$REPO_PATH"; then
      echo "HTTPS克隆失败，尝试SSH方式..."
      git clone git@github.com:nockchain/nockchain.git "$REPO_PATH" || {
        echo "克隆失败，请检查网络和权限" >&2
        exit 1
      }
    fi
  else
    echo "▶ 正在更新仓库代码..."
    (
      cd "$REPO_PATH" && git pull
    ) || {
      echo "更新失败，正在尝试强制更新..."
      (cd "$REPO_PATH" && git fetch --all && git reset --hard origin/main)
    }
  fi
}

optimized_build() {
  echo "▶ 正在以 '${OPT_MODE}' 模式编译..."
  (
    cd "$REPO_PATH"
    make clean
    case "$OPT_MODE" in
      pgo)   make pgo ;;
      lto)   make lto ;;
      bolt)  make bolt ;;
      *)     make release ;;
    esac
  ) || { echo "编译失败，请检查依赖和源码。"; exit 1; }
}

install_nockchain() {
  echo "[DEBUG] 启动安装流程..."
  
  echo "▶ 步骤 1/4: 安装依赖... (此步骤可能需要输入密码并等待较长时间)"
  install_deps
  echo "✔ 依赖安装完成。"

  echo "▶ 步骤 2/4: 克隆/更新代码... (此步骤受网络速度影响)"
  safe_clone_repo
  echo "✔ 代码更新完成。"

  echo "▶ 步骤 3/4: 编译源码... (此步骤非常耗时，请耐心等待！)"
  optimized_build
  echo "✔ 编译完成。"

  echo "▶ 步骤 4/4: 安装二进制文件..."
  mkdir -p "${HOME}/.local/bin"
  install -m755 "$REPO_PATH/build/nockchain" "${HOME}/.local/bin/"

  if ! echo "$PATH" | grep -q "$HOME/.local/bin"; then
    echo "----------------------------------------------------------------------"
    echo "注意: '${HOME}/.local/bin' 不在你的 PATH 环境变量中。"
    echo "请将以下行添加到你的 shell 配置文件 (如 ~/.bashrc, ~/.zshrc) 中:"
    echo "  export PATH=\"\$HOME/.local/bin:\$PATH\""
    echo "----------------------------------------------------------------------"
  fi
  echo "✔ Nockchain 安装/更新全部完成!"
  sleep 3
}

# --- 核心功能 (此处省略，保持和之前版本一致) ---
# ...
# ...
# ---

show_menu() {
  while true; do
    . "$CONFIG_FILE"
    clear
    cat << "EOF"
╔════════════════════════════════════════════════╗
║             Nockchain 矿工专业版 v5.5            ║
║                  (手动选择系统)                  ║
╠════════════════════════════════════════════════╣
║ 1) 完整安装/更新     2) 更改挖矿地址           ║
║ 3) 启动/停止矿机     4) 实时监控               ║
║ 0) 退出                                        ║
╚════════════════════════════════════════════════╝
EOF
    echo
    printf "➤ 请输入选项 [0-4]: "
    read -r choice

    case $choice in
      1) install_nockchain ;;
      2) echo "功能开发中..." && sleep 1;; # 简化示例
      3) echo "功能开发中..." && sleep 1;;
      4) echo "功能开发中..." && sleep 1;;
      0) echo "感谢使用，再见！"; exit 0 ;;
      *) echo "无效选项，请重新输入"; sleep 1 ;;
    esac
  done
}

# --- 新的主程序入口 ---
main() {
  # 脚本开始时，先进行系统选择
  PKG_MANAGER=""
  while [ -z "$PKG_MANAGER" ]; do
    clear
    echo "为了正确安装依赖，请选择您的操作系统包管理器："
    echo "-----------------------------------------------"
    echo "  1) apt (适用于 Debian, Ubuntu, Deepin 等)"
    echo "  2) dnf (适用于 Fedora, CentOS 8+, RHEL 8+)"
    echo "  3) yum (适用于 CentOS 7, RHEL 7)"
    echo "  4) pacman (适用于 Arch Linux, Manjaro)"
    echo "  5) brew (适用于 macOS)"
    echo "  6) pkg (适用于 FreeBSD)"
    echo "-----------------------------------------------"
    printf "请输入您的选择 [1-6]: "
    read -r sys_choice

    case $sys_choice in
      1) PKG_MANAGER="apt" ;;
      2) PKG_MANAGER="dnf" ;;
      3) PKG_MANAGER="yum" ;;
      4) PKG_MANAGER="pacman" ;;
      5) PKG_MANAGER="brew" ;;
      6) PKG_MANAGER="pkg" ;;
      *)
        echo "输入无效，请重新输入。"
        sleep 1
        ;;
    esac
  done

  echo "您已选择 '$PKG_MANAGER'。脚本将继续..."
  sleep 1

  # 初始化环境并显示主菜单
  TMPFILE=$(create_tempfile)
  trap 'rm -f "${TMPFILE:-}"; trap - EXIT INT TERM' EXIT INT TERM
  init_environment
  show_menu
}

# 启动主程序
main "$@"
