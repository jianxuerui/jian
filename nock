#!/bin/bash
# ==============================================================================
# Nockchain 挖矿助手 (K2 增强融合版 v5.6 - 绝对路径修复)
# ==============================================================================
# HOW TO RUN THIS SCRIPT (重要运行说明):
# 1. 可以直接用 root 用户运行此脚本。
# 2. 脚本会自动创建 'miner' 用户并切换，或使用现有普通用户。
# 3. 建议在 screen/tmux 中运行: `screen -S nck` 然后 `./nock.sh`
# ==============================================================================
# 作者: K2 节点教程分享 (AI 终极自动化版)
# Telegram: https://t.me/+EaCiFDOghoM3Yzll
# Twitter:  https://x.com/BtcK241918
# ==============================================================================

# 脚本健壮性设置
set -e

# --- 全局常量和颜色定义 ---
RESET='\033[0m'; BOLD='\033[1m'; GREEN='\033[0;32m'; BLUE='\033[0;34m'; YELLOW='\033[1;33m'; RED='\033[0;31m'; PURPLE='\033[0;35m'; CYAN='\033[0;36m'
MINER_USERNAME="miner"

# --- 核心函数 (将在普通用户下执行) ---
function run_as_miner() {
    set -euo pipefail

    NCK_DIR="$HOME/nockchain"
    ENV_FILE="$NCK_DIR/.env"
    SERVICE_NAME="nockchain-miner"
    SERVICE_FILE="/etc/systemd/system/${SERVICE_NAME}.service"
    HOON_KERNEL_URL="https://gist.githubusercontent.com/git-k2/438b45f1b528a4c042da4938634e797d/raw/hoon_v139"

    function show_banner() {
      clear
      echo -e "${BOLD}${BLUE}"
      echo "======================================================"
      echo " Nockchain 挖矿助手 (K2 增强融合版 v5.6)"
      echo "======================================================"
      echo -e "${RESET}"
      echo -e "🔧 ${BOLD}${CYAN}当前用户: $(whoami)${RESET}"
      echo -e "✨ ${BOLD}${PURPLE}内核增强: 动态下载 v139 优化版 Hoon 内核！${RESET}"
      echo -e "🛡️ ${BOLD}${RED}终极修复: 采用手动编译，补全所有.jam依赖！${RESET}"
      echo -e "🚀 ${BOLD}使用 Systemd 服务管理，确保稳定运行。${RESET}"
      echo "📌 作者: K2 节点教程分享 (AI 终极自动化版)"
      echo "🔗 Telegram: https://t.me/+EaCiFDOghoM3Yzll"
      echo "🐦 Twitter:  https://x.com/BtcK241918"
      echo "------------------------------------------------------"
      echo ""
    }

    function get_num_cores() { nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || echo 4; }
    function pause_and_return() { echo ""; read -r -p "按任意键返回主菜单..." -s -n 1; echo; }

    function install_all() {
        show_banner
        # 清理旧环境
        echo -e "${YELLOW}[*] 为确保全新安装，正在清理旧的 nockchain 目录...${RESET}"
        if [ -d "$NCK_DIR" ]; then
            if systemctl is-active --quiet "$SERVICE_NAME"; then
                echo -e "${YELLOW}[!] 检测到服务正在运行，正在停止服务...${RESET}"
                sudo systemctl stop "$SERVICE_NAME"
            fi
            rm -rf "$NCK_DIR"
            echo -e "${GREEN}[+] 旧目录已清理。${RESET}"
        fi

        (
        set -e
        echo -e "${BLUE}--- 步骤 1/4: 安装系统依赖 ---${RESET}"
        sudo apt-get update
        sudo apt-get install -y clang llvm-dev libclang-dev pkg-config libssl-dev build-essential cmake git make curl dos2unix

        echo -e "${BLUE}--- 步骤 2/4: 安装 Rust ---${RESET}"
        if ! command -v cargo &>/dev/null; then
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        else
            echo -e "${YELLOW}[!] Rust 已安装，跳过。${RESET}"
        fi
        source "$HOME/.cargo/env"

        echo -e "${BLUE}--- 步骤 3/4: 克隆仓库并注入内核 ---${RESET}"
        git clone https://github.com/zorp-corp/nockchain "$NCK_DIR"
        cd "$NCK_DIR"
        
        echo -e "${PURPLE}--- [增强] 动态下载并注入修复版 Hoon 内核 (v139) ---${RESET}"
        if curl -sSLf -o "$NCK_DIR/pkg/sys/hoon" "$HOON_KERNEL_URL"; then
            echo -e "${GREEN}[+] 增强版 Hoon 内核已成功注入。${RESET}"
        else
            echo -e "${RED}致命错误: 无法从 URL 下载内核文件！${RESET}"; exit 1;
        fi
        
        echo -e "${RED}${BOLD}--- 步骤 4/4: 执行手动编译流程 ---${RESET}"
        echo -e "${CYAN}[*] 正在编译 Hoon 编译器 (hoonc)...${RESET}"
        cargo build --release -p hoonc
        
        echo -e "${CYAN}[*] 正在生成 .jam 资产文件...${RESET}"
        mkdir -p assets
        "$NCK_DIR/target/release/hoonc" pkg/miner.hoon > assets/miner.jam
        "$NCK_DIR/target/release/hoonc" pkg/dumb.hoon > assets/dumb.jam
        "$NCK_DIR/target/release/hoonc" pkg/wal.hoon > assets/wal.jam
        
        echo -e "${CYAN}[*] 正在编译 Nockchain 主程序...${RESET}"
        export RUSTFLAGS="-C target-cpu=native -C opt-level=3"
        export CARGO_PROFILE_RELEASE_LTO="true"
        cargo build --release --workspace --exclude hoonc -j"$(get_num_cores)"
        
        cp "$NCK_DIR/target/release/nockchain" "$HOME/.cargo/bin/"
        )
        local exit_code=$?

        if [ "$exit_code" -ne 0 ]; then
            echo -e "\n${RED}安装失败！请检查错误信息。${RESET}"
        else
            echo -e "\n${GREEN}Nockchain 增强版安装成功！${RESET}"
            echo -e "${YELLOW}下一步: 请运行选项 2 设置您的挖矿公钥。${RESET}"
        fi
        pause_and_return
    }

    function set_pubkey() {
        show_banner
        if [ ! -d "$NCK_DIR" ]; then echo -e "${RED}项目目录不存在，请先运行安装。${RESET}"; pause_and_return; return; fi
        local pubkey
        read -r -p "请输入您的挖矿公钥 (MINING_PUBKEY): " pubkey
        if ! [[ "$pubkey" =~ ^[0-9a-fA-F]{128}$ ]]; then
            echo -e "${RED}错误: 公钥格式不正确。${RESET}"; pause_and_return; return
        fi
        
        touch "$ENV_FILE"
        sed -i '/^MINING_PUBKEY=/d' "$ENV_FILE"
        sed -i '/^MINER_THREADS=/d' "$ENV_FILE"
        echo "MINING_PUBKEY=$pubkey" >> "$ENV_FILE"
        echo "MINER_THREADS=$(get_num_cores)" >> "$ENV_FILE"
        echo -e "${GREEN}挖矿配置已更新。请重启服务以生效。${RESET}"
        pause_and_return
    }

    function start_node() {
        show_banner
        if [ ! -f "$ENV_FILE" ] || ! grep -q "MINING_PUBKEY" "$ENV_FILE"; then
            echo -e "${RED}错误: MINING_PUBKEY 未设置! 请先运行选项 2。${RESET}"; pause_and_return; return;
        fi
        
        echo -e "${BLUE}[*] 正在创建并启动 systemd 服务...${RESET}"
        sudo bash -c "cat <<EOF > $SERVICE_FILE
[Unit]
Description=$SERVICE_NAME service
After=network-online.target
[Service]
User=$(whoami)
Group=$(id -gn)
WorkingDirectory=$NCK_DIR
EnvironmentFile=$ENV_FILE
ExecStart=$HOME/.cargo/bin/nockchain
Restart=on-failure
RestartSec=10
LimitNOFILE=65536
Nice=-5
[Install]
WantedBy=multi-user.target
EOF"

        sudo systemctl daemon-reload
        sudo systemctl enable "$SERVICE_NAME"
        sudo systemctl restart "$SERVICE_NAME"
        echo -e "${GREEN}Nockchain 挖矿服务已启动！${RESET}"
        pause_and_return
    }

    function stop_node() {
        show_banner
        if ! systemctl list-units --full -all | grep -q "${SERVICE_NAME}.service"; then
            echo -e "${YELLOW}Systemd 服务未安装。${RESET}"; pause_and_return; return;
        fi
        sudo systemctl stop "$SERVICE_NAME"
        echo -e "${GREEN}服务已停止。${RESET}"
        pause_and_return
    }

    function view_logs() {
        show_banner
        if ! systemctl list-units --full -all | grep -q "${SERVICE_NAME}.service"; then
            echo -e "${YELLOW}Systemd 服务未安装。${RESET}"; pause_and_return; return;
        fi
        echo -e "${YELLOW}按 Ctrl+C 退出日志查看。${RESET}"
        journalctl -u "$SERVICE_NAME" -f --no-pager
        pause_and_return
    }

    function main_menu() {
      show_banner
      echo -e "${BOLD}${GREEN}--- Nockchain 挖矿助手 ---${RESET}"
      echo "请选择操作:"
      echo ""
      echo -e "  ${BOLD}1) 一键安装增强版 Nockchain${RESET} ${RED}(v5.6)${RESET}"
      echo -e "  ${BOLD}2) 设置挖矿公钥 (MINING_PUBKEY)${RESET}"
      echo ""
      echo -e "  ${GREEN}3) 安装并启动/重启挖矿服务 (Systemd)${RESET}"
      echo -e "  ${RED}4) 停止挖矿服务 (Systemd)${RESET}"
      echo "  ${YELLOW}5) 查看实时挖矿日志 (Systemd)${RESET}"
      echo ""
      echo -e "  ${CYAN}0) 退出脚本${RESET}"
      echo ""
      read -r -p "请输入编号: " choice

      case "$choice" in
        1) install_all ;;
        2) set_pubkey ;;
        3) start_node ;;
        4) stop_node ;;
        5) view_logs ;;
        0) echo "退出脚本."; exit 0 ;;
        *) echo -e "${RED}无效选项。${RESET}"; pause_and_return ;;
      esac
    }

    while true; do
        main_menu
    done
}


# --- 脚本入口：用户身份检查与切换 ---
if [ "$(id -u)" -eq 0 ]; then
    echo -e "${YELLOW}检测到您是 root 用户。脚本将自动为您创建并切换到普通用户 '${MINER_USERNAME}'。${RESET}"
    
    if id "${MINER_USERNAME}" &>/dev/null; then
        echo -e "${GREEN}用户 '${MINER_USERNAME}' 已存在，将直接使用。${RESET}"
    else
        echo -e "${BLUE}正在创建用户 '${MINER_USERNAME}'...${RESET}"
        adduser --disabled-password --gecos "" "${MINER_USERNAME}"
        echo -e "${BLUE}正在为用户 '${MINER_USERNAME}' 添加 sudo 权限...${RESET}"
        usermod -aG sudo "${MINER_USERNAME}"
        echo -e "${GREEN}用户 '${MINER_USERNAME}' 创建并配置成功！${RESET}"
    fi

    # [核心修复] 获取脚本自身的绝对路径
    SCRIPT_PATH="$(realpath "$0")"

    # 将脚本自身复制到新用户的主目录，以确保所有权和权限正确
    cp "${SCRIPT_PATH}" "/home/${MINER_USERNAME}/"
    chown "${MINER_USERNAME}:${MINER_USERNAME}" "/home/${MINER_USERNAME}/$(basename "${SCRIPT_PATH}")"
    chmod +x "/home/${MINER_USERNAME}/$(basename "${SCRIPT_PATH}")"
    
    echo -e "\n${BOLD}${PURPLE}=== 正在切换到用户 '${MINER_USERNAME}' 并继续执行脚本 ===${RESET}\n"
    sleep 3

    # [核心修复] 使用新用户家目录中的脚本路径来执行
    # 这确保了即使原始脚本在/root下，新用户也能执行自己家目录下的副本
    su - "${MINER_USERNAME}" -c "/home/${MINER_USERNAME}/$(basename "${SCRIPT_PATH}")"
    
    # 切换用户后，当前脚本的 root 实例退出
    exit 0
else
    # 如果已经是普通用户，直接运行主函数
    run_as_miner
fi

exit 0
