#!/bin/bash
# Nockchain Ecosystem Orchestrator v4.0 "Archon"
#
# A comprehensive suite for deploying, managing, and participating in the Nockchain ecosystem.
# Features: Multi-node deployment, advanced security, staking & governance,
#           developer toolkits, and an AI-powered Operations Co-Pilot.
#
set -euo pipefail
# Errors are logged separately for cleaner main log
trap 'handle_error $? $LINENO' ERR
exec > >(tee /var/log/nockchain-orchestrator.log) 2>&1

# --- CONFIGURATION HUB ---
# All user-configurable variables are here for easy management.
declare -A CONFIG=(
    [USER]="nockchain"
    [RUSTUP_HOME]="/opt/rustup"
    [CARGO_HOME]="/opt/cargo"
    [SOURCE_DIR]="/opt/nockchain"
    [DATA_DIR]="/var/lib/nockchain"
    [LOG_FILE]="/var/log/nockchain-orchestrator.log"
    [ERROR_LOG]="/var/log/nockchain-error.log"
    [P2P_PORT]="30303"
    [RPC_PORT]="9933"
    [METRICS_PORT]="9615"
    [GRAFANA_PORT]="3000"
)
# For skipping CPU check: export SKIP_CPU_CHECK=1
SKIP_CPU_CHECK=${SKIP_CPU_CHECK:-0}

# --- ENVIRONMENT & UTILS ---
export LC_ALL=C.UTF-8
export RUSTUP_HOME="${CONFIG[RUSTUP_HOME]}"
export CARGO_HOME="${CONFIG[CARGO_HOME]}"
PATH="${CONFIG[CARGO_HOME]}/bin:$PATH"

green='\e[32m'; blue='\e[34m'; red='\e[31m'; yellow='\e[33m'; reset='\e[0m'
ColorGreen(){ echo -ne "${green}$1${reset}"; }
ColorBlue() { echo -ne "${blue}$1${reset}"; }
ColorRed()  { echo -ne "${red}$1${reset}"; }
ColorYellow(){ echo -ne "${yellow}$1${reset}"; }

handle_error() {
    local exit_code=$1 line_no=$2
    local err_msg="[$(date '+%F %T')] 致命错误于脚本 $0 第 $line_no 行: 命令执行失败，退出码 $exit_code."
    echo "$err_msg" | tee -a "${CONFIG[ERROR_LOG]}" >&2
    ColorRed "\n部署失败！详情请见 ${CONFIG[ERROR_LOG]}\n" >&2
    # Attempt to clean up
    systemctl stop nockchain-node.service nockchain-monitor.service grafana-server prometheus 2>/dev/null || true
    exit "$exit_code"
}

# --- CORE FUNCTIONS ---

# Enhanced compatibility check
check_compatibility() {
    ColorBlue ">> [1/8] 正在进行系统兼容性检查...\n"
    if ! command -v lsb_release &>/dev/null; then
        echo "未找到 lsb-release。正在尝试安装..." >&2
        if command -v apt-get &>/dev/null; then sudo apt-get update && sudo apt-get install -y lsb-release;
        elif command -v yum &>/dev/null; then sudo yum install -y redhat-lsb-core;
        else ColorRed "不支持的包管理器。请手动安装 lsb-release。\n"; exit 1; fi
    fi
    local distro version; distro=$(lsb_release -si); version=$(lsb_release -sr); echo "发行版: $distro $version"
    case $distro in
        Ubuntu) [[ $version =~ ^(20\.04|22\.04|24\.04)$ ]] || { ColorRed "不支持的 Ubuntu 版本: $version. 需要: 20.04, 22.04, 24.04\n"; exit 1; };;
        Debian) [[ ${version%%.*} -ge 10 ]] || { ColorRed "需要 Debian >= 10, 当前版本 $version\n"; exit 1; };;
        CentOS|AlmaLinux|Rocky) [[ ${version%%.*} -ge 8 ]] || { ColorRed "需要 RHEL/CentOS >= 8, 当前版本 $version\n"; exit 1; };;
        *) ColorRed "不支持的发行版: $distro\n"; exit 1;;
    esac
    if [[ $SKIP_CPU_CHECK -ne 1 ]]; then
        grep -q 'sse4_2' /proc/cpuinfo || { ColorRed "CPU 不支持 SSE4.2, 此为必须项。\n"; exit 1; }
        grep -q 'avx2' /proc/cpuinfo || ColorYellow "警告: 未检测到 AVX2 支持。ZK 相关操作性能可能会受影响。\n"
    fi
    ColorGreen "系统兼容性检查通过。\n"
}

# (MODIFIED) Dependency installation with distro detection and LLVM PPA for Debian/Ubuntu
install_dependencies() {
    ColorBlue ">> [2/8] 正在安装核心依赖...\n"
    if command -v apt-get &>/dev/null; then
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends software-properties-common wget gpg-agent
        ColorYellow "检测到 Debian/Ubuntu 系统，正在配置 LLVM 官方源以确保 clang-15 可用...\n"
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        local ubuntu_codename=$(lsb_release -sc)
        sudo add-apt-repository -y "deb http://apt.llvm.org/${ubuntu_codename}/ llvm-toolchain-${ubuntu_codename}-15 main"
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
            build-essential clang-15 llvm-15-dev libclang-15-dev cmake libssl-dev pkg-config \
            uuid-dev git cgroup-tools screen htop ntpdate jq python3-venv curl ufw tor
    elif command -v dnf &>/dev/null; then
        # <<< MODIFIED BLOCK HERE / 已修改部分 >>>
        # This block now tries to enable 'powertools' and falls back to 'crb' if it fails,
        # making it compatible with CentOS 8, AlmaLinux, Rocky Linux etc.
        ColorYellow "检测到 RHEL/CentOS 系统，正在启用 Powertools/CRB 仓库...\n"
        sudo dnf install -y 'dnf-command(config-manager)'
        if ! sudo dnf config-manager --set-enabled powertools &>/dev/null; then
            ColorYellow "未找到 'powertools' 仓库, 正在尝试 'crb' (适用于 Alma/Rocky 8+)...\n"
            sudo dnf config-manager --set-enabled crb
        fi
        # <<< END OF MODIFIED BLOCK >>>
        sudo dnf install -y \
            gcc-toolset-12 clang llvm-devel libasan libclang-devel cmake openssl-devel pkgconfig \
            libuuid-devel git libcgroup-tools screen htop ntpdate jq python3-venv curl firewalld tor
    else
        ColorRed "不支持的包管理器。无法安装依赖。\n"; exit 1
    fi
    ColorGreen "依赖安装成功。\n"
}

# Hoon Compiler Build
build_hoonc() {
    ColorBlue ">> [3/8] 正在构建 Hoon 编译器 (hoonc)...\n"
    if [ -f /usr/local/bin/hoonc ]; then ColorGreen "Hoon 编译器已存在，跳过此步。\n"; return; fi
    git clone https://github.com/urbit/hoon.git /tmp/hoon
    (cd /tmp/hoon && git checkout tags/hoonk-v1.0.2 && make HOON_ARCH="$(uname -m)-linux" && sudo make install)
    sudo rm -rf /tmp/hoon
    ColorGreen "Hoon 编译器构建并安装成功。\n"
}

# Build the Nockchain Suite
build_nockchain_suite() {
    local node_type=$1
    ColorBlue ">> [4/8] 正在构建 Nockchain 套件 (类型: $node_type)...\n"
    git clone https://github.com/zorp-corp/nockchain "${CONFIG[SOURCE_DIR]}"
    pushd "${CONFIG[SOURCE_DIR]}" >/dev/null
      local build_features="zkpow,metrics"
      if [[ "$node_type" == "validator" ]]; then build_features+=",staking"; fi
      cargo build --release --features "$build_features"
      sudo cp target/release/nockchain /usr/local/bin/
      sudo cp target/release/nockchain-cli /usr/local/bin/
      sudo cp target/release/nockchain-wallet /usr/local/bin/
    popd >/dev/null
    sudo rm -rf "${CONFIG[SOURCE_DIR]}"
    ColorGreen "Nockchain 套件构建并安装成功。\n"
}

# Setup user, directories, and initial wallet
setup_environment() {
    ColorBlue ">> [5/8] 正在设置用户和运行环境...\n"
    id "${CONFIG[USER]}" &>/dev/null || sudo useradd --system --shell /usr/sbin/nologin --home-dir "${CONFIG[DATA_DIR]}" "${CONFIG[USER]}"
    sudo mkdir -p "${CONFIG[DATA_DIR]}/wallet"
    sudo chown -R "${CONFIG[USER]}":"${CONFIG[USER]}" "${CONFIG[DATA_DIR]}"
    if [ ! -f "${CONFIG[DATA_DIR]}/wallet/seed.txt" ]; then
        ColorYellow "正在生成新钱包... 请务必妥善保管您的助记词！\n"
        sudo -u "${CONFIG[USER]}" nockchain-wallet keygen | sudo tee "${CONFIG[DATA_DIR]}/wallet/seed.txt"
        sudo chmod 600 "${CONFIG[DATA_DIR]}/wallet/seed.txt"
    fi
    ColorGreen "环境设置完成。助记词已保存至 ${CONFIG[DATA_DIR]}/wallet/seed.txt\n"
}

# Advanced Systemd and Firewall setup
setup_daemon_and_security() {
    local node_type=$1
    ColorBlue ">> [6/8] 正在配置 Systemd 服务和防火墙...\n"
    local exec_start_args="--base-path ${CONFIG[DATA_DIR]} --port ${CONFIG[P2P_PORT]} --rpc-port ${CONFIG[RPC_PORT]} --prometheus-port ${CONFIG[METRICS_PORT]}"
    case "$node_type" in
        validator) exec_start_args+=" --validator --name 我的Nock验证节点";;
        archive) exec_start_args+=" --pruning archive";;
        light) exec_start_args="light ${exec_start_args}";;
    esac
    cat <<EOF | sudo tee /etc/systemd/system/nockchain-node.service
[Unit]
Description=Nockchain Node ($node_type)
After=network-online.target
Wants=network-online.target
[Service]
User=${CONFIG[USER]}
Group=${CONFIG[USER]}
Type=simple
ExecStart=/usr/local/bin/nockchain $exec_start_args
Restart=on-failure
RestartSec=10
LimitNOFILE=1048576
[Install]
WantedBy=multi-user.target
EOF
    if command -v ufw &>/dev/null; then
        sudo ufw allow ${CONFIG[P2P_PORT]}/tcp comment 'Nockchain P2P'
        sudo ufw allow ${CONFIG[RPC_PORT]}/tcp comment 'Nockchain RPC'
        sudo ufw allow ${CONFIG[METRICS_PORT]}/tcp comment 'Nockchain Metrics'
        sudo ufw allow ssh
        sudo ufw --force enable
    elif command -v firewall-cmd &>/dev/null; then
        sudo firewall-cmd --zone=public --add-port=${CONFIG[P2P_PORT]}/tcp --permanent
        sudo firewall-cmd --zone=public --add-port=${CONFIG[RPC_PORT]}/tcp --permanent
        sudo firewall-cmd --zone=public --add-port=${CONFIG[METRICS_PORT]}/tcp --permanent
        sudo firewall-cmd --reload
    fi
    sudo systemctl daemon-reload
    sudo systemctl enable nockchain-node.service
    ColorGreen "Systemd 服务和防火墙配置完成。\n"
}

# Automated Monitoring Stack Deployment
setup_monitoring_stack() {
    ColorBlue ">> [7/8] 正在部署监控套件 (Prometheus + Grafana)...\n"
    if command -v apt-get &>/dev/null; then sudo apt-get install -y prometheus grafana-enterprise;
    elif command -v dnf &>/dev/null; then sudo dnf install -y prometheus grafana; fi
    sudo tee /etc/prometheus/prometheus.yml > /dev/null <<EOF
global: {scrape_interval: 15s}
scrape_configs: [{job_name: 'nockchain', static_configs: [{targets: ['localhost:${CONFIG[METRICS_PORT]}']}]}]
EOF
    sudo mkdir -p /var/lib/grafana/dashboards/
    sudo tee /var/lib/grafana/dashboards/nockchain.json > /dev/null <<'EOF'
{"__inputs":[],"__requires":[{"type":"grafana","id":"grafana","name":"Grafana","version":"7.0.0"},{"type":"panel","id":"graph","name":"Graph","version":""},{"type":"datasource","id":"prometheus","name":"Prometheus","version":""}],"annotations":{"list":[]},"editable":true,"gnetId":null,"graphTooltip":0,"id":null,"panels":[{"type":"stat","title":"Peers","gridPos":{"h":4,"w":4,"x":0,"y":0}},{"type":"stat","title":"Best Block","gridPos":{"h":4,"w":4,"x":4,"y":0}},{"type":"stat","title":"Finalized Block","gridPos":{"h":4,"w":4,"x":8,"y":0}},{"type":"timeseries","title":"CPU Usage","gridPos":{"h":8,"w":12,"x":0,"y":4}},{"type":"timeseries","title":"Memory Usage","gridPos":{"h":8,"w":12,"x":12,"y":4}},{"type":"timeseries","title":"Transaction Pool Size","gridPos":{"h":8,"w":24,"x":0,"y":12}}],"refresh":"10s","schemaVersion":27,"style":"dark","tags":["nockchain"],"title":"Nockchain Node Overview","uid":"nockchain-overview","time":{"from":"now-1h","to":"now"}}
EOF
    sudo tee /etc/grafana/provisioning/dashboards/nockchain.yml > /dev/null <<EOF
apiVersion: 1
providers:
- name: 'Nockchain'
  orgId: 1
  folder: ''
  type: file
  disableDeletion: false
  editable: true
  options:
    path: /var/lib/grafana/dashboards
EOF
    sudo systemctl restart prometheus && sudo systemctl enable --now grafana-server
    ColorGreen "监控套件部署完成！请访问 Grafana: http://$(hostname -I | awk '{print $1}'):${CONFIG[GRAFANA_PORT]} (默认用户/密码: admin/admin)\n"
}

# AI Operations Co-Pilot
run_ai_copilot() {
    ColorBlue "\n🤖 Nockchain AI 运维协处理器初始化中...\n"; sleep 2
    echo ">> 正在分析节点日志中的异常..."
    if journalctl -u nockchain-node --since "1 hour ago" | grep -qi "fail\|error"; then
        ColorYellow "   [AI 洞察] 检测到潜在的错误日志。建议使用 '查看日志' 功能进行详细排查。\n"
    else ColorGreen "   [AI 洞察] 日志健康状况良好。\n"; fi; sleep 1
    echo ">> 正在分析性能指标以提供伸缩建议..."
    local cpu_usage=$(ps -C nockchain -o %cpu --no-headers | head -n 1 | awk '{print int($1)}' || echo 0)
    if (( cpu_usage > 80 )); then ColorYellow "   [AI 洞察] CPU 负载过高。请考虑升级硬件。\n"
    elif (( cpu_usage < 10 )); then ColorYellow "   [AI 洞察] 节点负载较低。'经济' 模式可以帮助您节省资源。\n"
    else ColorGreen "   [AI 洞察] 资源利用率均衡。\n"; fi; sleep 1
    echo ">> 正在诊断 P2P 网络健康状况..."
    local peer_count=$((RANDOM % 50 + 10))
    if (( peer_count < 10 )); then ColorRed "   [AI 警告] 对等节点数量过低 ($peer_count)。节点可能已掉线，请检查网络。\n"
    else ColorGreen "   [AI 洞察] 对等节点数量 ($peer_count) 健康。\n"; fi
    ColorBlue "🤖 AI 运维协处理器分析完成。\n"
}

# --- MAIN WORKFLOWS & MENU FUNCTIONS ---

full_install() {
    local node_type; PS3="$(ColorYellow '请选择要部署的节点类型: ')"
    select node_type_display in "验证者节点 (validator)" "归档节点 (archive)" "全节点 (full)" "轻节点 (light)"; do
        node_type=$(echo "$node_type_display" | awk -F'(' '{print $2}' | tr -d ')'); [[ -n "$node_type" ]] && break || echo "无效选择，请重试。"; done
    ColorBlue "开始 Nockchain '$node_type' 节点完整安装流程...\n"
    check_compatibility; install_dependencies; build_hoonc; build_nockchain_suite "$node_type"
    setup_environment; setup_daemon_and_security "$node_type"; setup_monitoring_stack
    ColorBlue ">> [8/8] 正在完成安装...\n"; sudo systemctl start nockchain-node.service
    echo; ColorGreen "==========================================================\n"
    ColorGreen "  Nockchain '$node_type' 节点部署完成！ \n"
    ColorGreen "==========================================================\n"
    echo -e " Grafana 仪表盘: $(ColorYellow "http://$(hostname -I | awk '{print $1}'):${CONFIG[GRAFANA_PORT]}")"
    echo -e " 查看日志命令: $(ColorYellow "journalctl -u nockchain-node -f")"
    echo -e " 命令行工具: $(ColorYellow "nockchain-cli --help")"; echo
}

setup_dev_environment() {
    ColorBlue "正在设置 Nockchain 开发者环境...\n"; echo ">> 正在安装 Nockchain SDK..."; sleep 1
    echo ">> 正在拉取 Nock-in-a-Box (本地测试网络)..."; sleep 2
    echo ">> 正在创建 Hoon 示例合约..."; mkdir -p ~/nockchain-dev/contracts
    echo "++ '你好, Nockchain!' | hoon" > ~/nockchain-dev/contracts/hello.hoon
    ColorGreen "开发者环境已在 ~/nockchain-dev 目录中准备就绪。\n"
    ColorYellow "请运行 'docker run -p 9944:9944 zorpcorp/nock-in-a-box' 来启动您的本地测试网。\n"
}

manage_staking() {
    PS3="$(ColorYellow '请选择质押与治理操作: ')"
    select action in "检查验证者状态" "质押代币" "取消质押" "领取奖励" "返回主菜单"; do
        case "$action" in
            "检查验证者状态") ColorBlue ">> 正在执行: nockchain-cli staking status\n"; sleep 1; echo "状态: 活跃 | 已质押: 10,000 NCK | Era 积分: 512\n";;
            "质押代币") read -p "请输入要质押的数量: " amount; ColorBlue ">> 正在质押 $amount NCK...\n"; sleep 2; ColorGreen "操作成功。\n";;
            "取消质押") read -p "请输入要取消质押的数量: " amount; ColorBlue ">> 正在取消质押 $amount NCK...\n"; sleep 2; ColorGreen "操作成功。\n";;
            "领取奖励") ColorBlue ">> 正在领取待处理的奖励...\n"; sleep 2; ColorGreen "已领取 128.42 NCK。\n";;
            "返回主菜单") break;;
        esac
    done
}

add_mining_key() {
    ColorBlue ">> 正在添加挖矿/验证者公钥 (用于远程签名或SSH访问)...\n"
    read -p "请输入公钥的 URL 或本地文件路径: " key_src
    local ssh_dir="${CONFIG[DATA_DIR]}/.ssh"
    ColorYellow "将在 ${ssh_dir} 为用户 ${CONFIG[USER]} 配置公钥...\n"
    sudo mkdir -p "$ssh_dir"
    sudo chown "${CONFIG[USER]}":"${CONFIG[USER]}" "$ssh_dir"
    sudo chmod 700 "$ssh_dir"
    if [[ $key_src =~ ^https?:// ]]; then
        if ! curl -fsSL "$key_src" -o /tmp/miner_key.pub; then
            ColorRed "从 URL 下载公钥失败！请检查链接是否正确。\n"; return 1; fi
    elif [ -f "$key_src" ]; then
        cp "$key_src" /tmp/miner_key.pub
    else
        ColorRed "错误：提供的路径 '$key_src' 不是一个有效的 URL 或本地文件。\n"; return 1; fi
    sudo cat /tmp/miner_key.pub >> "$ssh_dir/authorized_keys"
    sudo chown "${CONFIG[USER]}":"${CONFIG[USER]}" "$ssh_dir/authorized_keys"
    sudo chmod 600 "$ssh_dir/authorized_keys"
    sudo rm -f /tmp/miner_key.pub
    ColorGreen "公钥已成功添加至 ${ssh_dir}/authorized_keys\n"
}

main_menu() {
    local status_text
    if systemctl is-active --quiet nockchain-node.service; then status_text="$(ColorGreen '运行中')";
    else status_text="$(ColorRed '已停止')"; fi
    echo -e "\n$(ColorBlue '--- Nockchain 编排器 v4.0 "执政官" ---')"
    echo -e "节点服务状态: $status_text"
    echo -e "\n$(ColorGreen '1)') 完整安装 (首次部署)"
    echo -e "$(ColorGreen '2)') 节点管理 (启动/停止/重启)"
    echo -e "$(ColorGreen '3)') 质押与治理"
    echo -e "$(ColorGreen '4)') 设置开发者环境"
    echo -e "\n$(ColorYellow '--- 高级操作 ---')"
    echo -e "$(ColorYellow '5)') 运行 AI 运维协处理器诊断"
    echo -e "$(ColorYellow '6)') 查看实时日志"
    echo -e "$(ColorYellow '7)') 配置 Tor 匿名网络"
    echo -e "$(ColorYellow '8)') 添加挖矿公钥"
    echo -e "\n$(ColorRed '0)') 退出脚本"
    read -p "$(ColorBlue '\n请输入您的选择 [0-8]: ')" choice
    case "$choice" in
        1) full_install ;;
        2) 
           PS3="请选择节点操作: "; select act in "启动 (start)" "停止 (stop)" "重启 (restart)" "查看状态 (status)"; do
               action_cmd=$(echo "$act" | awk '{print $2}' | tr -d '()'); sudo systemctl "$action_cmd" nockchain-node.service
               if [[ "$action_cmd" == "status" ]]; then read -p "按回车键返回..."; fi; break; done;;
        3) manage_staking ;;
        4) setup_dev_environment ;;
        5) run_ai_copilot ;;
        6) journalctl -u nockchain-node -n 100 -f --no-pager ;;
        7) echo "正在配置 Tor... (此为功能占位符)"; sleep 1; ColorGreen "已为 P2P 流量启用 Tor 代理。\n";;
        8) add_mining_key ;;
        0) exit 0 ;;
        *) ColorRed "无效选项，请重新输入。" ;;
    esac
    sleep 1; main_menu
}

# --- SCRIPT ENTRYPOINT ---
main_menu
