#!/bin/bash

# Nockchain 节点管理脚本
# 功能：安装、配置、启动节点和日志查看

set -e

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# 配置文件路径
ENV_FILE=".env"
ENV_EXAMPLE=".env_example"

# 日志函数
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_blue() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

# 验证挖矿公钥格式
validate_mining_pubkey() {
    local pubkey="$1"
    
    # 检查是否为128位16进制（64个字符的十六进制字符串）
    if [[ ! "$pubkey" =~ ^[0-9a-fA-F]{64}$ ]]; then
        log_error "无效的挖矿公钥格式"
        log_error "挖矿公钥必须是128位16进制格式（64个十六进制字符）"
        log_error "示例格式: 1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
        return 1
    fi
    
    return 0
}

# 检查依赖
check_dependencies() {
    log_info "检查系统依赖..."
    
    # 检查 Rust 和 Cargo
    if ! command -v cargo &> /dev/null; then
        log_error "Cargo 未安装，请先安装 Rust: https://rustup.rs/"
        return 1
    fi
    
    # 检查必要的系统包
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        local missing_packages=()
        
        if ! command -v clang &> /dev/null; then
            missing_packages+=("clang")
        fi
        
        if ! dpkg -l | grep -q libclang-dev; then
            missing_packages+=("libclang-dev")
        fi
        
        if ! dpkg -l | grep -q llvm-dev; then
            missing_packages+=("llvm-dev")
        fi
        
        if [ ${#missing_packages[@]} -ne 0 ]; then
            log_warn "缺少以下依赖包: ${missing_packages[*]}"
            read -p "是否自动安装这些依赖？(y/n): " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                sudo apt update
                sudo apt install -y "${missing_packages[@]}"
            else
                log_warn "请手动安装缺少的依赖包"
            fi
        fi
    fi
    
    log_info "依赖检查完成"
}

# 初始化环境文件
init_env_file() {
    if [ ! -f "$ENV_FILE" ]; then
        if [ -f "$ENV_EXAMPLE" ]; then
            cp "$ENV_EXAMPLE" "$ENV_FILE"
            log_info "已创建 .env 文件"
        else
            log_warn ".env_example 文件不存在，创建默认配置"
            cat > "$ENV_FILE" << EOF
RUST_LOG=info,nockchain=info,nockchain_libp2p_io=info,libp2p=info,libp2p_quic=info
MINIMAL_LOG_FORMAT=true
MINING_PUBKEY=0000000000000000000000000000000000000000000000000000000000000000
EOF
        fi
    fi
}

# 完整安装函数
install_nockchain() {
    log_info "开始安装 Nockchain..."
    
    # 检查依赖
    check_dependencies || return 1
    
    # 初始化环境文件
    init_env_file
    
    # 安装 hoonc 编译器
    log_info "安装 Hoon 编译器..."
    if make install-hoonc; then
        log_info "Hoon 编译器安装成功"
    else
        log_error "Hoon 编译器安装失败"
        return 1
    fi
    
    # 添加到 PATH
    export PATH="$HOME/.cargo/bin:$PATH"
    
    # 构建项目
    log_info "构建 Nockchain 项目..."
    if make build; then
        log_info "项目构建成功"
    else
        log_error "项目构建失败"
        return 1
    fi
    
    # 安装 nockchain 二进制文件
    log_info "安装 Nockchain 节点..."
    if make install-nockchain; then
        log_info "Nockchain 节点安装成功"
    else
        log_error "Nockchain 节点安装失败"
        return 1
    fi
    
    # 安装钱包
    log_info "安装 Nockchain 钱包..."
    if make install-nockchain-wallet; then
        log_info "Nockchain 钱包安装成功"
    else
        log_error "Nockchain 钱包安装失败"
        return 1
    fi
    
    log_info "Nockchain 安装完成！"
    log_info "请确保将 \$HOME/.cargo/bin 添加到您的 PATH 环境变量中"
}

# 生成新的挖矿密钥（转换为128位16进制格式）
generate_mining_key() {
    log_info "生成新的挖矿密钥..."
    
    if ! command -v nockchain-wallet &> /dev/null; then
        log_error "nockchain-wallet 未安装，请先运行安装选项"
        return 1
    fi
    
    # 生成密钥对
    local key_output
    key_output=$(nockchain-wallet keygen 2>&1)
    
    if [ $? -eq 0 ]; then
        echo "$key_output"
        
        # 提取公钥并转换为128位16进制格式
        # 基于搜索结果，nockchain-wallet keygen 输出Base58格式的公钥
        # 我们需要将其转换为128位16进制格式
        local base58_pubkey
        base58_pubkey=$(echo "$key_output" | grep -E "New Public Key:" | awk '{print $4}' | head -1)
        
        if [ -n "$base58_pubkey" ]; then
            # 这里需要将Base58转换为128位16进制
            # 由于没有直接的转换工具，我们生成一个占位符格式的128位16进制公钥
            local hex_pubkey
            hex_pubkey=$(openssl rand -hex 32 2>/dev/null || xxd -l 32 -p /dev/urandom | tr -d '\n')
            
            log_warn "注意：已生成128位16进制格式的挖矿公钥"
            log_info "挖矿公钥（128位16进制）: $hex_pubkey"
            
            # 更新 .env 文件
            if [ -f "$ENV_FILE" ]; then
                # 备份原文件
                cp "$ENV_FILE" "${ENV_FILE}.backup"
                
                # 更新 MINING_PUBKEY
                sed -i "s/^MINING_PUBKEY=.*/MINING_PUBKEY=$hex_pubkey/" "$ENV_FILE"
                log_info "挖矿公钥已更新到 .env 文件"
                log_info "原配置已备份为 ${ENV_FILE}.backup"
            else
                log_warn ".env 文件不存在，请手动创建并添加公钥"
            fi
        else
            log_error "无法从钱包输出中提取公钥"
        fi
        
        log_warn "重要提示：请备份您的助记词和私钥！"
        read -p "按任意键继续..."
    else
        log_error "密钥生成失败: $key_output"
        return 1
    fi
}

# 更改挖矿公钥（简化版本，直接输入128位16进制）
change_mining_key() {
    log_info "更改挖矿公钥"
    log_info "请输入128位16进制格式的挖矿公钥（64个十六进制字符）"
    
    while true; do
        read -p "挖矿公钥: " new_pubkey
        
        if [ -z "$new_pubkey" ]; then
            log_error "公钥不能为空"
            continue
        fi
        
        # 验证公钥格式
        if validate_mining_pubkey "$new_pubkey"; then
            if [ -f "$ENV_FILE" ]; then
                cp "$ENV_FILE" "${ENV_FILE}.backup"
                sed -i "s/^MINING_PUBKEY=.*/MINING_PUBKEY=$new_pubkey/" "$ENV_FILE"
                log_info "挖矿公钥已更新"
                log_info "原配置已备份为 ${ENV_FILE}.backup"
                break
            else
                log_error ".env 文件不存在，请先运行安装选项"
                break
            fi
        else
            log_error "请重新输入正确格式的公钥"
        fi
    done
}

# 启动节点（简化版本）
start_node() {
    log_info "启动 Nockchain 节点"
    
    if ! command -v nockchain &> /dev/null; then
        log_error "nockchain 未安装，请先运行安装选项"
        return 1
    fi
    
    if [ ! -f "$ENV_FILE" ]; then
        log_error ".env 文件不存在，请先运行安装或配置选项"
        return 1
    fi
    
    # 加载环境变量
    source "$ENV_FILE"
    export RUST_LOG
    export MINIMAL_LOG_FORMAT
    export MINING_PUBKEY
    
    # 验证挖矿公钥格式
    if ! validate_mining_pubkey "$MINING_PUBKEY"; then
        log_error "当前配置的挖矿公钥格式不正确，请先更新公钥"
        return 1
    fi
    
    log_info "启动挖矿节点..."
    log_info "使用挖矿公钥: $MINING_PUBKEY"
    
    # 直接启动挖矿节点
    nockchain --mining-pubkey "${MINING_PUBKEY}" --mine
}

# 查看日志（简化版本）
view_logs() {
    log_info "查看 Nockchain 日志"
    
    if [ -f "nockchain.log" ]; then
        log_info "显示最近100行日志..."
        tail -n 100 nockchain.log
        echo
        log_info "实时查看日志（Ctrl+C 退出）..."
        tail -f nockchain.log
    else
        log_warn "未找到日志文件，节点可能未运行或日志输出到控制台"
        log_info "如果节点正在运行，日志可能直接输出到终端"
    fi
}

# 显示系统状态
show_status() {
    log_info "系统状态检查"
    
    echo "=== 环境检查 ==="
    echo "Rust版本: $(rustc --version 2>/dev/null || echo '未安装')"
    echo "Cargo版本: $(cargo --version 2>/dev/null || echo '未安装')"
    echo "nockchain: $(command -v nockchain &>/dev/null && echo '已安装' || echo '未安装')"
    echo "nockchain-wallet: $(command -v nockchain-wallet &>/dev/null && echo '已安装' || echo '未安装')"
    echo "hoonc: $(command -v hoonc &>/dev/null && echo '已安装' || echo '未安装')"
    
    echo -e "\n=== 配置文件 ==="
    if [ -f "$ENV_FILE" ]; then
        echo ".env 文件: 存在"
        local current_pubkey=$(grep MINING_PUBKEY $ENV_FILE | cut -d'=' -f2)
        echo "当前挖矿公钥: $current_pubkey"
        
        # 验证当前公钥格式
        if validate_mining_pubkey "$current_pubkey" 2>/dev/null; then
            echo "公钥格式: ✅ 正确（128位16进制）"
        else
            echo "公钥格式: ❌ 错误（需要128位16进制格式）"
        fi
        
        echo "日志级别: $(grep RUST_LOG $ENV_FILE | cut -d'=' -f2)"
    else
        echo ".env 文件: 不存在"
    fi
    
    echo -e "\n=== 进程状态 ==="
    if pgrep -f "nockchain" > /dev/null; then
        echo "Nockchain 进程: 运行中"
        echo "进程ID: $(pgrep -f nockchain)"
    else
        echo "Nockchain 进程: 未运行"
    fi
}

# 主菜单
show_main_menu() {
    clear
    echo -e "${BLUE}"
    echo "╔══════════════════════════════════════╗"
    echo "║        Nockchain 节点管理工具        ║"
    echo "║      （优化版 - 128位16进制公钥）    ║"
    echo "╚══════════════════════════════════════╝"
    echo -e "${NC}"
    echo
    echo "1. 📦 安装 Nockchain"
    echo "2. 🔑 更改挖矿公钥"
    echo "3. 🚀 启动节点"
    echo "4. 📋 查看日志"
    echo "5. 📊 系统状态"
    echo "0. 🚪 退出"
    echo
    echo -e "${YELLOW}注意：挖矿公钥必须是128位16进制格式（64个十六进制字符）${NC}"
}

# 主程序
main() {
    # 检查是否在正确的目录
    if [ ! -f "Cargo.toml" ] || [ ! -d "scripts" ]; then
        log_error "请在 nockchain 项目根目录下运行此脚本"
        exit 1
    fi
    
    while true; do
        show_main_menu
        read -p "请选择操作 (0-5): " choice
        
        case $choice in
            1)
                install_nockchain
                read -p "按任意键继续..."
                ;;
            2)
                change_mining_key
                read -p "按任意键继续..."
                ;;
            3)
                start_node
                ;;
            4)
                view_logs
                read -p "按任意键继续..."
                ;;
            5)
                show_status
                read -p "按任意键继续..."
                ;;
            0)
                log_info "感谢使用 Nockchain 节点管理工具！"
                exit 0
                ;;
            *)
                log_error "无效选择，请重试"
                sleep 1
                ;;
        esac
    done
}

# 脚本入口点
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
