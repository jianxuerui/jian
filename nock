#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

## Nockchain 矿工专业版 v3.1.0
## 增强认证安全版

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
CYAN='\033[0;36m'
BLUE='\033[0;34m'
RESET='\033[0m'

# 全局配置
NOCK_DIR="$HOME/.nockchain"
CONFIG_FILE="$NOCK_DIR/miner.conf"
LOG_FILE="$NOCK_DIR/miner.log"
REPO_URL="git@github.com:nockchain/nockchain.git"  # 改为SSH方式
CLONE_TIMEOUT=30

# 初始化环境
init_environment() {
  mkdir -p "$NOCK_DIR"
  [[ -f "$CONFIG_FILE" ]] || {
    cat >"$CONFIG_FILE" <<-EOF
MINING_ADDRESS="0x0000000000000000000000000000000000000000"
RPC_URL="http://127.0.0.1:8545"
MINING_THREADS=$(nproc)
OPT_MODE="auto"
EOF
  }
  source "$CONFIG_FILE"
}

# 安全克隆函数
safe_clone_repo() {
  local repo_dir="$HOME/nockchain"
  echo -e "${CYAN}▶ 正在获取最新代码...${RESET}"
  
  if [[ -d "$repo_dir" ]]; then
    git -C "$repo_dir" pull || {
      echo -e "${RED}更新代码失败，尝试重新克隆...${RESET}"
      rm -rf "$repo_dir"
    }
  fi

  if [[ ! -d "$repo_dir" ]]; then
    echo -e "${YELLOW}检测到需要GitHub访问权限，请选择认证方式："
    echo "1) SSH密钥（默认）"
    echo "2) 个人访问令牌"
    read -rp "➤ 请选择认证方式 [1-2]: " auth_method

    case $auth_method in
      2)
        read -rp "请输入GitHub用户名: " username
        read -sp "请输入访问令牌: " token
        echo
        REPO_URL="https://${username}:${token}@github.com/nockchain/nockchain.git"
        ;;
      *)
        REPO_URL="git@github.com:nockchain/nockchain.git"
        ;;
    esac

    timeout $CLONE_TIMEOUT git clone "$REPO_URL" "$repo_dir" || {
      echo -e "${RED}克隆仓库失败，请检查："
      echo "1. 仓库是否存在: https://github.com/nockchain/nockchain"
      echo "2. SSH密钥是否已添加到GitHub账户"
      echo "3. 访问令牌是否具有repo权限"
      exit 1
    }
  fi
}

# 安装主流程
install_nockchain() {
  echo -e "${CYAN}▶ 开始智能编译流程...${RESET}"
  detect_platform
  manage_dependencies
  safe_clone_repo  # 使用安全克隆函数
  
  cd "$HOME/nockchain"
  perform_optimized_build
  
  install -m755 "target/release/nockchain" "$HOME/.local/bin/"
  echo -e "${GREEN}安装完成! 优化模式: ${YELLOW}$OPT_MODE${RESET}"
}

# （保持其他函数不变，例如show_main_menu、detect_platform等）

# 主程序流程
main() {
  init_environment
  detect_platform
  show_main_menu
}

# 执行入口
main "$@"
