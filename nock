#!/bin/bash

# ========= Nockchain 完整功能管理脚本 v27.0 =========
RESET='\033[0m'
BOLD='\033[1m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
CYAN='\033[0;36m'

NCK_DIR="$HOME/nockchain"
ENV_FILE="$NCK_DIR/.env"
BUILD_LOG="$HOME/nockchain_build.log"
NODE_LOG="$NCK_DIR/logs/nockchain.log"

# ---------- 辅助函数 ----------
pause() { echo; read -n1 -r -p "按任意键返回菜单…" _; }

mem_info() {
  local used total perc
  total=$(grep MemTotal /proc/meminfo | awk '{print $2}')
  free=$(grep MemAvailable /proc/meminfo | awk '{print $2}')
  used=$(( (total-free)/1024 ))
  total=$(( total/1024 ))
  perc=$(( used*100/total ))
  printf "%dMi/%dMi (%d%%)" "$used" "$total" "$perc"
}

log() { echo -e "${BLUE}[*] $*${RESET}"; }
ok()  { echo -e "${GREEN}[✓] $*${RESET}"; }
warn(){ echo -e "${YELLOW}[!] $*${RESET}"; }
err() { echo -e "${RED}[✗] $*${RESET}"; }

# ---------- 安装依赖函数 ----------
install_dependencies() {
  log "安装系统依赖"
  
  # 检查sudo权限
  if ! sudo -n true 2>/dev/null; then
    err "需要sudo权限来安装系统依赖"
    return 1
  fi
  
  # 更新包列表
  sudo apt update -y
  
  # 安装构建依赖
  sudo apt install -y \
    build-essential \
    git \
    curl \
    wget \
    pkg-config \
    clang \
    cmake \
    libssl-dev \
    screen \
    htop
  
  ok "系统依赖安装完成"
}

# ---------- 安装Rust函数 ----------
install_rust() {
  log "安装Rust编程语言"
  
  if ! command -v cargo >/dev/null; then
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    source "$HOME/.cargo/env"
    ok "Rust安装完成"
  else
    ok "Rust已安装: $(rustc --version)"
  fi
  
  # 优化Cargo配置
  mkdir -p "$HOME/.cargo"
  cat > "$HOME/.cargo/config.toml" << 'EOF'
[build]
jobs = 1

[net]
retry = 50
timeout = 3600

[profile.release]
opt-level = 3
lto = "thin"
codegen-units = 1
panic = "abort"

[target.x86_64-unknown-linux-gnu]
rustflags = ["-C", "target-cpu=native"]
EOF
  
  ok "Cargo配置优化完成"
}

# ---------- 完整安装函数 ----------
complete_installation() {
  log "开始完整安装Nockchain"
  echo "=== Nockchain完整安装日志 $(date) ===" > "$BUILD_LOG"
  
  # 步骤1: 安装系统依赖
  if ! install_dependencies; then
    err "依赖安装失败"
    pause
    return 1
  fi
  
  # 步骤2: 安装Rust
  if ! install_rust; then
    err "Rust安装失败"
    pause
    return 1
  fi
  
  # 步骤3: 克隆源码
  log "克隆Nockchain源码"
  if [ ! -d "$NCK_DIR" ]; then
    git clone --depth 1 https://github.com/zorp-corp/nockchain "$NCK_DIR"
  else
    git -C "$NCK_DIR" pull
  fi
  
  # 步骤4: 构建项目
  log "构建Nockchain项目（这可能需要较长时间）"
  cd "$NCK_DIR"
  cargo clean
  
  # 设置构建环境变量
  export RUST_MIN_STACK=16777216
  export CARGO_BUILD_JOBS=1
  export RUSTFLAGS="-C target-cpu=native -C opt-level=3"
  
  # 开始构建
  timeout 14400 cargo build --release 2>&1 | tee "$BUILD_LOG"
  
  if [ $? -eq 0 ]; then
    ok "Nockchain构建成功"
    
    # 安装到用户bin目录
    mkdir -p "$HOME/.local/bin"
    cp target/release/{nockchain,nockchain-wallet,hoonc} "$HOME/.local/bin/" 2>/dev/null || true
    
    # 添加到PATH
    if ! grep -q "$HOME/.local/bin" ~/.bashrc; then
      echo 'export PATH="$HOME/.local/bin:$PATH"' >> ~/.bashrc
    fi
    
    export PATH="$HOME/.local/bin:$PATH"
    
  else
    warn "构建可能失败，请查看日志: $BUILD_LOG"
  fi
  
  # 步骤5: 创建必要目录和文件
  mkdir -p "$NCK_DIR/logs" "$NCK_DIR/.socket"
  
  # 创建环境文件
  if [ ! -f "$ENV_FILE" ]; then
    cat > "$ENV_FILE" <<EOF
MINING_PUBKEY=
RUST_LOG=info
EOF
  fi
  
  ok "完整安装完成"
  pause
}

# ---------- 项目构建函数 ----------
build_project() {
  log "重新构建Nockchain项目"
  
  if [ ! -d "$NCK_DIR" ]; then
    err "项目目录不存在，请先执行完整安装"
    pause
    return 1
  fi
  
  cd "$NCK_DIR"
  
  # 清理旧构建
  cargo clean
  rm -rf target/
  
  # 更新源码
  git pull
  
  # 设置构建环境
  export RUST_MIN_STACK=16777216
  export CARGO_BUILD_JOBS=1
  export RUSTFLAGS="-C target-cpu=native -C opt-level=3"
  
  log "开始构建（预计需要30-60分钟）"
  timeout 14400 cargo build --release 2>&1 | tee "$BUILD_LOG"
  
  if [ $? -eq 0 ]; then
    ok "项目构建成功"
    
    # 更新二进制文件
    mkdir -p "$HOME/.local/bin"
    cp target/release/{nockchain,nockchain-wallet,hoonc} "$HOME/.local/bin/" 2>/dev/null || true
    
    # 验证构建结果
    for binary in hoonc nockchain-wallet nockchain; do
      if [ -f "target/release/$binary" ]; then
        ok "$binary 构建成功"
      else
        warn "$binary 构建失败"
      fi
    done
  else
    err "构建失败，请查看日志: $BUILD_LOG"
  fi
  
  pause
}

# ---------- 内存优化函数 ----------
optimize_memory() {
  log "优化内存配置"
  
  # 设置栈空间
  export RUST_MIN_STACK=33554432  # 32MB
  
  # 检查并配置swap
  total_mem=$(grep MemTotal /proc/meminfo | awk '{print int($2/1024)}')
  swap_total=$(grep SwapTotal /proc/meminfo | awk '{print int($2/1024)}')
  
  if [ "$total_mem" -lt 16384 ] && [ "$swap_total" -lt 8192 ]; then
    if sudo -n true 2>/dev/null; then
      warn "内存不足，自动配置8GB swap"
      sudo fallocate -l 8G /swapfile 2>/dev/null || dd if=/dev/zero of="$HOME/nockchain.swap" bs=1G count=8
      sudo chmod 600 /swapfile 2>/dev/null || chmod 600 "$HOME/nockchain.swap"
      sudo mkswap /swapfile 2>/dev/null || sudo mkswap "$HOME/nockchain.swap" 2>/dev/null
      sudo swapon /swapfile 2>/dev/null || sudo swapon "$HOME/nockchain.swap" 2>/dev/null
      ok "Swap配置完成"
    fi
  fi
  
  ok "内存优化完成"
}

# ---------- 清理socket文件 ----------
clean_socket_files() {
  log "清理socket文件"
  
  # 停止现有进程
  pkill -f nockchain 2>/dev/null || true
  screen -XS nockchain quit 2>/dev/null || true
  sleep 2
  
  # 清理socket目录
  if [ -d "$NCK_DIR/.socket" ]; then
    rm -rf "$NCK_DIR/.socket"/*
  fi
  mkdir -p "$NCK_DIR/.socket"
  chmod 755 "$NCK_DIR/.socket"
  
  # 清理系统socket文件
  find "$HOME" -name "*.sock" -delete 2>/dev/null || true
  find "$HOME" -name "nockchain*.sock" -delete 2>/dev/null || true
  
  ok "Socket文件清理完成"
}

# ---------- 设置挖矿公钥 ----------
set_mining_pubkey() {
  log "设置挖矿公钥"
  
  if [ ! -f "$ENV_FILE" ]; then
    mkdir -p "$NCK_DIR"
    echo "MINING_PUBKEY=" > "$ENV_FILE"
    echo "RUST_LOG=info" >> "$ENV_FILE"
  fi
  
  # 显示当前公钥
  current_key=$(grep "MINING_PUBKEY=" "$ENV_FILE" 2>/dev/null | cut -d'=' -f2)
  if [ -n "$current_key" ]; then
    echo "当前公钥: ${current_key:0:16}...${current_key: -16}"
  fi
  
  read -rp "输入新的128位公钥（留空保持不变）: " key
  
  if [ -z "$key" ]; then
    warn "公钥未更改"
    pause
    return
  fi
  
  key=$(echo "$key" | tr -d '[:space:]' | tr A-F a-f)
  
  if [ ${#key} -eq 128 ] && [[ "$key" =~ ^[0-9a-f]+$ ]]; then
    sed -i "/^MINING_PUBKEY=/d" "$ENV_FILE"
    echo "MINING_PUBKEY=$key" >> "$ENV_FILE"
    ok "公钥已更新"
  else
    err "公钥格式不正确（需要128位16进制）"
  fi
  
  pause
}

# ---------- 启动节点 ----------
start_node() {
  log "启动Nockchain节点"
  
  # 检查环境
  source "$ENV_FILE" 2>/dev/null || true
  if [ -z "$MINING_PUBKEY" ]; then
    err "未设置挖矿公钥，请先设置"
    pause
    return 1
  fi
  
  # 优化内存
  optimize_memory
  
  # 清理socket
  clean_socket_files
  
  # 创建日志目录
  mkdir -p "$NCK_DIR/logs"
  
  # 检查可执行文件
  if ! command -v nockchain >/dev/null && [ ! -f "$NCK_DIR/target/release/nockchain" ]; then
    err "nockchain程序不存在，请先执行安装或构建"
    pause
    return 1
  fi
  
  # 确定使用的可执行文件
  if command -v nockchain >/dev/null; then
    NOCKCHAIN_BIN="nockchain"
  else
    NOCKCHAIN_BIN="$NCK_DIR/target/release/nockchain"
  fi
  
  # 构建启动命令
  START_CMD="RUST_MIN_STACK=33554432 RUST_LOG=info $NOCKCHAIN_BIN \
    --mining-pubkey $MINING_PUBKEY \
    --mine \
    --peer /ip4/95.216.102.60/udp/3006/quic-v1 \
    --peer /ip4/65.109.156.108/udp/3006/quic-v1 \
    --peer /ip4/65.21.67.175/udp/3006/quic-v1 \
    --peer /ip4/65.109.156.172/udp/3006/quic-v1 \
    --peer /ip4/34.174.22.166/udp/3006/quic-v1 \
    --npc-socket $NCK_DIR/.socket/nockchain.sock \
    --bind /ip4/0.0.0.0/udp/3006/quic-v1"
  
  # 启动节点
  cd "$NCK_DIR"
  if command -v screen >/dev/null; then
    screen -dmS nockchain bash -c "$START_CMD 2>&1 | tee $NODE_LOG"
    sleep 3
    if screen -list | grep -qw "nockchain"; then
      ok "节点已启动 (screen会话: nockchain)"
      ok "查看日志: screen -r nockchain"
    else
      err "节点启动失败"
    fi
  else
    nohup bash -c "$START_CMD" > "$NODE_LOG" 2>&1 &
    ok "节点已后台启动"
  fi
  
  pause
}

# ---------- 查看日志 ----------
view_logs() {
  if command -v screen >/dev/null && screen -list | grep -qw "nockchain"; then
    warn "将进入screen会话查看实时日志，按Ctrl+A+D退出"
    sleep 2
    screen -r nockchain
  elif [ -f "$NODE_LOG" ]; then
    tail -n 100 -f "$NODE_LOG"
  else
    err "日志文件不存在"
  fi
  pause
}

# ---------- 停止节点 ----------
stop_node() {
  log "停止Nockchain节点"
  
  # 停止screen会话
  if screen -list | grep -qw "nockchain"; then
    screen -S nockchain -X quit
    ok "Screen会话已终止"
  fi
  
  # 停止进程
  if pgrep -f "nockchain.*--mine" >/dev/null; then
    pkill -f "nockchain.*--mine"
    ok "挖矿进程已停止"
  fi
  
  # 清理socket文件
  if [ -d "$NCK_DIR/.socket" ]; then
    rm -rf "$NCK_DIR/.socket"/*
    ok "Socket文件已清理"
  fi
  
  pause
}

# ---------- 检查状态 ----------
check_status() {
  echo -e "${BLUE}=== 系统状态 ===${RESET}"
  echo "内存使用: $(mem_info)"
  echo "CPU核心: $(nproc)"
  
  echo -e "\n${BLUE}=== 组件状态 ===${RESET}"
  for binary in hoonc nockchain-wallet nockchain; do
    if command -v "$binary" >/dev/null; then
      ok "$binary: 已安装 ($(command -v $binary))"
    elif [ -f "$NCK_DIR/target/release/$binary" ]; then
      ok "$binary: 已构建 ($NCK_DIR/target/release/$binary)"
    else
      warn "$binary: 未找到"
    fi
  done
  
  echo -e "\n${BLUE}=== 节点状态 ===${RESET}"
  if screen -list 2>/dev/null | grep -qw "nockchain"; then
    ok "节点运行中 (screen会话)"
  elif pgrep -f "nockchain.*--mine" >/dev/null; then
    ok "节点运行中 (后台进程)"
  else
    warn "节点未运行"
  fi
  
  echo -e "\n${BLUE}=== 配置状态 ===${RESET}"
  if [ -f "$ENV_FILE" ]; then
    source "$ENV_FILE"
    if [ -n "$MINING_PUBKEY" ]; then
      ok "挖矿公钥: ${MINING_PUBKEY:0:16}...${MINING_PUBKEY: -16}"
    else
      warn "挖矿公钥: 未设置"
    fi
  else
    warn "配置文件不存在"
  fi
  
  pause
}

# ---------- 主菜单 ----------
show_menu() {
  clear
  echo -e "${CYAN}${BOLD}"
  echo "================================================"
  echo "        Nockchain 完整功能管理脚本 v27.0"
  echo "================================================"
  echo -e "${RESET}"
  echo ""
  echo -e "${GREEN}🔧 安装构建:${RESET}"
  echo "  1) 完整安装Nockchain（依赖+Rust+构建）"
  echo "  2) 重新构建项目"
  echo ""
  echo -e "${GREEN}🔑 钱包管理:${RESET}"
  echo "  3) 设置/更改挖矿公钥"
  echo ""
  echo -e "${GREEN}⚡ 节点管理:${RESET}"
  echo "  4) 启动挖矿节点"
  echo "  5) 查看节点日志"
  echo "  6) 停止挖矿节点"
  echo ""
  echo -e "${GREEN}🔍 状态监控:${RESET}"
  echo "  7) 检查系统状态"
  echo ""
  echo "  0) 退出脚本"
  echo ""
  echo -e "${YELLOW}首次使用建议: 1 → 3 → 4 → 5${RESET}"
  echo ""
}

# ---------- 主循环 ----------
while true; do
  show_menu
  read -rp "请选择操作 (0-7): " choice
  
  case $choice in
    1) complete_installation ;;
    2) build_project ;;
    3) set_mining_pubkey ;;
    4) start_node ;;
    5) view_logs ;;
    6) stop_node ;;
    7) check_status ;;
    0) 
      echo -e "${GREEN}感谢使用Nockchain管理脚本！${RESET}"
      exit 0 
      ;;
    *) 
      warn "无效选项，请重新选择"
      sleep 1 
      ;;
  esac
done
