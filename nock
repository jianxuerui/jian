#!/usr/bin/env sh
# Ethminer 矿工专业工具 v7.6 (终极解决方案)
# 策略：完全放弃Hunter。依赖系统包管理器提供大型库(Boost, OpenSSL)，
# 然后从 ethminer 项目自带的 externals/ 目录中编译所有其他依赖 (CLI11, jsoncpp, ethash)，
# 从根本上保证版本100%兼容，并杜绝一切网络下载问题。

set -euo pipefail
IFS='
'

# --- 全局配置 ---
CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/ethminer-tool"
CACHE_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/ethminer-tool"
REPO_PATH="$HOME/ethminer"

LOG_FILE="$CACHE_DIR/miner.log"
CONFIG_FILE="$CONFIG_DIR/ethminer.conf"
PID_FILE="$CACHE_DIR/miner.pid"

# --- 动态命令配置 ---
SUDO_CMD=""
if [ "$(id -u)" -ne 0 ]; then
  SUDO_CMD="sudo"
fi

# --- 环境与依赖 ---

get_cpu_cores() {
  case "$(uname -s)" in
    Linux*)  nproc 2>/dev/null || echo "2" ;;
    *)       echo "2" ;;
  esac
}

init_environment() {
  mkdir -p "$CONFIG_DIR" "$CACHE_DIR"
  if [ ! -f "$CONFIG_FILE" ]; then
    echo "▶ 首次运行，正在创建默认配置文件..."
    cat > "$CONFIG_FILE" <<EOF
# ethminer 配置文件
MINING_ADDRESS="0x0000000000000000000000000000000000000000"
POOL_URL="stratum+tcp://etc.2miners.com:1010"
WORKER_NAME="myrig1"
EOF
    echo "✔ 默认配置已创建于: $CONFIG_FILE"
    echo "请务必通过菜单选项 '2' 或 '3' 修改您的挖矿地址和矿池！"
    sleep 3
  fi
}

# --- 编译与安装核心流程 (终极版) ---
install_ethminer() {
  PKG_MANAGER=""
  while [ -z "$PKG_MANAGER" ]; do
    clear; echo "为正确安装依赖，请选择您的操作系统包管理器："; echo "-----------------------------------------------"; echo "  1) apt (适用于 Debian, Ubuntu 等)"; echo "  2) dnf/yum (适用于 Fedora, CentOS, RHEL)"; echo "-----------------------------------------------"; printf "请输入您的选择 [1-2]: "; read -r sys_choice
    case $sys_choice in 1) PKG_MANAGER="apt" ;; 2) PKG_MANAGER="dnf" ;; *) echo "输入无效。" && sleep 1 ;; esac
  done

  echo "✔ 系统选择完成: $PKG_MANAGER"
  
  echo "▶ 步骤 1/4: 安装基础工具和系统级大型依赖 (Boost, OpenSSL)..."
  case "$PKG_MANAGER" in
    apt)
      $SUDO_CMD apt-get update
      # Debian/Ubuntu 仓库很全，可以直接安装大部分依赖
      $SUDO_CMD apt-get install -y git cmake build-essential libboost-all-dev libssl-dev
      ;;
    dnf)
      echo "--> 正在启用 EPEL 和 CRB/PowerTools 仓库..."
      $SUDO_CMD "$PKG_MANAGER" -y install epel-release
      REPO_ID=$(dnf repolist --all | grep -i -E 'builder|powertools|crb' | head -n 1 | awk '{print $1}')
      if [ -n "$REPO_ID" ]; then $SUDO_CMD dnf config-manager --set-enabled "$REPO_ID"; fi
      
      $SUDO_CMD "$PKG_MANAGER" install -y git cmake gcc-c++ make boost-devel openssl-devel
      ;;
  esac
  echo "✔ 基础环境和系统依赖安装完成。"
  
  echo "▶ 步骤 2/4: 下载 ethminer 及其所有绑定的依赖源码..."
  if [ ! -d "$REPO_PATH/externals" ]; then
    echo "--> 正在克隆 ethminer 仓库 (包含所有依赖子模块，此步需要网络)..."
    rm -rf "$REPO_PATH" # 清理不完整的旧克隆
    if ! git clone --recursive https://github.com/ethereum-mining/ethminer.git "$REPO_PATH"; then
      echo "克隆失败，请检查网络连接。" >&2; exit 1;
    fi
  else
    echo "--> ethminer 源码已存在，跳过下载。"
  fi
  echo "✔ 源码准备就绪。"

  echo "▶ 步骤 3/4: 编译 ethminer 自带的依赖库 (保证版本兼容)..."
  # --- 编译 CLI11 ---
  echo "--> [1/3] 正在从自带源码编译: CLI11..."
  (
    cd "$REPO_PATH/externals/CLI11"; mkdir -p build; cd build
    cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local
    $SUDO_CMD make install
  ) || { echo "!! 致命错误：编译自带的 CLI11 失败。"; exit 1; }
  
  # --- 编译 jsoncpp ---
  echo "--> [2/3] 正在从自带源码编译: jsoncpp..."
  (
    cd "$REPO_PATH/externals/jsoncpp"; mkdir -p build; cd build
    cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local -DBUILD_STATIC_LIBS=OFF -DJSONCPP_WITH_TESTS=OFF
    make -j"$(get_cpu_cores)"
    $SUDO_CMD make install
  ) || { echo "!! 致命错误：编译自带的 jsoncpp 失败。"; exit 1; }

  # --- 编译 ethash ---
  echo "--> [3/3] 正在从自带源码编译: ethash (解决API不兼容问题的关键)..."
  (
    cd "$REPO_PATH/externals/ethash"; mkdir -p build; cd build
    cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local -DBUILD_ETHASH_TESTS=OFF
    make -j"$(get_cpu_cores)"
    $SUDO_CMD make install
  ) || { echo "!! 致命错误：编译自带的 ethash 失败。"; exit 1; }
  
  echo "✔ 所有自带依赖编译并安装完成。"
  echo "--> 刷新动态链接库缓存..."
  $SUDO_CMD ldconfig

  echo "▶ 步骤 4/4: 最终编译 ethminer 主程序..."
  (
    cd "$REPO_PATH"
    mkdir -p build
    cd build
    # 禁用Hunter，并告诉CMake在/usr/local查找我们刚刚安装的所有库
    cmake .. -DETHASHCL=OFF -DETHASHCUDA=OFF -DHUNTER_ENABLED=OFF -DCMAKE_PREFIX_PATH=/usr/local
    make -j"$(get_cpu_cores)"
  ) || { echo "!! 致命错误：编译 ethminer 失败。请检查以上日志。"; exit 1; }
  echo "✔ 编译完成！"

  echo "▶ 安装程序..."
  mkdir -p "${HOME}/.local/bin"
  install -m755 "$REPO_PATH/build/ethminer/ethminer" "${HOME}/.local/bin/"
  echo "✔ ethminer 已成功安装到 ${HOME}/.local/bin/"

  if ! echo "$PATH" | grep -q "$HOME/.local/bin"; then
    echo "----------------------------------------------------------------------"
    echo "重要提示: '${HOME}/.local/bin' 不在你的 PATH 环境变量中。"
    echo "请运行以下命令，或将其加入 ~/.bashrc 文件："
    echo "  export PATH=\"\$HOME}/.local/bin:\$PATH\""
    echo "----------------------------------------------------------------------"
  fi
  echo "按任意键返回主菜单..."
  read -n 1
}

# --- 日常管理功能 (无改动) ---
# ... (The rest of the script is identical to previous versions)
change_mining_address(){ . "$CONFIG_FILE"; echo "--- 更改挖矿地址 ---"; echo "当前挖矿地址: $MINING_ADDRESS"; printf "➤ 请输入新的挖矿地址 (或直接回车取消): "; read -r new_address; if [ -z "$new_address" ]; then echo "操作已取消。"; sleep 2; return; fi; if ! echo "$new_address" | grep -Eq '^0x[a-fA-F0-9]{40}$'; then echo "✘ 错误：地址格式无效。"; sleep 3; return 1; fi; sed -i.bak "s|^MINING_ADDRESS=.*|MINING_ADDRESS=\"$new_address\"|" "$CONFIG_FILE"; rm -f "${CONFIG_FILE}.bak"; echo "✔ 挖矿地址已成功更新！"; sleep 2; }
edit_config(){ echo "▶ 打开配置文件进行编辑..."; if command -v nano >/dev/null; then nano "$CONFIG_FILE"; elif command -v vi >/dev/null; then vi "$CONFIG_FILE"; else echo "未找到编辑器。请手动编辑: $CONFIG_FILE"; fi; echo "配置完成。"; sleep 2; }
start_miner(){ if [ -f "$PID_FILE" ] && ps -p "$(cat "$PID_FILE")" > /dev/null; then echo "矿机已经在运行 (PID: $(cat "$PID_FILE"))。"; sleep 2; return; fi; echo "▶ 正在启动矿机..."; if ! command -v ethminer >/dev/null; then echo "错误: 'ethminer' 命令未找到。请先安装(选项 1)。"; sleep 2; return 1; fi; . "$CONFIG_FILE"; POOL_HOST_PORT=$(echo "$POOL_URL" | sed 's|stratum+tcp://||'); STRATUM_URI="stratum+tcp://${MINING_ADDRESS}.${WORKER_NAME}@${POOL_HOST_PORT}"; echo "使用的矿池地址: $STRATUM_URI"; echo "日志文件位于: $LOG_FILE"; nohup ethminer -P "$STRATUM_URI" >"$LOG_FILE" 2>&1 & MINER_PID=$!; echo "$MINER_PID" > "$PID_FILE"; sleep 1; if ps -p "$MINER_PID" > /dev/null; then echo "✔ 矿机已启动，进程ID: $MINER_PID"; else echo "✘ 矿机启动失败，请查看日志: $LOG_FILE"; rm -f "$PID_FILE"; fi; sleep 2; }
stop_miner(){ if [ ! -f "$PID_FILE" ]; then echo "矿机未在运行。"; sleep 2; return; fi; PID=$(cat "$PID_FILE"); if ps -p "$PID" > /dev/null; then echo "▶ 正在停止矿机 (PID: $PID)..."; kill "$PID"; sleep 2; if ! ps -p "$PID" > /dev/null; then echo "✔ 矿机已停止。"; rm -f "$PID_FILE"; else echo "等待超时，强制停止..."; kill -9 "$PID"; rm -f "$PID_FILE"; fi; else echo "PID $PID 不存在。清理PID文件..."; rm -f "$PID_FILE"; fi; sleep 2; }
show_monitor(){ if [ -f "$LOG_FILE" ]; then echo "▶ 实时监控日志 (按 Ctrl+C 退出)..."; tail -f "$LOG_FILE"; else echo "日志文件不存在。"; sleep 2; fi; }

show_menu() {
  while true; do
    if [ -f "$CONFIG_FILE" ]; then . "$CONFIG_FILE"; fi
    clear
    cat << "EOF"
╔════════════════════════════════════════════════╗
║           Ethminer 矿工专业工具 v7.6           ║
╠════════════════════════════════════════════════╣
║ 1) 安装/更新 ethminer  2) 更改挖矿地址          ║
║ 3) 编辑矿池配置      4) 启动/停止矿机          ║
║ 5) 查看实时日志      0) 退出                   ║
╚════════════════════════════════════════════════╝
EOF
    echo; if [ -f "$PID_FILE" ] && ps -p "$(cat "$PID_FILE")" > /dev/null; then echo "当前状态: 运行中 (PID: $(cat "$PID_FILE"))"; else echo "当前状态: 已停止"; fi; echo "挖矿地址: ${MINING_ADDRESS:-未设置}"; echo "矿池地址: ${POOL_URL:-未设置}"; echo; printf "➤ 请输入选项 [0-5]: "; read -r choice
    case $choice in
      1) install_ethminer ;; 2) change_mining_address ;; 3) edit_config ;;
      4) if [ -f "$PID_FILE" ] && ps -p "$(cat "$PID_FILE")" > /dev/null; then stop_miner; else start_miner; fi ;;
      5) show_monitor ;; 0) echo "感谢使用，再见！"; exit 0 ;; *) echo "无效选项。"; sleep 1 ;;
    esac
  done
}

# --- 主程序入口 ---
main() {
  init_environment
  show_menu
}

main "$@"
