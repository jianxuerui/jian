#!/bin/bash

# Nockchain Mining Optimization Script
# 基于Nockchain优化分析开发的全功能挖矿脚本
# Version: 1.0.0

set -e

# Color definitions for better UI
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Configuration variables
NOCKCHAIN_DIR="$HOME/nockchain"
WALLET_BACKUP_DIR="$HOME/nockchain_backup"
SCREEN_SESSION_NAME="nockchain_miner"
LOG_FILE="$NOCKCHAIN_DIR/mining.log"

# System optimization parameters
RUST_MIN_STACK_SIZE=$((83 * 1024 * 1024))  # 83MB stack size
MAX_FILE_DESCRIPTORS=65536
MAX_PEER_CONNECTIONS=4000
BIND_PORT=3006

# Peer list for optimal network connections
PEER_LIST=(
    "/ip4/95.216.102.60/udp/3006/quic-v1"
    "/ip4/65.109.156.108/udp/3006/quic-v1"
    "/ip4/65.21.67.175/udp/3006/quic-v1"
    "/ip4/65.109.156.172/udp/3006/quic-v1"
    "/ip4/34.174.22.166/udp/3006/quic-v1"
    "/ip4/34.95.155.151/udp/30000/quic-v1"
    "/ip4/34.18.98.38/udp/30000/quic-v1"
)

print_banner() {
    echo -e "${CYAN}"
    echo "╔══════════════════════════════════════════════════════════════╗"
    echo "║                    Nockchain Mining Optimizer               ║"
    echo "║                       Version 1.0.0                         ║"
    echo "║            基于ZK-Proof of Work的挖矿优化脚本                ║"
    echo "╚══════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
}

print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_section() {
    echo -e "\n${BLUE}=== $1 ===${NC}"
}

check_system_requirements() {
    print_section "系统要求检查"
    
    # Check available RAM
    local ram_gb=$(free -g | awk '/^Mem:/{print $2}')
    if [ "$ram_gb" -lt 32 ]; then
        print_warning "RAM不足32GB，当前：${ram_gb}GB，推荐64GB+"
    else
        print_status "RAM检查通过：${ram_gb}GB"
    fi
    
    # Check CPU cores
    local cpu_cores=$(nproc)
    if [ "$cpu_cores" -lt 6 ]; then
        print_warning "CPU核心数不足6个，当前：${cpu_cores}个"
    else
        print_status "CPU检查通过：${cpu_cores}个核心"
    fi
    
    # Check available disk space
    local disk_space=$(df -BG "$HOME" | awk 'NR==2{gsub(/G/,"",$4); print $4}')
    if [ "$disk_space" -lt 200 ]; then
        print_warning "可用磁盘空间不足200GB，当前：${disk_space}GB"
    else
        print_status "磁盘空间检查通过：${disk_space}GB"
    fi
}

optimize_system_settings() {
    print_section "系统优化设置"
    
    # Set stack size
    export RUST_MIN_STACK="$RUST_MIN_STACK_SIZE"
    print_status "设置RUST_MIN_STACK为83MB"
    
    # Increase file descriptor limits
    if ! grep -q "^* soft nofile $MAX_FILE_DESCRIPTORS" /etc/security/limits.conf 2>/dev/null; then
        echo "* soft nofile $MAX_FILE_DESCRIPTORS" | sudo tee -a /etc/security/limits.conf >/dev/null
        echo "* hard nofile $MAX_FILE_DESCRIPTORS" | sudo tee -a /etc/security/limits.conf >/dev/null
        print_status "增加文件描述符限制到$MAX_FILE_DESCRIPTORS"
    fi
    
    # Set current session limits
    ulimit -n "$MAX_FILE_DESCRIPTORS" 2>/dev/null || print_warning "无法设置会话文件描述符限制"
    
    # Add environment variables to bashrc if not present
    if ! grep -q "RUST_MIN_STACK" ~/.bashrc; then
        echo "export RUST_MIN_STACK=$RUST_MIN_STACK_SIZE" >> ~/.bashrc
        echo "export PATH=\"\$HOME/.cargo/bin:\$PATH\"" >> ~/.bashrc
        print_status "添加环境变量到~/.bashrc"
    fi
}

install_dependencies() {
    print_section "安装系统依赖"
    
    # Update package list
    sudo apt update
    
    # Install required packages
    sudo apt install -y \
        screen curl iptables build-essential git wget lz4 jq make gcc nano \
        automake autoconf tmux htop nvme-cli libgbm1 pkg-config libssl-dev \
        libleveldb-dev tar clang bsdmainutils ncdu unzip llvm-dev libclang-dev
    
    print_status "系统依赖安装完成"
}

install_rust() {
    print_section "安装Rust开发环境"
    
    if ! command -v rustc &> /dev/null; then
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        source "$HOME/.cargo/env"
        rustup default stable
        print_status "Rust安装完成"
    else
        print_status "Rust已安装，版本：$(rustc --version)"
    fi
}

install_nockchain() {
    print_section "下载并构建Nockchain"
    
    # Clone repository if not exists
    if [ ! -d "$NOCKCHAIN_DIR" ]; then
        git clone https://github.com/zorp-corp/nockchain "$NOCKCHAIN_DIR"
        print_status "Nockchain代码库下载完成"
    else
        print_status "Nockchain目录已存在，跳过下载"
    fi
    
    cd "$NOCKCHAIN_DIR"
    
    # Copy environment file
    if [ ! -f ".env" ]; then
        cp .env_example .env
        print_status "环境配置文件已创建"
    fi
    
    # Build process with optimizations
    print_status "开始构建过程（这可能需要较长时间）..."
    
    export RUST_MIN_STACK="$RUST_MIN_STACK_SIZE"
    
    # Install hoonc compiler
    make install-hoonc
    export PATH="$HOME/.cargo/bin:$PATH"
    
    # Build the project
    make build
    
    # Install wallet
    make install-nockchain-wallet
    export PATH="$HOME/.cargo/bin:$PATH"
    
    # Install nockchain
    make install-nockchain
    export PATH="$HOME/.cargo/bin:$PATH"
    
    print_status "Nockchain构建完成"
}

setup_wallet() {
    print_section "钱包设置"
    
    cd "$NOCKCHAIN_DIR"
    
    # Create backup directory
    mkdir -p "$WALLET_BACKUP_DIR"
    
    # Check if wallet already exists
    if [ -f "$WALLET_BACKUP_DIR/wallet_info.txt" ]; then
        echo -e "${YELLOW}发现现有钱包备份，是否使用现有钱包? (y/n):${NC}"
        read -r use_existing
        if [[ $use_existing =~ ^[Yy]$ ]]; then
            if [ -f "$WALLET_BACKUP_DIR/wallet_info.txt" ]; then
                MINING_PUBKEY=$(grep "Public Key:" "$WALLET_BACKUP_DIR/wallet_info.txt" | cut -d: -f2 | tr -d ' ')
                print_status "使用现有钱包，公钥：$MINING_PUBKEY"
            fi
        else
            generate_new_wallet
        fi
    else
        generate_new_wallet
    fi
    
    # Update .env file
    if [ -n "$MINING_PUBKEY" ]; then
        sed -i "s/^MINING_PUBKEY=.*/MINING_PUBKEY=$MINING_PUBKEY/" .env
        print_status "挖矿公钥已更新到.env文件"
        
        # Verify the setting
        local current_key=$(grep "MINING_PUBKEY=" .env | cut -d= -f2)
        print_status "当前配置的挖矿公钥：$current_key"
    fi
}

generate_new_wallet() {
    print_status "生成新钱包..."
    
    # Generate new wallet
    wallet_output=$(nockchain-wallet keygen 2>&1)
    
    # Extract information from output
    MINING_PUBKEY=$(echo "$wallet_output" | grep -E "New Public Key:" | awk -F': ' '{print $2}' | tr -d ' ')
    private_key=$(echo "$wallet_output" | grep -E "New Private Key:" | awk -F': ' '{print $2}' | tr -d ' ')
    chain_code=$(echo "$wallet_output" | grep -E "Chain Code:" | awk -F': ' '{print $2}' | tr -d ' ')
    seed_phrase=$(echo "$wallet_output" | grep -A10 "Seed phrase:" | tail -n +2)
    
    # Save wallet information
    {
        echo "Nockchain Wallet Information"
        echo "=========================="
        echo "Generated: $(date)"
        echo "Public Key: $MINING_PUBKEY"
        echo "Private Key: $private_key"
        echo "Chain Code: $chain_code"
        echo ""
        echo "Seed Phrase:"
        echo "$seed_phrase"
    } > "$WALLET_BACKUP_DIR/wallet_info.txt"
    
    print_status "新钱包生成完成"
    print_warning "重要：钱包信息已保存到 $WALLET_BACKUP_DIR/wallet_info.txt"
    print_warning "请务必备份此文件！"
    
    # Export keys
    nockchain-wallet export-keys
    if [ -f "keys.export" ]; then
        mv keys.export "$WALLET_BACKUP_DIR/"
        print_status "钱包密钥已导出到 $WALLET_BACKUP_DIR/keys.export"
    fi
}

change_mining_pubkey() {
    print_section "更改挖矿公钥"
    
    cd "$NOCKCHAIN_DIR"
    
    # Show current key
    local current_key=$(grep "MINING_PUBKEY=" .env | cut -d= -f2)
    echo -e "${CYAN}当前挖矿公钥：${NC}$current_key"
    
    echo -e "\n${YELLOW}请输入新的挖矿公钥（128位16进制格式或Base58格式）：${NC}"
    read -r new_pubkey
    
    # Validate key format
    if [[ ${#new_pubkey} -eq 128 && $new_pubkey =~ ^[0-9a-fA-F]+$ ]]; then
        print_status "检测到128位16进制格式公钥"
    elif [[ ${#new_pubkey} -gt 40 && $new_pubkey =~ ^[1-9A-HJ-NP-Za-km-z]+$ ]]; then
        print_status "检测到Base58格式公钥"
    else
        print_error "无效的公钥格式！"
        return 1
    fi
    
    # Update .env file
    sed -i "s/^MINING_PUBKEY=.*/MINING_PUBKEY=$new_pubkey/" .env
    print_status "挖矿公钥已更新"
    
    # Verify the change
    local updated_key=$(grep "MINING_PUBKEY=" .env | cut -d= -f2)
    print_status "新的挖矿公钥：$updated_key"
}

start_mining_node() {
    print_section "启动挖矿节点"
    
    cd "$NOCKCHAIN_DIR"
    
    # Check if mining session already exists
    if screen -list | grep -q "$SCREEN_SESSION_NAME"; then
        print_warning "挖矿节点已在运行中"
        echo -e "${YELLOW}是否重启挖矿节点? (y/n):${NC}"
        read -r restart_node
        if [[ $restart_node =~ ^[Yy]$ ]]; then
            screen -X -S "$SCREEN_SESSION_NAME" quit 2>/dev/null || true
            sleep 2
        else
            return 0
        fi
    fi
    
    # Get current mining public key
    local mining_pubkey=$(grep "MINING_PUBKEY=" .env | cut -d= -f2)
    if [ -z "$mining_pubkey" ]; then
        print_error "未找到挖矿公钥，请先设置钱包"
        return 1
    fi
    
    # Prepare optimized mining command
    local peer_args=""
    for peer in "${PEER_LIST[@]}"; do
        peer_args="$peer_args --peer $peer"
    done
    
    # Create optimized mining script
    cat > mining_optimized.sh << EOF
#!/bin/bash
export RUST_MIN_STACK=$RUST_MIN_STACK_SIZE
export RUST_LOG=info
export PATH="\$HOME/.cargo/bin:\$PATH"

cd "$NOCKCHAIN_DIR"

nockchain --mining-pubkey $mining_pubkey \\
    --mine \\
    $peer_args \\
    --npc-socket .socket/nockchain.sock \\
    --bind /ip4/0.0.0.0/udp/$BIND_PORT/quic-v1 \\
    --max-established-incoming 1000 \\
    --max-established-outgoing 1000 \\
    --max-established $MAX_PEER_CONNECTIONS \\
    --max-established-per-peer 10 \\
    2>&1 | tee "$LOG_FILE"
EOF
    
    chmod +x mining_optimized.sh
    
    # Start mining in screen session
    screen -dmS "$SCREEN_SESSION_NAME" bash -c "./mining_optimized.sh"
    
    print_status "挖矿节点已启动"
    print_status "会话名称：$SCREEN_SESSION_NAME"
    print_status "使用 'screen -r $SCREEN_SESSION_NAME' 查看挖矿进程"
    print_status "使用 Ctrl+A+D 退出screen会话（保持挖矿运行）"
    
    sleep 3
    print_status "节点状态检查..."
    if screen -list | grep -q "$SCREEN_SESSION_NAME"; then
        print_status "挖矿节点正在运行中"
    else
        print_error "挖矿节点启动失败，请检查日志"
    fi
}

view_mining_logs() {
    print_section "查看挖矿日志"
    
    if [ ! -f "$LOG_FILE" ]; then
        print_warning "日志文件不存在，请先启动挖矿节点"
        return 1
    fi
    
    echo -e "${CYAN}实时挖矿日志（按Ctrl+C退出）：${NC}\n"
    tail -f "$LOG_FILE"
}

check_wallet_balance() {
    print_section "查看钱包余额"
    
    cd "$NOCKCHAIN_DIR"
    
    local mining_pubkey=$(grep "MINING_PUBKEY=" .env | cut -d= -f2)
    if [ -z "$mining_pubkey" ]; then
        print_error "未找到挖矿公钥"
        return 1
    fi
    
    if [ -S ".socket/nockchain.sock" ]; then
        print_status "查询钱包余额..."
        nockchain-wallet --nockchain-socket "$PWD/.socket/nockchain.sock" list-notes-by-pubkey -p "$mining_pubkey" 2>/dev/null || print_warning "无法连接到节点或查询余额"
    else
        print_warning "节点未运行，无法查询余额"
    fi
}

check_system_status() {
    print_section "系统状态监控"
    
    echo -e "${CYAN}CPU使用率：${NC}"
    top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1
    
    echo -e "\n${CYAN}内存使用情况：${NC}"
    free -h
    
    echo -e "\n${CYAN}磁盘使用情况：${NC}"
    df -h "$HOME"
    
    echo -e "\n${CYAN}网络连接状态：${NC}"
    if screen -list | grep -q "$SCREEN_SESSION_NAME"; then
        echo "挖矿节点：运行中"
    else
        echo "挖矿节点：未运行"
    fi
    
    echo -e "\n${CYAN}最近挖矿日志（最后10行）：${NC}"
    if [ -f "$LOG_FILE" ]; then
        tail -10 "$LOG_FILE"
    else
        echo "无日志文件"
    fi
}

stop_mining() {
    print_section "停止挖矿"
    
    if screen -list | grep -q "$SCREEN_SESSION_NAME"; then
        screen -X -S "$SCREEN_SESSION_NAME" quit
        print_status "挖矿节点已停止"
    else
        print_warning "挖矿节点未运行"
    fi
}

show_menu() {
    clear
    print_banner
    echo -e "${WHITE}请选择操作：${NC}\n"
    echo -e "${GREEN}1.${NC} 安装Nockchain（完整安装）"
    echo -e "${GREEN}2.${NC} 更改挖矿公钥"
    echo -e "${GREEN}3.${NC} 启动挖矿节点"
    echo -e "${GREEN}4.${NC} 查看挖矿日志"
    echo -e "${GREEN}5.${NC} 查看钱包余额"
    echo -e "${GREEN}6.${NC} 停止挖矿"
    echo -e "${GREEN}7.${NC} 系统状态检查"
    echo -e "${GREEN}8.${NC} 系统优化设置"
    echo -e "${GREEN}0.${NC} 退出"
    echo ""
}

main() {
    while true; do
        show_menu
        echo -e "${YELLOW}请输入选项 [0-8]:${NC} "
        read -r choice
        
        case $choice in
            1)
                check_system_requirements
                optimize_system_settings
                install_dependencies
                install_rust
                install_nockchain
                setup_wallet
                print_status "Nockchain安装完成！"
                read -p "按回车键继续..."
                ;;
            2)
                change_mining_pubkey
                read -p "按回车键继续..."
                ;;
            3)
                start_mining_node
                read -p "按回车键继续..."
                ;;
            4)
                view_mining_logs
                ;;
            5)
                check_wallet_balance
                read -p "按回车键继续..."
                ;;
            6)
                stop_mining
                read -p "按回车键继续..."
                ;;
            7)
                check_system_status
                read -p "按回车键继续..."
                ;;
            8)
                optimize_system_settings
                read -p "按回车键继续..."
                ;;
            0)
                print_status "感谢使用Nockchain挖矿优化脚本！"
                exit 0
                ;;
            *)
                print_error "无效选项，请重新选择"
                read -p "按回车键继续..."
                ;;
        esac
    done
}

# Check if running as root
if [ "$EUID" -eq 0 ]; then
    print_error "请不要以root用户运行此脚本"
    exit 1
fi

# Start main program
main
