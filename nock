#!/bin/bash

# ========= Nockchain 挖矿优化版脚本 v1.0 =========
RESET='\033[0m'
BOLD='\033[1m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
CYAN='\033[0;36m'

NCK_DIR="$HOME/nockchain"
ENV_FILE="$NCK_DIR/.env"
BUILD_LOG="$HOME/nockchain_build.log"
NODE_LOG="$NCK_DIR/logs/nockchain.log"

# ---------- 辅助函数 ----------
pause() { echo; read -n1 -r -p "按任意键返回菜单…" _; }

mem_info() {
  local used total perc
  total=$(grep MemTotal /proc/meminfo | awk '{print $2}')
  free=$(grep MemAvailable /proc/meminfo | awk '{print $2}')
  used=$(( (total-free)/1024 ))
  total=$(( total/1024 ))
  perc=$(( used*100/total ))
  printf "%dMi/%dMi (%d%%)" "$used" "$total" "$perc"
}

swap_info() {
  local used total perc
  total=$(grep SwapTotal /proc/meminfo | awk '{print $2}')
  free=$(grep SwapFree  /proc/meminfo | awk '{print $2}')
  if [ "$total" -eq 0 ]; then echo "0Mi/0Mi (0%)"; return; fi
  used=$(( (total-free)/1024 ))
  total=$(( total/1024 ))
  perc=$(( used*100/total ))
  printf "%dMi/%dMi (%d%%)" "$used" "$total" "$perc"
}

log() { echo -e "${BLUE}[*] $*${RESET}"; }
ok()  { echo -e "${GREEN}[✓] $*${RESET}"; }
warn(){ echo -e "${YELLOW}[!] $*${RESET}"; }
err() { echo -e "${RED}[✗] $*${RESET}"; exit 1; }

# ---------- 性能优化函数 ----------
optimize_memory() {
  log "优化内存配置"
  
  # 设置更大的栈空间，防止mem.rs错误
  export RUST_MIN_STACK=33554432  # 32MB栈空间
  
  # 配置swap（如果内存不足）
  total_mem=$(grep MemTotal /proc/meminfo | awk '{print int($2/1024)}')
  swap_total=$(grep SwapTotal /proc/meminfo | awk '{print int($2/1024)}')
  
  if [ "$total_mem" -lt 32768 ] && [ "$swap_total" -lt 16384 ]; then
    warn "内存小于32GB，自动创建16GB swap"
    sudo fallocate -l 16G /swapfile 2>/dev/null || dd if=/dev/zero of="$HOME/nockchain.swap" bs=1G count=16
    sudo chmod 600 /swapfile 2>/dev/null || chmod 600 "$HOME/nockchain.swap"
    sudo mkswap /swapfile 2>/dev/null || sudo mkswap "$HOME/nockchain.swap" 2>/dev/null
    sudo swapon /swapfile 2>/dev/null || sudo swapon "$HOME/nockchain.swap" 2>/dev/null
    ok "Swap已配置"
  fi
  
  # 优化内存分配器
  export MALLOC_ARENA_MAX=2  # 限制内存分配器arena数量
  
  # 设置Nockchain内存限制
  export NOCKVM_MEMORY_LIMIT=8589934592  # 8GB内存限制
  
  ok "内存优化完成"
}

optimize_cpu() {
  log "优化CPU配置"
  
  # 获取物理CPU核心数（不包括超线程）
  if [ -f /proc/cpuinfo ]; then
    physical_cores=$(grep "cpu cores" /proc/cpuinfo | head -1 | awk '{print $4}')
    if [ -z "$physical_cores" ]; then
      physical_cores=$(grep -c processor /proc/cpuinfo)
    fi
  else
    physical_cores=4  # 默认值
  fi
  
  # 根据物理核心数优化线程配置
  if [ "$physical_cores" -ge 8 ]; then
    # 高端CPU：使用75%的物理核心
    export CARGO_BUILD_JOBS=$(( physical_cores * 3 / 4 ))
    export NOCKCHAIN_MINING_THREADS=$(( physical_cores * 3 / 4 ))
  elif [ "$physical_cores" -ge 4 ]; then
    # 中端CPU：使用所有物理核心
    export CARGO_BUILD_JOBS=$physical_cores
    export NOCKCHAIN_MINING_THREADS=$physical_cores
  else
    # 低端CPU：使用所有核心
    export CARGO_BUILD_JOBS=$physical_cores
    export NOCKCHAIN_MINING_THREADS=$physical_cores
  fi
  
  # 设置CPU亲和性（如果可能）
  if command -v taskset >/dev/null 2>&1; then
    # 将挖矿进程绑定到特定CPU核心
    export NOCKCHAIN_CPU_AFFINITY="0-$((NOCKCHAIN_MINING_THREADS-1))"
  fi
  
  ok "CPU优化完成：使用 $NOCKCHAIN_MINING_THREADS 个线程"
}

optimize_mining_params() {
  log "优化挖矿参数"
  
  # 设置挖矿优化参数
  export RUST_LOG=info  # 减少日志输出提高性能
  export RUSTFLAGS="-C target-cpu=native -C opt-level=3 -C codegen-units=1"  # 编译优化
  
  # 创建优化配置文件
  mkdir -p "$NCK_DIR/config"
  cat > "$NCK_DIR/config/mining_config.toml" << EOF
# Nockchain 挖矿优化配置
[mining]
threads = $NOCKCHAIN_MINING_THREADS
parallel = true
batch_size = 1024
memory_pool = 4096  # MB

[network]
connect_peers = 8
max_peers = 16
outbound_rate = 100
EOF
  
  ok "挖矿参数优化完成"
}

# ---------- 主要功能函数 ----------
complete_environment_setup() {
  echo "=== Nockchain 优化版安装 $(date) ===" > "$BUILD_LOG"
  
  log "系统检测"
  command -v sudo >/dev/null || warn "无sudo权限，部分优化可能无法应用"
  
  log "安装依赖"
  sudo apt update -qq 2>/dev/null
  sudo apt install -y build-essential clang cmake pkg-config git curl libssl-dev 2>/dev/null
  
  optimize_memory
  optimize_cpu
  
  log "安装Rust"
  if ! command -v cargo >/dev/null; then
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    source "$HOME/.cargo/env"
  fi
  
  # 优化Cargo配置
  mkdir -p "$HOME/.cargo"
  cat > "$HOME/.cargo/config.toml" << EOF
[build]
jobs = $CARGO_BUILD_JOBS

[profile.release]
opt-level = 3
lto = "thin"
codegen-units = 1
panic = "abort"

[target.x86_64-unknown-linux-gnu]
rustflags = ["-C", "target-cpu=native"]
EOF
  
  log "克隆/更新源码"
  if [ ! -d "$NCK_DIR" ]; then
    git clone --depth 1 https://github.com/zorp-corp/nockchain "$NCK_DIR"
  else
    git -C "$NCK_DIR" pull
  fi
  
  optimize_mining_params
  
  log "编译优化版Nockchain"
  cd "$NCK_DIR"
  cargo clean
  RUSTFLAGS="-C target-cpu=native -C opt-level=3" cargo build --release 2>&1 | tee "$BUILD_LOG"
  
  # 安装到系统路径
  mkdir -p "$HOME/.local/bin"
  cp target/release/{nockchain,nockchain-wallet,hoonc} "$HOME/.local/bin/" 2>/dev/null || true
  
  # 创建必要目录
  mkdir -p "$NCK_DIR/logs" "$NCK_DIR/.socket"
  
  # 创建环境文件
  [ -f "$ENV_FILE" ] || cat > "$ENV_FILE" <<EOF
MINING_PUBKEY=
RUST_LOG=info
EOF
  
  ok "优化安装完成"
  pause
}

set_mining_pubkey() {
  [ -f "$ENV_FILE" ] || err ".env 不存在，请先安装"
  read -rp "输入 128 位公钥: " key
  key=$(echo "$key" | tr -d '[:space:]' | tr A-F a-f)
  [[ ${#key} -eq 128 && "$key" =~ ^[0-9a-f]+$ ]] || { err "格式不正确"; }
  sed -i "/^MINING_PUBKEY=/d" "$ENV_FILE"
  echo "MINING_PUBKEY=$key" >> "$ENV_FILE"
  ok "公钥已写入 .env"
  pause
}

start_optimized_node() {
  source "$ENV_FILE" || err "读取 .env 失败"
  [ -n "$MINING_PUBKEY" ] || err "未设置 MINING_PUBKEY"
  
  # 停止现有进程
  pkill -f nockchain || true
  
  # 优化系统
  optimize_memory
  optimize_cpu
  
  # 设置CPU亲和性
  if [ -n "$NOCKCHAIN_CPU_AFFINITY" ] && command -v taskset >/dev/null 2>&1; then
    TASKSET_CMD="taskset -c $NOCKCHAIN_CPU_AFFINITY"
  else
    TASKSET_CMD=""
  fi
  
  # 启动优化版节点
  cd "$NCK_DIR"
  mkdir -p logs .socket
  
  # 构建启动命令
  MINING_CMD="RUST_MIN_STACK=33554432 NOCKVM_MEMORY_LIMIT=8589934592 RUST_LOG=info $TASKSET_CMD nockchain \
    --mining-pubkey $MINING_PUBKEY \
    --mine \
    --mining-threads $NOCKCHAIN_MINING_THREADS \
    --peer /ip4/95.216.102.60/udp/3006/quic-v1 \
    --peer /ip4/65.109.156.108/udp/3006/quic-v1 \
    --peer /ip4/65.21.67.175/udp/3006/quic-v1 \
    --peer /ip4/65.109.156.172/udp/3006/quic-v1 \
    --peer /ip4/34.174.22.166/udp/3006/quic-v1 \
    --npc-socket .socket/nockchain.sock \
    --bind /ip4/0.0.0.0/udp/3006/quic-v1"
  
  # 使用screen启动
  if command -v screen >/dev/null 2>&1; then
    screen -dmS nockchain bash -c "cd '$NCK_DIR' && $MINING_CMD 2>&1 | tee logs/nockchain.log"
    sleep 3
    if screen -list | grep -qw "nockchain"; then
      ok "优化版节点已启动 (screen会话)"
    else
      err "节点启动失败"
    fi
  else
    # 后台启动
    nohup bash -c "$MINING_CMD" > logs/nockchain.log 2>&1 &
    ok "优化版节点已后台启动 (PID: $!)"
  fi
  
  log "挖矿已开始，使用 $NOCKCHAIN_MINING_THREADS 个线程"
  pause
}

view_logs() {
  [ -f "$NODE_LOG" ] && tail -n 50 -f "$NODE_LOG" || err "日志文件不存在"
}

check_status() {
  echo -e "${BLUE}=== 系统资源 ===${RESET}"
  echo "内存: $(mem_info)   Swap: $(swap_info)"
  echo "CPU线程: $NOCKCHAIN_MINING_THREADS / $(grep -c processor /proc/cpuinfo)"
  
  echo -e "\n${BLUE}=== 挖矿状态 ===${RESET}"
  if pgrep -f "nockchain.*--mine" >/dev/null; then
    ok "挖矿进程运行中"
    ps -o pid,pcpu,pmem,cmd -p $(pgrep -f "nockchain.*--mine") | grep -v PID
  else
    warn "挖矿进程未运行"
  fi
  
  echo -e "\n${BLUE}=== 最近日志 ===${RESET}"
  if [ -f "$NODE_LOG" ]; then
    tail -n 5 "$NODE_LOG"
  else
    warn "日志文件不存在"
  fi
  
  pause
}

# ---------- 菜单 ----------
while true; do
  clear
  echo -e "${GREEN}Nockchain 挖矿优化版${RESET}"
  echo "1) 安装优化版Nockchain"
  echo "2) 设置挖矿公钥"
  echo "3) 启动优化版挖矿节点"
  echo "4) 查看挖矿日志"
  echo "5) 检查挖矿状态"
  echo "0) 退出"
  read -rp "选择操作: " choice
  case $choice in
    1) complete_environment_setup ;;
    2) set_mining_pubkey ;;
    3) start_optimized_node ;;
    4) view_logs ;;
    5) check_status ;;
    0) exit 0 ;;
    *) echo "无效选项"; sleep 1 ;;
  esac
done
